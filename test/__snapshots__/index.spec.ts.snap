// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`allOfCombined should generate: test/generated/allOfCombined/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export { paramTypeEnum1 as paramTypeEnum1Dto } from './models/paramTypeEnum1';
export type { responseObj as responseObjDto } from './models/responseObj';
export type { responseObj3 as responseObj3Dto } from './models/responseObj3';

export { $paramTypeEnum1 } from './schemas/$paramTypeEnum1';
export { $responseObj } from './schemas/$responseObj';
export { $responseObj3 } from './schemas/$responseObj3';

export { DefaultService } from './services/DefaultService';
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/AddSpaceToSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type AddSpaceToSpaceGroup = {
    spaceId: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/AddUserToOrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type AddUserToOrganisationGroup = {
    userId: string;
    userPermissions: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/AddUserToSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type AddUserToSpaceGroup = {
    userId: string;
    userPermissions: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/AddUserToTeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type AddUserToTeamGroup = {
    userId: string;
    userPermissions: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ApplicationError.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApplicationError = {
    /**
     * Error code
     */
    code: number;
    /**
     * Error message
     */
    message: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Asset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AssetType } from './AssetType';
import type { OwnerType } from './OwnerType';
export type Asset = {
    /**
     * Unique id of the organisation
     */
    id: string;
    /**
     * Name of the organisation
     */
    name: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    contentType: AssetType;
    ownerType: OwnerType;
    /**
     * boolean to see if the background has been removed or not.
     */
    backgroundRemoved: boolean;
    /**
     * boolean to see if the upscaled.
     */
    upscaled: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processed: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processedRemoveBackground: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processedFailed: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processedRemoveBackgroundFailed: boolean;
    /**
     * boolean to see if the images has come from unsplash or not.
     */
    unsplash: boolean;
    /**
     * unsplash Id
     */
    unsplashId?: string;
    /**
     * unsplash Raw URL
     */
    unsplashRawURL?: string;
    /**
     * unsplash Full Size URL
     */
    unsplashFullURL?: string;
    /**
     * unsplash Regular URL
     */
    unsplashRegularURL?: string;
    /**
     * unsplash Small URL
     */
    unsplashSmallURL?: string;
    /**
     * unsplash Thumb URL
     */
    unsplashThumbURL?: string;
    /**
     * unsplash Download URL
     */
    unsplashDownloadURL?: string;
    /**
     * unsplash description
     */
    unsplashDescription?: string;
    /**
     * width of the image
     */
    width?: number;
    /**
     * height of the image
     */
    height?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/AssetTransformationQueryParamSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum AssetTransformationQueryParamSchema {
    REMOVE_BACKGROUND = 'remove-background',
    UPSCALING = 'upscaling',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/AssetType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum AssetType {
    IMAGE = 'image',
    FONT = 'font',
    TEMPLATE_MEDIA = 'template-media',
    STICKERS = 'stickers',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/AvatarUrl.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type AvatarUrl = {
    /**
     * url of the avatar
     */
    avatarUrl: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BaseDataSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type BaseDataSchema = {
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BaseSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
export type BaseSchema = {
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BaseSchemaStatus.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum BaseSchemaStatus {
    PENDING = 'pending',
    DELETED = 'deleted',
    INVALID = 'invalid',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanBooleanValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type BooleanBooleanValue = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { BooleanFieldData } from './BooleanFieldData';
export type BooleanField = {
    control: 'boolean';
    data: BooleanFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BooleanFieldValue } from './BooleanFieldValue';
export type BooleanFieldData = {
    value: boolean;
    checkedValue: BooleanFieldValue;
    uncheckedValue: BooleanFieldValue;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BooleanFieldValue } from './BooleanFieldValue';
export type BooleanFieldDataDetails = {
    value: boolean;
    checkedValue: BooleanFieldValue;
    uncheckedValue: BooleanFieldValue;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BooleanFieldData } from './BooleanFieldData';
import type { ControlType } from './ControlType';
export type BooleanFieldDetails = {
    control: ControlType.BOOLEAN;
    data: BooleanFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanFieldValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BooleanBooleanValue } from './BooleanBooleanValue';
import type { BooleanNumberValue } from './BooleanNumberValue';
import type { BooleanStringValue } from './BooleanStringValue';
export type BooleanFieldValue = (BooleanStringValue | BooleanNumberValue | BooleanBooleanValue);

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanNumberValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type BooleanNumberValue = number;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/BooleanStringValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type BooleanStringValue = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { ColourFieldData } from './ColourFieldData';
export type ColourField = {
    control: 'colour';
    data: ColourFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldConicalGradientColourInterpolationMethod.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldConicalGradientColourInterpolationMethod {
    RECTANGULAR_COLOUR_SPACE = 'rectangular-colour-space',
    POLAR_COLOUR_SPACE = 'polar-colour-space',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldConicalGradientPolarColourSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldConicalGradientPolarColourSpace {
    HSL = 'hsl',
    HWB = 'hwb',
    LCH = 'lch',
    OKLCH = 'oklch',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldConicalGradientPolarHue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldConicalGradientPolarHue {
    SHORTER = 'shorter',
    LONGER = 'longer',
    INCREASING = 'increasing',
    DECREASING = 'decreasing',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldConicalGradientRectangularColourSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldConicalGradientRectangularColourSpace {
    SRGB = 'srgb',
    SRGB_LINEAR = 'srgb-linear',
    DISPLAY_P3 = 'display-p3',
    A98_RGB = 'a98-rgb',
    PROPHOTO_RGB = 'prophoto-rgb',
    REC2020 = 'rec2020',
    LAB = 'lab',
    OKLAB = 'oklab',
    XYZ = 'xyz',
    XYZ_D50 = 'xyz-d50',
    XYZ_D65 = 'xyz-d65',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ColourFieldGradient } from './ColourFieldGradient';
import type { ColourFieldMode } from './ColourFieldMode';
import type { ColourFieldType } from './ColourFieldType';
export type ColourFieldData = {
    value: string;
    mode: ColourFieldMode;
    allowAdditionalColours: boolean;
    allowGradientChangesInPost: boolean;
    allowColourAdjustmentsInPost?: boolean;
    availableColours: Array<ColourFieldType>;
    additionalColours: Array<ColourFieldType>;
    gradient?: ColourFieldGradient;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ColourFieldGradient } from './ColourFieldGradient';
import type { ColourFieldMode } from './ColourFieldMode';
import type { ColourFieldType } from './ColourFieldType';
export type ColourFieldDataDetails = {
    value: string;
    mode: ColourFieldMode;
    allowAdditionalColours: boolean;
    allowGradientChangesInPost: boolean;
    allowColourAdjustmentsInPost?: boolean;
    availableColours: Array<ColourFieldType>;
    additionalColours: Array<ColourFieldType>;
    gradient?: ColourFieldGradient;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ColourFieldData } from './ColourFieldData';
import type { ControlType } from './ControlType';
export type ColourFieldDetails = {
    control: ControlType.COLOUR;
    data: ColourFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldGradient.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ColourFieldConicalGradientColourInterpolationMethod } from './ColourFieldConicalGradientColourInterpolationMethod';
import type { ColourFieldConicalGradientPolarColourSpace } from './ColourFieldConicalGradientPolarColourSpace';
import type { ColourFieldConicalGradientPolarHue } from './ColourFieldConicalGradientPolarHue';
import type { ColourFieldConicalGradientRectangularColourSpace } from './ColourFieldConicalGradientRectangularColourSpace';
import type { ColourFieldGradientMode } from './ColourFieldGradientMode';
import type { ColourFieldGradientPosition } from './ColourFieldGradientPosition';
import type { ColourFieldRadialGradientShape } from './ColourFieldRadialGradientShape';
import type { ColourFieldRadialGradientSize } from './ColourFieldRadialGradientSize';
export type ColourFieldGradient = {
    gradientMode?: ColourFieldGradientMode;
    linearGradientDirection?: string;
    linearGradientDirectionCustom?: string;
    radialGradientShape?: ColourFieldRadialGradientShape;
    radialGradientSize?: ColourFieldRadialGradientSize;
    radialGradientLength1?: number;
    radialGradientLength2?: number;
    conicalGradientAngle?: number;
    conicalGradientColourInterpolationMethod?: ColourFieldConicalGradientColourInterpolationMethod;
    conicalGradientRectangularColourSpace?: ColourFieldConicalGradientRectangularColourSpace;
    conicalGradientPolarColourSpace?: ColourFieldConicalGradientPolarColourSpace;
    conicalGradientPolarHue?: ColourFieldConicalGradientPolarHue;
    gradientPosition1?: ColourFieldGradientPosition;
    gradientPosition2?: ColourFieldGradientPosition;
    gradientPosition1Length?: number;
    gradientPosition2Length?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldGradientMode.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldGradientMode {
    LINEAR = 'linear',
    RADIAL = 'radial',
    CONIC = 'conic',
    REPEATING_LINEAR = 'repeating-linear',
    REPEATING_RADIAL = 'repeating-radial',
    REPEATING_CONIC = 'repeating-conic',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldGradientPosition.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldGradientPosition {
    LEFT = 'left',
    CENTER = 'center',
    RIGHT = 'right',
    LENGTH = 'length',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldMode.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldMode {
    SINGLE = 'single',
    PALETTE = 'palette',
    GRADIENT = 'gradient',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldRadialGradientShape.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldRadialGradientShape {
    CIRCLE = 'circle',
    ELLIPSE = 'ellipse',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldRadialGradientSize.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ColourFieldRadialGradientSize {
    CLOSEST_SIDE = 'closest-side',
    CLOSEST_CORNER = 'closest-corner',
    FARTHEST_SIDE = 'farthest-side',
    FARTHEST_CORNER = 'farthest-corner',
    LENGTH = 'length',
    LENGTH_PERCENTAGE = 'length-percentage',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ColourFieldType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ColourFieldType = {
    colour: string;
    stopPosition1?: number;
    stopPosition2?: number;
    noColour?: boolean;
    noColourValue?: number;
    degrees?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ControlType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ControlType {
    TEXT = 'text',
    JUSTIFIED_SCALING_TEXT = 'justifiedScalingText',
    RICH_TEXT = 'richText',
    BOOLEAN = 'boolean',
    NUMBER = 'number',
    OPTION = 'option',
    OPTION_FROM_DATA = 'optionFromData',
    IMAGE = 'image',
    IMAGE_COLLECTION = 'imageCollection',
    FEED = 'feed',
    FONT = 'font',
    COLOUR = 'colour',
    JSON = 'json',
    GPT = 'gpt',
    MASTER_FIELD = 'masterField',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateAdminUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreateAdminUser = {
    /**
     * Email of the User
     */
    email: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateAsset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AssetType } from './AssetType';
import type { OwnerType } from './OwnerType';
export type CreateAsset = {
    /**
     * Name of the organisation
     */
    name: string;
    contentType: AssetType;
    ownerType: OwnerType;
    /**
     * Content Type.
     */
    contentSize: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateAssetFromUnsplash.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
export type CreateAssetFromUnsplash = {
    imageId: string;
    ownerType: OwnerType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
export type CreateFeed = {
    /**
     * Name of the feed
     */
    name: string;
    /**
     * The URL of the feed to capture
     */
    url: string;
    ownerType: OwnerType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateJSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
export type CreateJSON = {
    /**
     * Name of the json
     */
    name: string;
    /**
     * The json object
     */
    json: string;
    ownerType: OwnerType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateMasterField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { FieldType } from './FieldType';
import type { OwnerType } from './OwnerType';
export type CreateMasterField = {
    /**
     * Name of the json
     */
    name: string;
    ownerType: OwnerType;
    field: FieldType;
    controlType: ControlType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateOrganisation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreateOrganisation = {
    /**
     * Name of the organisation
     */
    name: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateOrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrganisationManagement } from './OrganisationManagement';
export type CreateOrganisationGroup = {
    /**
     * Name of the organisation group
     */
    name: string;
    permissions: OrganisationManagement;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateOrganisationUserRequest.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreateOrganisationUserRequest = {
    /**
     * ID of the User
     */
    userEmail: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreatePost.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { PostDataType } from './PostDataType';
export type CreatePost = {
    /**
     * Name of the Post
     */
    title: string;
    /**
     * Id of the template
     */
    templateId?: string;
    /**
     * The version of the template
     */
    templateVersion?: string;
    /**
     * The owner of the template
     */
    templateOwner?: string;
    data?: PostDataType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreateSpace = {
    /**
     * Name of the Space
     */
    name: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { SpaceManagement } from './SpaceManagement';
export type CreateSpaceGroup = {
    /**
     * Name of the team group
     */
    name: string;
    permissions: SpaceManagement;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateTeam.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreateTeam = {
    /**
     * Name of the Team
     */
    name: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateTeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { TeamManagement } from './TeamManagement';
export type CreateTeamGroup = {
    /**
     * Name of the team group
     */
    name: string;
    permissions: TeamManagement;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateTeamUserRequest.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreateTeamUserRequest = {
    /**
     * ID of the User
     */
    userId: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateTemplate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
import type { TemplateDefinition } from './TemplateDefinition';
import type { TemplateSchemaType } from './TemplateSchemaType';
import type { TemplateVariation } from './TemplateVariation';
export type CreateTemplate = {
    /**
     * Name of the Template
     */
    title: string;
    ownerType: OwnerType;
    /**
     * Name of the Template
     */
    postTitle?: string;
    schema?: TemplateSchemaType;
    variations?: Record<string, TemplateVariation>;
    definitions?: Record<string, TemplateDefinition>;
    variationsOrder?: Array<string>;
    definitionsOrder?: Array<string>;
    transparentBackground?: boolean;
    /**
     * scale Factor of the template
     */
    scaleFactor?: number;
    /**
     * language settings to add to the template.
     */
    langSettings?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateTransformationResponseAsset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AssetType } from './AssetType';
import type { OwnerType } from './OwnerType';
export type CreateTransformationResponseAsset = {
    /**
     * Unique id of the organisation
     */
    id: string;
    /**
     * Name of the organisation
     */
    name: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    contentType: AssetType;
    ownerType: OwnerType;
    /**
     * boolean to see if the background has been removed or not.
     */
    backgroundRemoved: boolean;
    /**
     * boolean to see if the upscaled.
     */
    upscaled: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processed: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processedRemoveBackground: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processedFailed: boolean;
    /**
     * boolean to see if the images have been processed or not.
     */
    processedRemoveBackgroundFailed: boolean;
    /**
     * boolean to see if the images has come from unsplash or not.
     */
    unsplash: boolean;
    /**
     * unsplash Id
     */
    unsplashId?: string;
    /**
     * unsplash Raw URL
     */
    unsplashRawURL?: string;
    /**
     * unsplash Full Size URL
     */
    unsplashFullURL?: string;
    /**
     * unsplash Regular URL
     */
    unsplashRegularURL?: string;
    /**
     * unsplash Small URL
     */
    unsplashSmallURL?: string;
    /**
     * unsplash Thumb URL
     */
    unsplashThumbURL?: string;
    /**
     * unsplash Download URL
     */
    unsplashDownloadURL?: string;
    /**
     * unsplash description
     */
    unsplashDescription?: string;
    /**
     * width of the image
     */
    width?: number;
    /**
     * height of the image
     */
    height?: number;
    /**
     * Credit used for the image.
     */
    creditUsed: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreateUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreateUser = {
    /**
     * Unique id of the User
     */
    id: string;
    /**
     * Name of the User
     */
    name: string;
    /**
     * Email of the User
     */
    email: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreditUsages.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreditUsages = {
    removeBackground: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/CreditUsed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type CreditUsed = {
    /**
     * Credit used for the image.
     */
    creditUsed: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/EntityMetrics.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreditUsages } from './CreditUsages';
export type EntityMetrics = {
    totalUsers: number;
    activeUsers: number;
    engagedUsers: number;
    creditUsages: CreditUsages;
    postDownloads: number;
    postCreations: number;
    templateCreations: number;
    templatePublications: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Feed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
export type Feed = {
    /**
     * Unique id of the feed
     */
    id: string;
    /**
     * Name of the feed
     */
    name: string;
    /**
     * The URL of the feed to capture
     */
    url: string;
    ownerType: OwnerType;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FeedField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { FeedFieldData } from './FeedFieldData';
export type FeedField = {
    control: 'feed';
    data: FeedFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FeedFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type FeedFieldData = {
    value: string;
    feedValues: Record<string, any>;
    feedId?: string;
    feedItemId?: string;
    feedName?: string;
    showValues: Record<string, any>;
    defaultValues: Record<string, any>;
    order: Array<string>;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FeedFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type FeedFieldDataDetails = {
    value: string;
    feedValues: Record<string, any>;
    feedId?: string;
    feedItemId?: string;
    feedName?: string;
    showValues: Record<string, any>;
    defaultValues: Record<string, any>;
    order: Array<string>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FeedFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { FeedFieldData } from './FeedFieldData';
export type FeedFieldDetails = {
    control: ControlType.FEED;
    data: FeedFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FieldType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BooleanField } from './BooleanField';
import type { ColourField } from './ColourField';
import type { FeedField } from './FeedField';
import type { FontField } from './FontField';
import type { GptField } from './GptField';
import type { ImageCollectionField } from './ImageCollectionField';
import type { ImageField } from './ImageField';
import type { JSONField } from './JSONField';
import type { JustifiedScalingTextField } from './JustifiedScalingTextField';
import type { MasterFieldField } from './MasterFieldField';
import type { NumberField } from './NumberField';
import type { OptionField } from './OptionField';
import type { OptionFromDataField } from './OptionFromDataField';
import type { RichTextField } from './RichTextField';
import type { TextField } from './TextField';
export type FieldType = (TextField | JustifiedScalingTextField | RichTextField | BooleanField | NumberField | OptionField | OptionFromDataField | ImageField | ImageCollectionField | FeedField | FontField | ColourField | JSONField | GptField | MasterFieldField);

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Fields.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { FieldType } from './FieldType';
export type Fields = Array<FieldType>;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FontField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { FontFieldData } from './FontFieldData';
export type FontField = {
    control: 'font';
    data: FontFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FontFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { FontFieldValue } from './FontFieldValue';
export type FontFieldData = {
    value: FontFieldValue;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FontFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { FontFieldValue } from './FontFieldValue';
export type FontFieldDataDetails = {
    value: FontFieldValue;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FontFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { FontFieldData } from './FontFieldData';
export type FontFieldDetails = {
    control: ControlType.FONT;
    data: FontFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/FontFieldValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type FontFieldValue = {
    assetId: string;
    fileName: string;
    fontName: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GetAllPostResponse.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type GetAllPostResponse = {
    /**
     * Unique id of the Post
     */
    id: string;
    /**
     * Name of the Post
     */
    title: string;
    /**
     * Id of the space the post is associated with
     */
    spaceId: string;
    /**
     * Id of the team the post is associated with
     */
    teamId: string;
    /**
     * Id of the organisation the post is associated with
     */
    organisationId: string;
    /**
     * Id of the template
     */
    templateId: string;
    /**
     * The version of the template
     */
    templateVersion: string;
    /**
     * The owner of the template
     */
    templateOwner: string;
    /**
     * boolean to say if the post is published or not.
     */
    published: boolean;
    /**
     * User ID of who published the post
     */
    publishedBy?: string;
    /**
     * The iso string the time the post was published
     */
    publishedAt?: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    /**
     * boolean if the post is archived or not
     */
    archive?: boolean;
    /**
     * The version of the template
     */
    version: number;
    /**
     * last image time in iso format.
     */
    lastImageTime: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GptFielAdditionalInputs.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GptFieldAdditionalInputText } from './GptFieldAdditionalInputText';
import type { GptFieldAdditionalInputWebContent } from './GptFieldAdditionalInputWebContent';
export type GptFielAdditionalInputs = (GptFieldAdditionalInputText | GptFieldAdditionalInputWebContent);

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GptField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { GptFieldData } from './GptFieldData';
export type GptField = {
    control: 'gpt';
    data: GptFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GptFieldAdditionalInputText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type GptFieldAdditionalInputText = {
    control: 'text';
    input: string;
    showInPost: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GptFieldAdditionalInputWebContent.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type GptFieldAdditionalInputWebContent = {
    control: 'getWebsiteTextContentext';
    input: string;
    height?: number;
    showInPost: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GptFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GptFielAdditionalInputs } from './GptFielAdditionalInputs';
export type GptFieldData = {
    value: string;
    input: string;
    inputHeight?: number;
    additionalInputs: Array<GptFielAdditionalInputs>;
    automatic: boolean;
    buttonText?: string;
    viewInputField: boolean;
    viewOutputField: boolean;
    viewButton: boolean;
    customizeButtonText: boolean;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GptFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GptFielAdditionalInputs } from './GptFielAdditionalInputs';
export type GptFieldDataDetails = {
    value: string;
    input: string;
    inputHeight?: number;
    additionalInputs: Array<GptFielAdditionalInputs>;
    automatic: boolean;
    buttonText?: string;
    viewInputField: boolean;
    viewOutputField: boolean;
    viewButton: boolean;
    customizeButtonText: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GptFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { GptFieldData } from './GptFieldData';
export type GptFieldDetails = {
    control: ControlType.GPT;
    data: GptFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
import type { User } from './User';
export type GroupUser = {
    user: User;
    permission: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/GroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type GroupUserPermissions = {
    /**
     * Admin of the organisation
     */
    admin: boolean;
    /**
     * Can a user userManagement
     */
    userManagement: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/IfModifiedSinceHeader.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Last modified date
 */
export type IfModifiedSinceHeader = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageCollectionField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { ImageCollectionFieldData } from './ImageCollectionFieldData';
export type ImageCollectionField = {
    control: 'imageCollection';
    data: ImageCollectionFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageCollectionFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageCollectionFieldOptions } from './ImageCollectionFieldOptions';
import type { ImageFieldFitMode } from './ImageFieldFitMode';
import type { ImageFieldSettings } from './ImageFieldSettings';
import type { ImageFieldSizeType } from './ImageFieldSizeType';
export type ImageCollectionFieldData = {
    imageCollectionOptions: Array<ImageCollectionFieldOptions>;
    imageCollectionSettings: ImageFieldSettings;
    imageCollectionVariations: Record<string, ImageFieldSettings>;
    value: number;
    sameSettingsForAllVariations: boolean;
    imageSizeType: ImageFieldSizeType;
    imageFitMode: ImageFieldFitMode;
    viewThumbnailsInPost: boolean;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageCollectionFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageCollectionFieldOptions } from './ImageCollectionFieldOptions';
import type { ImageFieldFitMode } from './ImageFieldFitMode';
import type { ImageFieldSettings } from './ImageFieldSettings';
import type { ImageFieldSizeType } from './ImageFieldSizeType';
export type ImageCollectionFieldDataDetails = {
    imageCollectionOptions: Array<ImageCollectionFieldOptions>;
    imageCollectionSettings: ImageFieldSettings;
    imageCollectionVariations: Record<string, ImageFieldSettings>;
    value: number;
    sameSettingsForAllVariations: boolean;
    imageSizeType: ImageFieldSizeType;
    imageFitMode: ImageFieldFitMode;
    viewThumbnailsInPost: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageCollectionFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { ImageCollectionFieldData } from './ImageCollectionFieldData';
export type ImageCollectionFieldDetails = {
    control: ControlType.IMAGE_COLLECTION;
    data: ImageCollectionFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageCollectionFieldOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ImageCollectionFieldOptions = {
    assetId: string;
    label: string;
    value: string;
    imgWidth?: number;
    imgHeight?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { ImageFieldData } from './ImageFieldData';
export type ImageField = {
    control: 'image';
    data: ImageFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageFieldFitMode } from './ImageFieldFitMode';
import type { ImageFieldRemoveBackgroundInactiveOptions } from './ImageFieldRemoveBackgroundInactiveOptions';
import type { ImageFieldSizeType } from './ImageFieldSizeType';
import type { ImageFieldvalue } from './ImageFieldvalue';
export type ImageFieldData = {
    value: string;
    imageValue: ImageFieldvalue;
    sameSettingsForAllVariations: boolean;
    imageSizeType: ImageFieldSizeType;
    imageFitMode: ImageFieldFitMode;
    removeBackgroundOptional?: boolean;
    removeBackgroundAutomatic?: boolean;
    upScalingOptional?: boolean;
    upScalingWhenRequired?: boolean;
    showRemoveBackGroundToggle?: boolean;
    defaultTab?: string;
    unsplashDefaultSearchTerm?: string;
    useUnsplashDefaultSearchTerm?: boolean;
    removeBackgrounInactiveOptions?: ImageFieldRemoveBackgroundInactiveOptions;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageFieldFitMode } from './ImageFieldFitMode';
import type { ImageFieldRemoveBackgroundInactiveOptions } from './ImageFieldRemoveBackgroundInactiveOptions';
import type { ImageFieldSizeType } from './ImageFieldSizeType';
import type { ImageFieldvalue } from './ImageFieldvalue';
export type ImageFieldDataDetails = {
    value: string;
    imageValue: ImageFieldvalue;
    sameSettingsForAllVariations: boolean;
    imageSizeType: ImageFieldSizeType;
    imageFitMode: ImageFieldFitMode;
    removeBackgroundOptional?: boolean;
    removeBackgroundAutomatic?: boolean;
    upScalingOptional?: boolean;
    upScalingWhenRequired?: boolean;
    showRemoveBackGroundToggle?: boolean;
    defaultTab?: string;
    unsplashDefaultSearchTerm?: string;
    useUnsplashDefaultSearchTerm?: boolean;
    removeBackgrounInactiveOptions?: ImageFieldRemoveBackgroundInactiveOptions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { ImageFieldData } from './ImageFieldData';
export type ImageFieldDetails = {
    control: ControlType.IMAGE;
    data: ImageFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldFitMode.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ImageFieldFitMode {
    COVER = 'cover',
    NONE = 'none',
    CONTAIN = 'contain',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldPosition.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ImageFieldPosition = {
    'x': number;
    'y': number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldRemoveBackgroundInactiveOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ImageFieldRemoveBackgroundInactiveOptions {
    SHOW = 'show',
    HIDE = 'hide',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldSettings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageFieldPosition } from './ImageFieldPosition';
export type ImageFieldSettings = {
    scale: number;
    width?: number;
    height?: number;
    position: ImageFieldPosition;
    rotation: number;
    brightness?: number;
    contrast?: number;
    saturate?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldSizeType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum ImageFieldSizeType {
    CUSTOM = 'custom',
    MATCH = 'match',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/ImageFieldvalue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageFieldSettings } from './ImageFieldSettings';
export type ImageFieldvalue = {
    assetId: string;
    imageSettings: ImageFieldSettings;
    variations: Record<string, ImageFieldSettings>;
    imgWidth?: number;
    imgHeight?: number;
    imageFormat?: string;
    removeBackgroundImage?: boolean;
    assetRemoveBackground?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
export type JSON = {
    /**
     * Unique id of the json
     */
    id: string;
    /**
     * Name of the json
     */
    name: string;
    ownerType: OwnerType;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    /**
     * The json object
     */
    json: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JSONField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { JSONFieldData } from './JSONFieldData';
export type JSONField = {
    control: 'json';
    data: JSONFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JSONFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type JSONFieldData = {
    value: string;
    inputHeight?: number;
    fromShared: boolean;
    sharedJsonId?: string;
    sharedJsonName?: string;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JSONFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type JSONFieldDataDetails = {
    value: string;
    inputHeight?: number;
    fromShared: boolean;
    sharedJsonId?: string;
    sharedJsonName?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JSONFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { JSONFieldData } from './JSONFieldData';
export type JSONFieldDetails = {
    control: ControlType.JSON;
    data: JSONFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JSONGetAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
export type JSONGetAll = {
    /**
     * Unique id of the json
     */
    id: string;
    /**
     * Name of the json
     */
    name: string;
    ownerType: OwnerType;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JSONRemaining.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type JSONRemaining = {
    /**
     * The json object
     */
    json: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JustifiedScalingClassOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type JustifiedScalingClassOptions = {
    label: string;
    value: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JustifiedScalingTextField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { JustifiedScalingTextFieldData } from './JustifiedScalingTextFieldData';
export type JustifiedScalingTextField = {
    control: 'justifiedScalingText';
    data: JustifiedScalingTextFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JustifiedScalingTextFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { JustifiedScalingClassOptions } from './JustifiedScalingClassOptions';
import type { JustifiedScalingTextInput } from './JustifiedScalingTextInput';
import type { JustifiedScalingTextSettings } from './JustifiedScalingTextSettings';
export type JustifiedScalingTextFieldData = {
    value: string;
    justifiedScalingVariations: Record<string, JustifiedScalingTextSettings>;
    justifiedScalingSettings: JustifiedScalingTextSettings;
    sameSettingsForAllVariations: boolean;
    canUpdateClassNamesInPost: boolean;
    canAddAndDeleteRowsInPost: boolean;
    justifiedScalingInputs: Array<JustifiedScalingTextInput>;
    classOptions?: Array<JustifiedScalingClassOptions>;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JustifiedScalingTextFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { JustifiedScalingClassOptions } from './JustifiedScalingClassOptions';
import type { JustifiedScalingTextInput } from './JustifiedScalingTextInput';
import type { JustifiedScalingTextSettings } from './JustifiedScalingTextSettings';
export type JustifiedScalingTextFieldDataDetails = {
    value: string;
    justifiedScalingVariations: Record<string, JustifiedScalingTextSettings>;
    justifiedScalingSettings: JustifiedScalingTextSettings;
    sameSettingsForAllVariations: boolean;
    canUpdateClassNamesInPost: boolean;
    canAddAndDeleteRowsInPost: boolean;
    justifiedScalingInputs: Array<JustifiedScalingTextInput>;
    classOptions?: Array<JustifiedScalingClassOptions>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JustifiedScalingTextFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { JustifiedScalingTextFieldData } from './JustifiedScalingTextFieldData';
export type JustifiedScalingTextFieldDetails = {
    control: ControlType.JUSTIFIED_SCALING_TEXT;
    data: JustifiedScalingTextFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JustifiedScalingTextInput.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type JustifiedScalingTextInput = {
    value: string;
    className: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/JustifiedScalingTextSettings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type JustifiedScalingTextSettings = {
    lineHeight: number;
    maxHeight?: number;
    scaleFromOrigin?: string;
    margin?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { FieldType } from './FieldType';
import type { OwnerType } from './OwnerType';
export type MasterField = {
    /**
     * Unique id of the json
     */
    id: string;
    /**
     * The version of the template
     */
    version: number;
    /**
     * Name of the json
     */
    name: string;
    ownerType: OwnerType;
    field: FieldType;
    controlType: ControlType;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    draftVersion: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldBaseDataObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type MasterFieldBaseDataObject = {
    masterFieldName?: string;
    masterFieldId?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForBoolean = {
    masterFieldControl: MasterFieldsControlType.BOOLEAN;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForColour.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForColour = {
    masterFieldControl: MasterFieldsControlType.COLOUR;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForFeed = {
    masterFieldControl: MasterFieldsControlType.FEED;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForFont.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForFont = {
    masterFieldControl: MasterFieldsControlType.FONT;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForGpt.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForGpt = {
    masterFieldControl: MasterFieldsControlType.GPT;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForImage.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForImage = {
    masterFieldControl: MasterFieldsControlType.IMAGE;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForImageCollection.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForImageCollection = {
    masterFieldControl: MasterFieldsControlType.IMAGE_COLLECTION;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForJson.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForJson = {
    masterFieldControl: MasterFieldsControlType.JSON;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForJustifiedScalingText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForJustifiedScalingText = {
    masterFieldControl: MasterFieldsControlType.JUSTIFIED_SCALING_TEXT;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForNone.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForNone = {
    masterFieldControl: MasterFieldsControlType.NONE;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForNumber.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForNumber = {
    masterFieldControl: MasterFieldsControlType.NUMBER;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForOption.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForOption = {
    masterFieldControl: MasterFieldsControlType.OPTION;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForOptionFromData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForOptionFromData = {
    masterFieldControl: MasterFieldsControlType.OPTION_FROM_DATA;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForRichText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForRichText = {
    masterFieldControl: MasterFieldsControlType.RICH_TEXT;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldControlForText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldsControlType } from './MasterFieldsControlType';
export type MasterFieldControlForText = {
    masterFieldControl: MasterFieldsControlType.TEXT;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { MasterFieldFieldData } from './MasterFieldFieldData';
export type MasterFieldField = {
    control: 'masterField';
    data: MasterFieldFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { MasterFieldFieldDataBoolean } from './MasterFieldFieldDataBoolean';
import type { MasterFieldFieldDataColour } from './MasterFieldFieldDataColour';
import type { MasterFieldFieldDataFeed } from './MasterFieldFieldDataFeed';
import type { MasterFieldFieldDataFont } from './MasterFieldFieldDataFont';
import type { MasterFieldFieldDataGpt } from './MasterFieldFieldDataGpt';
import type { MasterFieldFieldDataImage } from './MasterFieldFieldDataImage';
import type { MasterFieldFieldDataImageCollection } from './MasterFieldFieldDataImageCollection';
import type { MasterFieldFieldDataJSON } from './MasterFieldFieldDataJSON';
import type { MasterFieldFieldDataJustifiedScalingText } from './MasterFieldFieldDataJustifiedScalingText';
import type { MasterFieldFieldDataNone } from './MasterFieldFieldDataNone';
import type { MasterFieldFieldDataNumber } from './MasterFieldFieldDataNumber';
import type { MasterFieldFieldDataOption } from './MasterFieldFieldDataOption';
import type { MasterFieldFieldDataOptionFromData } from './MasterFieldFieldDataOptionFromData';
import type { MasterFieldFieldDataRichText } from './MasterFieldFieldDataRichText';
import type { MasterFieldFieldDataText } from './MasterFieldFieldDataText';
export type MasterFieldFieldData = (MasterFieldFieldDataText | MasterFieldFieldDataJustifiedScalingText | MasterFieldFieldDataRichText | MasterFieldFieldDataBoolean | MasterFieldFieldDataNumber | MasterFieldFieldDataOption | MasterFieldFieldDataOptionFromData | MasterFieldFieldDataImage | MasterFieldFieldDataImageCollection | MasterFieldFieldDataFeed | MasterFieldFieldDataFont | MasterFieldFieldDataColour | MasterFieldFieldDataJSON | MasterFieldFieldDataGpt | MasterFieldFieldDataNone);

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BooleanFieldValue } from './BooleanFieldValue';
export type MasterFieldFieldDataBoolean = {
    value: boolean;
    checkedValue: BooleanFieldValue;
    uncheckedValue: BooleanFieldValue;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'boolean';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataColour.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ColourFieldGradient } from './ColourFieldGradient';
import type { ColourFieldMode } from './ColourFieldMode';
import type { ColourFieldType } from './ColourFieldType';
export type MasterFieldFieldDataColour = {
    value: string;
    mode: ColourFieldMode;
    allowAdditionalColours: boolean;
    allowGradientChangesInPost: boolean;
    allowColourAdjustmentsInPost?: boolean;
    availableColours: Array<ColourFieldType>;
    additionalColours: Array<ColourFieldType>;
    gradient?: ColourFieldGradient;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'colour';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type MasterFieldFieldDataFeed = {
    value: string;
    feedValues: Record<string, any>;
    feedId?: string;
    feedItemId?: string;
    feedName?: string;
    showValues: Record<string, any>;
    defaultValues: Record<string, any>;
    order: Array<string>;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'feed';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataFont.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { FontFieldValue } from './FontFieldValue';
export type MasterFieldFieldDataFont = {
    value: FontFieldValue;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'font';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataGpt.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GptFielAdditionalInputs } from './GptFielAdditionalInputs';
export type MasterFieldFieldDataGpt = {
    value: string;
    input: string;
    inputHeight?: number;
    additionalInputs: Array<GptFielAdditionalInputs>;
    automatic: boolean;
    buttonText?: string;
    viewInputField: boolean;
    viewOutputField: boolean;
    viewButton: boolean;
    customizeButtonText: boolean;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'gpt';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataImage.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageFieldFitMode } from './ImageFieldFitMode';
import type { ImageFieldRemoveBackgroundInactiveOptions } from './ImageFieldRemoveBackgroundInactiveOptions';
import type { ImageFieldSizeType } from './ImageFieldSizeType';
import type { ImageFieldvalue } from './ImageFieldvalue';
export type MasterFieldFieldDataImage = {
    value: string;
    imageValue: ImageFieldvalue;
    sameSettingsForAllVariations: boolean;
    imageSizeType: ImageFieldSizeType;
    imageFitMode: ImageFieldFitMode;
    removeBackgroundOptional?: boolean;
    removeBackgroundAutomatic?: boolean;
    upScalingOptional?: boolean;
    upScalingWhenRequired?: boolean;
    showRemoveBackGroundToggle?: boolean;
    defaultTab?: string;
    unsplashDefaultSearchTerm?: string;
    useUnsplashDefaultSearchTerm?: boolean;
    removeBackgrounInactiveOptions?: ImageFieldRemoveBackgroundInactiveOptions;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'image';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataImageCollection.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ImageCollectionFieldOptions } from './ImageCollectionFieldOptions';
import type { ImageFieldFitMode } from './ImageFieldFitMode';
import type { ImageFieldSettings } from './ImageFieldSettings';
import type { ImageFieldSizeType } from './ImageFieldSizeType';
export type MasterFieldFieldDataImageCollection = {
    imageCollectionOptions: Array<ImageCollectionFieldOptions>;
    imageCollectionSettings: ImageFieldSettings;
    imageCollectionVariations: Record<string, ImageFieldSettings>;
    value: number;
    sameSettingsForAllVariations: boolean;
    imageSizeType: ImageFieldSizeType;
    imageFitMode: ImageFieldFitMode;
    viewThumbnailsInPost: boolean;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'imageCollection';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataJSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type MasterFieldFieldDataJSON = {
    value: string;
    inputHeight?: number;
    fromShared: boolean;
    sharedJsonId?: string;
    sharedJsonName?: string;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'json';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataJustifiedScalingText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { JustifiedScalingClassOptions } from './JustifiedScalingClassOptions';
import type { JustifiedScalingTextInput } from './JustifiedScalingTextInput';
import type { JustifiedScalingTextSettings } from './JustifiedScalingTextSettings';
export type MasterFieldFieldDataJustifiedScalingText = {
    value: string;
    justifiedScalingVariations: Record<string, JustifiedScalingTextSettings>;
    justifiedScalingSettings: JustifiedScalingTextSettings;
    sameSettingsForAllVariations: boolean;
    canUpdateClassNamesInPost: boolean;
    canAddAndDeleteRowsInPost: boolean;
    justifiedScalingInputs: Array<JustifiedScalingTextInput>;
    classOptions?: Array<JustifiedScalingClassOptions>;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'justifiedScalingText';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataNone.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type MasterFieldFieldDataNone = {
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'none';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataNumber.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type MasterFieldFieldDataNumber = {
    value?: number;
    slider?: boolean;
    min?: number;
    max?: number;
    step?: number;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'number';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataOption.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OptionFieldOptions } from './OptionFieldOptions';
export type MasterFieldFieldDataOption = {
    value?: string;
    options?: OptionFieldOptions;
    fromJson?: boolean;
    jsonSelectArrayIndex?: number;
    jsonFieldIdentifier?: string;
    jsonFieldDropDownLabel?: string;
    fromJsonAsset?: boolean;
    sharedJsonId?: string;
    sharedJsonName?: string;
    sharedJsonValue?: string;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'option';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataOptionFromData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OptionFromDataFieldDataSelectionFilters } from './OptionFromDataFieldDataSelectionFilters';
export type MasterFieldFieldDataOptionFromData = {
    value?: string;
    dataFieldSelection: string;
    optionsLabelFieldName?: string;
    selectedOptionsIndex?: number;
    dataSelectionFilters?: OptionFromDataFieldDataSelectionFilters;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'optionFromData';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataRichText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { RichTextFieldControls } from './RichTextFieldControls';
import type { RichTextFieldSettings } from './RichTextFieldSettings';
export type MasterFieldFieldDataRichText = {
    value: string;
    dynamicResizing: boolean;
    richTextState: string;
    inputHeight?: number;
    sameSettingsForAllVariations: boolean;
    richTextVariations: Record<string, RichTextFieldSettings>;
    richTextSettings: RichTextFieldSettings;
    richTextControls: RichTextFieldControls;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'richText';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDataText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type MasterFieldFieldDataText = {
    value: string;
    maxCharacters?: number;
    multiLine?: boolean;
    inputHeight?: number;
    masterFieldName?: string;
    masterFieldId?: string;
    masterFieldControl: 'text';
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { MasterFieldFieldData } from './MasterFieldFieldData';
export type MasterFieldFieldDetails = {
    control: ControlType.MASTER_FIELD;
    data: MasterFieldFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/MasterFieldsControlType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum MasterFieldsControlType {
    CONTROL_TEXT_ENUM_VAL1 = 'controlTextEnumVal1',
    CONTROL_TEXT_ENUM_VAL2 = 'controlTextEnumVal2',
    CONTROL_TEXT_ENUM_VAL3 = 'controlTextEnumVal3',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/NumberField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { NumberFieldData } from './NumberFieldData';
export type NumberField = {
    control: 'number';
    data: NumberFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/NumberFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type NumberFieldData = {
    value?: number;
    slider?: boolean;
    min?: number;
    max?: number;
    step?: number;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/NumberFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type NumberFieldDataDetails = {
    value?: number;
    slider?: boolean;
    min?: number;
    max?: number;
    step?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/NumberFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { NumberFieldData } from './NumberFieldData';
export type NumberFieldDetails = {
    control: ControlType.NUMBER;
    data: NumberFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { OptionFieldData } from './OptionFieldData';
export type OptionField = {
    control: 'option';
    data: OptionFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OptionFieldOptions } from './OptionFieldOptions';
export type OptionFieldData = {
    value?: string;
    options?: OptionFieldOptions;
    fromJson?: boolean;
    jsonSelectArrayIndex?: number;
    jsonFieldIdentifier?: string;
    jsonFieldDropDownLabel?: string;
    fromJsonAsset?: boolean;
    sharedJsonId?: string;
    sharedJsonName?: string;
    sharedJsonValue?: string;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OptionFieldOptions } from './OptionFieldOptions';
export type OptionFieldDataDetails = {
    value?: string;
    options?: OptionFieldOptions;
    fromJson?: boolean;
    jsonSelectArrayIndex?: number;
    jsonFieldIdentifier?: string;
    jsonFieldDropDownLabel?: string;
    fromJsonAsset?: boolean;
    sharedJsonId?: string;
    sharedJsonName?: string;
    sharedJsonValue?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { OptionFieldData } from './OptionFieldData';
export type OptionFieldDetails = {
    control: ControlType.OPTION;
    data: OptionFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFieldOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type OptionFieldOptions = Array<{
    value: string;
    label: string;
}>;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFromDataField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { OptionFromDataFieldData } from './OptionFromDataFieldData';
export type OptionFromDataField = {
    control: 'optionFromData';
    data: OptionFromDataFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFromDataFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OptionFromDataFieldDataSelectionFilters } from './OptionFromDataFieldDataSelectionFilters';
export type OptionFromDataFieldData = {
    value?: string;
    dataFieldSelection: string;
    optionsLabelFieldName?: string;
    selectedOptionsIndex?: number;
    dataSelectionFilters?: OptionFromDataFieldDataSelectionFilters;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFromDataFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OptionFromDataFieldDataSelectionFilters } from './OptionFromDataFieldDataSelectionFilters';
export type OptionFromDataFieldDataDetails = {
    value?: string;
    dataFieldSelection: string;
    optionsLabelFieldName?: string;
    selectedOptionsIndex?: number;
    dataSelectionFilters?: OptionFromDataFieldDataSelectionFilters;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFromDataFieldDataSelectionFilters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type OptionFromDataFieldDataSelectionFilters = Array<{
    name: string;
}>;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OptionFromDataFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { OptionFromDataFieldData } from './OptionFromDataFieldData';
export type OptionFromDataFieldDetails = {
    control: ControlType.OPTION_FROM_DATA;
    data: OptionFromDataFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrderByOrderQueryParamSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum OrderByOrderQueryParamSchema {
    ASC = 'asc',
    DESC = 'desc',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrderByQueryParamSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum OrderByQueryParamSchema {
    NAME = 'name',
    CREATED_AT = 'createdAt',
    UPDATED_AT = 'updatedAt',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Organisation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrganisationAdmin } from './OrganisationAdmin';
export type Organisation = {
    /**
     * Unique id of the organisation
     */
    id: string;
    /**
     * Name of the organisation
     */
    name: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    archive?: boolean;
    organisationAdmin: OrganisationAdmin;
    /**
     * if the user had a avatar set or not
     */
    avatar: boolean;
    slack: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationAdmin.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type OrganisationAdmin = {
    /**
     * Unique id of the organisation
     */
    id: string;
    templateLevels: Array<string>;
    includeTeams: boolean;
    includeSpaces: boolean;
    maxNoOfTeams: number;
    maxNoOfSpaces: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationAuth.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
import type { OrganisationManagement } from './OrganisationManagement';
import type { TeamAuth } from './TeamAuth';
export type OrganisationAuth = {
    organisationManagement: OrganisationManagement;
    teams: Record<string, TeamAuth>;
    organisationGroups: Record<string, GroupUserPermissions>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUser } from './GroupUser';
import type { OrganisationManagement } from './OrganisationManagement';
export type OrganisationGroup = {
    /**
     * Unique id of the organisation group
     */
    id: string;
    /**
     * If the group is the default admin group or not.
     */
    defaultAdminGroup: boolean;
    /**
     * Name of the organisation group
     */
    name: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    permissions: OrganisationManagement;
    /**
     * archived or not
     */
    archive?: boolean;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    users: Array<GroupUser>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationGroupAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrganisationManagement } from './OrganisationManagement';
export type OrganisationGroupAll = {
    /**
     * Unique id of the organisation group
     */
    id: string;
    /**
     * If the group is the default admin group or not.
     */
    defaultAdminGroup: boolean;
    /**
     * Name of the organisation group
     */
    name: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    permissions: OrganisationManagement;
    /**
     * archived or not
     */
    archive?: boolean;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationGroupPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrganisationManagement } from './OrganisationManagement';
export type OrganisationGroupPermissions = OrganisationManagement;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationGroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type OrganisationGroupUserPermissions = {
    /**
     * Unique id of the organisation group
     */
    id: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    permission: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationGroupUsers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUser } from './GroupUser';
export type OrganisationGroupUsers = {
    users: Array<GroupUser>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OrganisationManagement.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * permission set of the organisation group
 */
export type OrganisationManagement = {
    /**
     * Admin of the organisation
     */
    admin: boolean;
    /**
     * Can a user createTeam
     */
    createTeam: boolean;
    /**
     * Can a user removeTeam
     */
    removeTeam: boolean;
    /**
     * Can a user viewAllTeams
     */
    viewAllTeams: boolean;
    /**
     * Can a user userManagement
     */
    userManagement: boolean;
    /**
     * Can a user viewBilling
     */
    viewBilling: boolean;
    /**
     * Can a user settingsManagement
     */
    settingsManagement: boolean;
    /**
     * Can a user groupManagement
     */
    groupManagement: boolean;
    /**
     * Can a user createTemplates
     */
    createTemplates: boolean;
    /**
     * Can a user deleteTemplates
     */
    deleteTemplates: boolean;
    /**
     * Can a user createFeed
     */
    createFeed: boolean;
    /**
     * Can a user deleteFeed
     */
    deleteFeed: boolean;
    /**
     * Can a user createAsset
     */
    createAsset: boolean;
    /**
     * Can a user deleteAsset
     */
    deleteAsset: boolean;
    /**
     * Can a user createMasterField
     */
    createMasterField: boolean;
    /**
     * Can a user deleteMasterField
     */
    deleteMasterField: boolean;
    /**
     * Can a user createJSON
     */
    createJSON: boolean;
    /**
     * Can a user deleteJSON
     */
    deleteJSON: boolean;
    /**
     * Can a user deleteAsset
     */
    viewMetrics: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OwnerType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerTypeType } from './OwnerTypeType';
export type OwnerType = {
    ownerType: OwnerTypeType;
    /**
     * org ID of the template.
     */
    organisationId?: string;
    /**
     * teamId ID of the template.
     */
    teamId?: string;
    /**
     * space ID of the template.
     */
    spaceId?: string;
    /**
     * user ID of the template.
     */
    userId?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/OwnerTypeType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum OwnerTypeType {
    ORGANISATION = 'organisation',
    TEAM = 'team',
    SPACE = 'space',
    USER = 'user',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Permission.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrganisationAuth } from './OrganisationAuth';
export type Permission = Record<string, OrganisationAuth>;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Post.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { PostDataType } from './PostDataType';
export type Post = {
    /**
     * Unique id of the Post
     */
    id: string;
    /**
     * Name of the Post
     */
    title: string;
    /**
     * Id of the space the post is associated with
     */
    spaceId: string;
    /**
     * Id of the team the post is associated with
     */
    teamId: string;
    /**
     * Id of the organisation the post is associated with
     */
    organisationId: string;
    /**
     * Id of the template
     */
    templateId: string;
    /**
     * The version of the template
     */
    templateVersion: string;
    /**
     * The owner of the template
     */
    templateOwner: string;
    /**
     * boolean to say if the post is published or not.
     */
    published: boolean;
    /**
     * User ID of who published the post
     */
    publishedBy?: string;
    /**
     * The iso string the time the post was published
     */
    publishedAt?: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    /**
     * boolean if the post is archived or not
     */
    archive?: boolean;
    /**
     * The version of the template
     */
    version: number;
    /**
     * last image time in iso format.
     */
    lastImageTime: string;
    data: PostDataType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/PostDataType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Fields } from './Fields';
/**
 * schema of the template
 */
export type PostDataType = {
    fields: Fields;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/PostFull.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { PostDataType } from './PostDataType';
export type PostFull = {
    data: PostDataType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/RichTextField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { RichTextFieldData } from './RichTextFieldData';
export type RichTextField = {
    control: 'richText';
    data: RichTextFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/RichTextFieldControls.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type RichTextFieldControls = {
    paragraph: boolean;
    h1: boolean;
    h2: boolean;
    h3: boolean;
    ul: boolean;
    ol: boolean;
    bold: boolean;
    italic: boolean;
    underline: boolean;
    strikethrough: boolean;
    left: boolean;
    center: boolean;
    right: boolean;
    justify: boolean;
    undo: boolean;
    redo: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/RichTextFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { RichTextFieldControls } from './RichTextFieldControls';
import type { RichTextFieldSettings } from './RichTextFieldSettings';
export type RichTextFieldData = {
    value: string;
    dynamicResizing: boolean;
    richTextState: string;
    inputHeight?: number;
    sameSettingsForAllVariations: boolean;
    richTextVariations: Record<string, RichTextFieldSettings>;
    richTextSettings: RichTextFieldSettings;
    richTextControls: RichTextFieldControls;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/RichTextFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { RichTextFieldControls } from './RichTextFieldControls';
import type { RichTextFieldSettings } from './RichTextFieldSettings';
export type RichTextFieldDataDetails = {
    value: string;
    dynamicResizing: boolean;
    richTextState: string;
    inputHeight?: number;
    sameSettingsForAllVariations: boolean;
    richTextVariations: Record<string, RichTextFieldSettings>;
    richTextSettings: RichTextFieldSettings;
    richTextControls: RichTextFieldControls;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/RichTextFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { RichTextFieldData } from './RichTextFieldData';
export type RichTextFieldDetails = {
    control: ControlType.RICH_TEXT;
    data: RichTextFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/RichTextFieldSettings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type RichTextFieldSettings = {
    maxFontSize?: number;
    maxHeight?: number;
    maxRows?: number;
    minFontSize?: number;
    maxCharacters?: number;
    lineHeight: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Space.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type Space = {
    /**
     * Unique id of the Space
     */
    id: string;
    /**
     * Name of the Space
     */
    name: string;
    /**
     * Id of the team the space is associated with
     */
    teamId: string;
    /**
     * Id of the template
     */
    organisationId: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    /**
     * Archive status of the space
     */
    archive?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/SpaceAuth.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { SpaceManagement } from './SpaceManagement';
export type SpaceAuth = {
    spaceManagement: SpaceManagement;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/SpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUser } from './GroupUser';
import type { Space } from './Space';
import type { SpaceManagement } from './SpaceManagement';
export type SpaceGroup = {
    /**
     * Unique id of the team group
     */
    id: string;
    /**
     * Name of the team group
     */
    name: string;
    /**
     * Unique id of the team
     */
    teamId: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    /**
     * boolean if the post is archived or not
     */
    archive?: boolean;
    permissions: SpaceManagement;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    users: Array<GroupUser>;
    spaces: Array<Space>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/SpaceGroupAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { SpaceManagement } from './SpaceManagement';
export type SpaceGroupAll = {
    /**
     * Unique id of the team group
     */
    id: string;
    /**
     * Name of the team group
     */
    name: string;
    /**
     * Unique id of the team
     */
    teamId: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    /**
     * boolean if the post is archived or not
     */
    archive?: boolean;
    permissions: SpaceManagement;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/SpaceGroupPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { SpaceManagement } from './SpaceManagement';
export type SpaceGroupPermissions = SpaceManagement;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/SpaceGroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type SpaceGroupUserPermissions = {
    /**
     * Unique id of the team group
     */
    id: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    /**
     * Unique id of the team
     */
    teamId: string;
    permission: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/SpaceGroupUsers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUser } from './GroupUser';
import type { Space } from './Space';
export type SpaceGroupUsers = {
    users: Array<GroupUser>;
    spaces: Array<Space>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/SpaceManagement.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * permission set of the team group
 */
export type SpaceManagement = {
    /**
     * createPosts of the team
     */
    createPosts: boolean;
    /**
     * deletePosts of the team
     */
    deletePosts: boolean;
    /**
     * Can a user settingsManagement
     */
    settingsManagement: boolean;
    /**
     * Can a user approvePosts
     */
    approvePosts: boolean;
    /**
     * Can a user createTemplates
     */
    createTemplates: boolean;
    /**
     * Can a user deleteTemplates
     */
    deleteTemplates: boolean;
    /**
     * Can a user createFeed
     */
    createFeed: boolean;
    /**
     * Can a user deleteFeed
     */
    deleteFeed: boolean;
    /**
     * Can a user createAsset
     */
    createAsset: boolean;
    /**
     * Can a user deleteAsset
     */
    deleteAsset: boolean;
    /**
     * Can a user createJSON
     */
    createJSON: boolean;
    /**
     * Can a user deleteJSON
     */
    deleteJSON: boolean;
    /**
     * Can a user createMasterField
     */
    createMasterField: boolean;
    /**
     * Can a user deleteMasterField
     */
    deleteMasterField: boolean;
    /**
     * Can a user deleteAsset
     */
    viewMetrics: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Team.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type Team = {
    /**
     * Unique id of the Team
     */
    id: string;
    /**
     * Name of the Team
     */
    name: string;
    /**
     * organisation ID for the team.
     */
    organisationId: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    /**
     * archive status of the team
     */
    archive?: boolean;
    /**
     * if the user had a avatar set or not
     */
    avatar: boolean;
    /**
     * has slack been added
     */
    slack: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TeamAuth.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
import type { SpaceAuth } from './SpaceAuth';
import type { TeamManagement } from './TeamManagement';
export type TeamAuth = {
    teamManagement: TeamManagement;
    spaces: Record<string, SpaceAuth>;
    teamGroups: Record<string, GroupUserPermissions>;
    spaceGroups: Record<string, GroupUserPermissions>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUser } from './GroupUser';
import type { TeamManagement } from './TeamManagement';
export type TeamGroup = {
    /**
     * Unique id of the team group
     */
    id: string;
    /**
     * If the group is the default admin group or not.
     */
    defaultAdminGroup: boolean;
    /**
     * Name of the team group
     */
    name: string;
    /**
     * Unique id of the team
     */
    teamId: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    permissions: TeamManagement;
    /**
     * Archive status of the team group
     */
    archive?: boolean;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    users: Array<GroupUser>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TeamGroupAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { TeamManagement } from './TeamManagement';
export type TeamGroupAll = {
    /**
     * Unique id of the team group
     */
    id: string;
    /**
     * If the group is the default admin group or not.
     */
    defaultAdminGroup: boolean;
    /**
     * Name of the team group
     */
    name: string;
    /**
     * Unique id of the team
     */
    teamId: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    permissions: TeamManagement;
    /**
     * Archive status of the team group
     */
    archive?: boolean;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TeamGroupPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { TeamManagement } from './TeamManagement';
export type TeamGroupPermissions = TeamManagement;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TeamGroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type TeamGroupUserPermissions = {
    /**
     * Unique id of the team group
     */
    id: string;
    /**
     * Unique id of the organisation
     */
    organisationId: string;
    /**
     * Unique id of the team
     */
    teamId: string;
    permission: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TeamGroupUsers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUser } from './GroupUser';
export type TeamGroupUsers = {
    users: Array<GroupUser>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TeamManagement.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * permission set of the team group
 */
export type TeamManagement = {
    /**
     * Admin of the team
     */
    admin: boolean;
    /**
     * Can a user settingsManagement
     */
    settingsManagement: boolean;
    /**
     * Can a user approvePosts
     */
    approvePosts: boolean;
    /**
     * Can a user groupManagement
     */
    groupManagement: boolean;
    /**
     * Can a user createTemplates
     */
    createTemplates: boolean;
    /**
     * Can a user deleteTemplates
     */
    deleteTemplates: boolean;
    /**
     * Can a user spaceManagement
     */
    spaceManagement: boolean;
    userManagement: boolean;
    /**
     * Can a user createFeed
     */
    createFeed: boolean;
    /**
     * Can a user deleteFeed
     */
    deleteFeed: boolean;
    /**
     * createPosts of the team
     */
    createPosts: boolean;
    /**
     * deletePosts of the team
     */
    deletePosts: boolean;
    /**
     * Can a user createAsset
     */
    createAsset: boolean;
    /**
     * Can a user deleteAsset
     */
    deleteAsset: boolean;
    /**
     * Can a user createMasterField
     */
    createMasterField: boolean;
    /**
     * Can a user deleteMasterField
     */
    deleteMasterField: boolean;
    /**
     * Can a user createJSON
     */
    createJSON: boolean;
    /**
     * Can a user deleteJSON
     */
    deleteJSON: boolean;
    /**
     * Can a user deleteAsset
     */
    viewMetrics: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/Template.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
import type { TemplateDefinition } from './TemplateDefinition';
import type { TemplateSchemaType } from './TemplateSchemaType';
import type { TemplateVariation } from './TemplateVariation';
export type Template = {
    /**
     * Unique id of the Template
     */
    id: string;
    /**
     * The version of the template
     */
    version: number;
    /**
     * Name of the Template
     */
    title: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    ownerType: OwnerType;
    /**
     * boolean if the post is archived or not
     */
    archive?: boolean;
    draftVersion: boolean;
    /**
     * last image time in iso format.
     */
    lastImageTime: string;
    /**
     * Name of the Template
     */
    postTitle: string;
    schema: TemplateSchemaType;
    variations: Record<string, TemplateVariation>;
    definitions: Record<string, TemplateDefinition>;
    variationsOrder: Array<string>;
    definitionsOrder: Array<string>;
    transparentBackground: boolean;
    /**
     * scale Factor of the template
     */
    scaleFactor: number;
    /**
     * language settings to add to the template.
     */
    langSettings?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TemplateDefinition.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * definition of the template
 */
export type TemplateDefinition = {
    /**
     * Unique id of the templateVariation
     */
    id: string;
    /**
     * Name of the template Variation
     */
    name: string;
    /**
     * Markup of the template
     */
    markUp: string;
    /**
     * css of the template
     */
    css: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TemplateGetAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OwnerType } from './OwnerType';
export type TemplateGetAll = {
    /**
     * Unique id of the Template
     */
    id: string;
    /**
     * The version of the template
     */
    version: number;
    /**
     * Name of the Template
     */
    title: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * Created by user string.
     */
    createdBy: string;
    /**
     * last updated by user string.
     */
    updatedBy?: string;
    ownerType: OwnerType;
    /**
     * boolean if the post is archived or not
     */
    archive?: boolean;
    draftVersion: boolean;
    /**
     * last image time in iso format.
     */
    lastImageTime: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TemplateRemaining.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { TemplateDefinition } from './TemplateDefinition';
import type { TemplateSchemaType } from './TemplateSchemaType';
import type { TemplateVariation } from './TemplateVariation';
export type TemplateRemaining = {
    /**
     * Name of the Template
     */
    postTitle: string;
    schema: TemplateSchemaType;
    variations: Record<string, TemplateVariation>;
    definitions: Record<string, TemplateDefinition>;
    variationsOrder: Array<string>;
    definitionsOrder: Array<string>;
    transparentBackground: boolean;
    /**
     * scale Factor of the template
     */
    scaleFactor: number;
    /**
     * language settings to add to the template.
     */
    langSettings?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TemplateSchemaType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Fields } from './Fields';
/**
 * schema of the template
 */
export type TemplateSchemaType = {
    fields: Fields;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TemplateVariation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Variations of the template
 */
export type TemplateVariation = {
    /**
     * Unique id of the templateVariation
     */
    id: string;
    /**
     * Name of the template Variation
     */
    name: string;
    /**
     * height of the template
     */
    height: number;
    /**
     * width of the template
     */
    width: number;
    /**
     * definitionId of the template
     */
    definitionId: string;
    default: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TextField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { BaseSchemaStatus } from './BaseSchemaStatus';
import type { TextFieldData } from './TextFieldData';
export type TextField = {
    control: 'text';
    data: TextFieldData;
    _id: string;
    id?: string;
    index?: number;
    collapseField?: boolean;
    status?: BaseSchemaStatus;
    showInPosts?: boolean;
    showInPostsConditionalStatement?: string;
    dependsOn: Array<string>;
    resetOnDependencyChange?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TextFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type TextFieldData = {
    value: string;
    maxCharacters?: number;
    multiLine?: boolean;
    inputHeight?: number;
    name: string;
    label: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TextFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type TextFieldDataDetails = {
    value: string;
    maxCharacters?: number;
    multiLine?: boolean;
    inputHeight?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/TextFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
import type { TextFieldData } from './TextFieldData';
export type TextFieldDetails = {
    control: ControlType.TEXT;
    data: TextFieldData;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/URLsType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type URLsType = {
    /**
     * Presigned URL for the thumbnail.
     */
    thumbnailURL: string;
    /**
     * Presigned URL for the full size image.
     */
    fullSizeURL: string;
    /**
     * Presigned URL for the working size image.
     */
    workingSizeURL: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UnsplashSearchResults.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { UnsplashSearchResultsResult } from './UnsplashSearchResultsResult';
export type UnsplashSearchResults = {
    total: number;
    total_pages: number;
    results: Array<UnsplashSearchResultsResult>;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UnsplashSearchResultsResult.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { UnsplashSearchResultsResultLinks } from './UnsplashSearchResultsResultLinks';
import type { UnsplashSearchResultsResultUrls } from './UnsplashSearchResultsResultUrls';
export type UnsplashSearchResultsResult = {
    id: string;
    width: number;
    height: number;
    color: string;
    description: string;
    blur_hash: string;
    urls: UnsplashSearchResultsResultUrls;
    links: UnsplashSearchResultsResultLinks;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UnsplashSearchResultsResultLinks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UnsplashSearchResultsResultLinks = {
    self: string;
    html: string;
    download: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UnsplashSearchResultsResultUrls.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UnsplashSearchResultsResultUrls = {
    raw: string;
    full: string;
    regular: string;
    small: string;
    thumb: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateAsset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AssetType } from './AssetType';
export type UpdateAsset = {
    contentType?: AssetType;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UpdateFeed = {
    /**
     * Name of the feed
     */
    name?: string;
    /**
     * The URL of the feed to capture
     */
    url?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateJSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UpdateJSON = {
    /**
     * Name of the json
     */
    name?: string;
    /**
     * The json object
     */
    json?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateMasterField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { FieldType } from './FieldType';
export type UpdateMasterField = {
    /**
     * Name of the json
     */
    name?: string;
    field?: FieldType;
    /**
     * if this is true, a new version will be created
     */
    publishVersion?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateOrganisation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UpdateOrganisation = {
    /**
     * Name of the organisation
     */
    name?: string;
    /**
     * if the user had a avatar set or not
     */
    avatar?: boolean;
    /**
     * auth token for slack
     */
    slackAuthToken?: string;
    /**
     * redirectURL for slack
     */
    redirectURL?: string;
    /**
     * revoke slack auth token
     */
    revokeSlack?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateOrganisationAdmin.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UpdateOrganisationAdmin = {
    templateLevels?: Array<string>;
    includeTeams?: boolean;
    includeSpaces?: boolean;
    maxNoOfTeams?: number;
    maxNoOfSpaces?: number;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateOrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrganisationManagement } from './OrganisationManagement';
export type UpdateOrganisationGroup = {
    /**
     * Name of the organisation group
     */
    name?: string;
    permissions?: OrganisationManagement;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateOrganisationGroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type UpdateOrganisationGroupUser = {
    userPermissions?: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdatePost.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { PostDataType } from './PostDataType';
export type UpdatePost = {
    /**
     * Name of the Post
     */
    title?: string;
    data?: PostDataType;
    /**
     * boolean to say if the post is published or not.
     */
    published?: boolean;
    /**
     * Id of the template
     */
    templateId?: string;
    /**
     * The version of the template
     */
    templateVersion?: string;
    /**
     * The owner of the template
     */
    templateOwner?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UpdateSpace = {
    /**
     * Name of the Space
     */
    name?: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { SpaceManagement } from './SpaceManagement';
export type UpdateSpaceGroup = {
    /**
     * Name of the team group
     */
    name?: string;
    permissions?: SpaceManagement;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateSpaceGroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type UpdateSpaceGroupUser = {
    userPermissions?: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateTeam.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UpdateTeam = {
    /**
     * Name of the Team
     */
    name?: string;
    /**
     * if the user had a avatar set or not
     */
    avatar?: boolean;
    /**
     * auth token for slack
     */
    slackAuthToken?: string;
    /**
     * redirectURL for slack
     */
    redirectURL?: string;
    /**
     * revoke slack auth token
     */
    revokeSlack?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateTeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { TeamManagement } from './TeamManagement';
export type UpdateTeamGroup = {
    /**
     * Name of the team group
     */
    name?: string;
    permissions?: TeamManagement;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateTeamGroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { GroupUserPermissions } from './GroupUserPermissions';
export type UpdateTeamGroupUser = {
    userPermissions?: GroupUserPermissions;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateTemplate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { TemplateDefinition } from './TemplateDefinition';
import type { TemplateSchemaType } from './TemplateSchemaType';
import type { TemplateVariation } from './TemplateVariation';
export type UpdateTemplate = {
    /**
     * Name of the Template
     */
    title?: string;
    /**
     * Name of the Template
     */
    postTitle?: string;
    schema?: TemplateSchemaType;
    variations?: Record<string, TemplateVariation>;
    definitions?: Record<string, TemplateDefinition>;
    variationsOrder?: Array<string>;
    definitionsOrder?: Array<string>;
    transparentBackground?: boolean;
    /**
     * scale Factor of the template
     */
    scaleFactor?: number;
    /**
     * language settings to add to the template.
     */
    langSettings?: string;
    /**
     * if this is true, a new version will be created
     */
    publishVersion?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/UpdateUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type UpdateUser = {
    /**
     * Name of the User
     */
    name?: string;
    /**
     * if the user had a avatar set or not
     */
    avatar?: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/User.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type User = {
    /**
     * Unique id of the User
     */
    id: string;
    /**
     * Name of the User
     */
    name: string;
    /**
     * Email of the User
     */
    email: string;
    /**
     * Created at time in iso format.
     */
    createdAt: string;
    /**
     * Created at time in iso format.
     */
    updatedAt?: string;
    /**
     * roles for the user.
     */
    roles: Array<string>;
    /**
     * if the user had a avatar set or not
     */
    avatar: boolean;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/archive.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Is the get function getting archive or normal
 */
export type archive = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/assetFilterQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type assetFilterQuery = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/assetFilterQueryValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type assetFilterQueryValue = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/assetIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of asset to fetch
 */
export type assetIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/assetTransformationCheckerQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type assetTransformationCheckerQuery = Array<string>;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/assetTransformationQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AssetTransformationQueryParamSchema } from './AssetTransformationQueryParamSchema';
export type assetTransformationQuery = AssetTransformationQueryParamSchema;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/assetTypeParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of asset to fetch
 */
export type assetTypeParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/assetTypeQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AssetType } from './AssetType';
export type assetTypeQuery = AssetType;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/avatarQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type avatarQuery = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/details.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Get the details for an entity's metrics
 */
export enum details {
    POST_DOWNLOADS = 'postDownloads',
    POST_CREATIONS = 'postCreations',
    TEMPLATE_CREATIONS = 'templateCreations',
    TEMPLATE_PUBLICATIONS = 'templatePublications',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/downloadPostParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * if the post is being updated to then be downloaded
 */
export type downloadPostParameter = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/endTime.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * end time of the metrics, in ISO 8601 format
 */
export type endTime = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/feedIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of feed to fetch
 */
export type feedIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/forceUpdate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Force update of the metrics
 */
export type forceUpdate = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/jsonIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of json to fetch
 */
export type jsonIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/latestPublishedVersion.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type latestPublishedVersion = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/masterFieldIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of master field to fetch
 */
export type masterFieldIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/masterFieldTypeQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from './ControlType';
export type masterFieldTypeQuery = ControlType;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/orderByOrderQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrderByOrderQueryParamSchema } from './OrderByOrderQueryParamSchema';
export type orderByOrderQuery = OrderByOrderQueryParamSchema;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/orderByQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrderByQueryParamSchema } from './OrderByQueryParamSchema';
export type orderByQuery = OrderByQueryParamSchema;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/organisationGroupIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of Organisation to fetch
 */
export type organisationGroupIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/organisationIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of Organisation to fetch
 */
export type organisationIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/organisationQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type organisationQuery = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/originalAssetQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type originalAssetQuery = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/pageSize.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of version to get
 */
export type pageSize = number;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/paramTypeEnum1.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum paramTypeEnum1 {
    TYPE1 = 'type1',
    TYPE2 = 'type2',
    TYPE3 = 'type3',
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/postIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of template to fetch
 */
export type postIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/postQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type postQuery = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/publishedParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * if the post is published or not
 */
export type publishedParameter = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/responseObj.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { responseObj3 } from './responseObj3';
export type responseObj = {
    property1: string;
    property2: string;
    property3?: responseObj3;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/responseObj3.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type responseObj3 = {
    subProperty1: string;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/rssNumberParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * The number of records to return, if not set default to 10.
 */
export type rssNumberParameter = number;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/searchTermQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type searchTermQuery = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/spaceGroupIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of space group to fetch
 */
export type spaceGroupIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/spaceIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of Space to fetch
 */
export type spaceIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/spaceQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type spaceQuery = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/startPage.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of version to get
 */
export type startPage = number;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/startTime.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Start time of the metrics, in ISO 8601 format
 */
export type startTime = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/teamGroupIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of Team to fetch
 */
export type teamGroupIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/teamIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of Team to fetch
 */
export type teamIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/teamQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type teamQuery = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/templateIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type templateIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/templateQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type templateQuery = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/thumbnailQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type thumbnailQuery = boolean;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/userIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of User to fetch
 */
export type userIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/userQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * ID of User to fetch
 */
export type userQuery = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/userWithPermission.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Permission } from './Permission';
import type { User } from './User';
export type userWithPermission = {
    user: User;
    permissions: Permission;
};

"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/variationIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Name of the variation
 */
export type variationIDParameter = string;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/models/versionParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type versionParameter = number;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$AddSpaceToSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $AddSpaceToSpaceGroup = {
    properties: {
        spaceId: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$AddUserToOrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $AddUserToOrganisationGroup = {
    properties: {
        userId: {
            type: 'string',
            isRequired: true,
        },
        userPermissions: {
            type: 'GroupUserPermissions',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$AddUserToSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $AddUserToSpaceGroup = {
    properties: {
        userId: {
            type: 'string',
            isRequired: true,
        },
        userPermissions: {
            type: 'GroupUserPermissions',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$AddUserToTeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $AddUserToTeamGroup = {
    properties: {
        userId: {
            type: 'string',
            isRequired: true,
        },
        userPermissions: {
            type: 'GroupUserPermissions',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ApplicationError.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ApplicationError = {
    properties: {
        code: {
            type: 'number',
            description: \`Error code\`,
            isRequired: true,
            format: 'int32',
        },
        message: {
            type: 'string',
            description: \`Error message\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Asset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Asset = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the organisation\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        contentType: {
            type: 'AssetType',
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        backgroundRemoved: {
            type: 'boolean',
            description: \`boolean to see if the background has been removed or not.\`,
            isRequired: true,
        },
        upscaled: {
            type: 'boolean',
            description: \`boolean to see if the upscaled.\`,
            isRequired: true,
        },
        processed: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        processedRemoveBackground: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        processedFailed: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        processedRemoveBackgroundFailed: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        unsplash: {
            type: 'boolean',
            description: \`boolean to see if the images has come from unsplash or not.\`,
            isRequired: true,
        },
        unsplashId: {
            type: 'string',
            description: \`unsplash Id\`,
        },
        unsplashRawURL: {
            type: 'string',
            description: \`unsplash Raw URL\`,
        },
        unsplashFullURL: {
            type: 'string',
            description: \`unsplash Full Size URL\`,
        },
        unsplashRegularURL: {
            type: 'string',
            description: \`unsplash Regular URL\`,
        },
        unsplashSmallURL: {
            type: 'string',
            description: \`unsplash Small URL\`,
        },
        unsplashThumbURL: {
            type: 'string',
            description: \`unsplash Thumb URL\`,
        },
        unsplashDownloadURL: {
            type: 'string',
            description: \`unsplash Download URL\`,
        },
        unsplashDescription: {
            type: 'string',
            description: \`unsplash description\`,
        },
        width: {
            type: 'number',
            description: \`width of the image\`,
        },
        height: {
            type: 'number',
            description: \`height of the image\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$AssetTransformationQueryParamSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $AssetTransformationQueryParamSchema = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$AssetType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $AssetType = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$AvatarUrl.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $AvatarUrl = {
    properties: {
        avatarUrl: {
            type: 'string',
            description: \`url of the avatar\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BaseDataSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BaseDataSchema = {
    properties: {
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BaseSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BaseSchema = {
    properties: {
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BaseSchemaStatus.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BaseSchemaStatus = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanBooleanValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanBooleanValue = {
    type: 'boolean',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'BooleanFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanFieldData = {
    properties: {
        value: {
            type: 'boolean',
            isRequired: true,
        },
        checkedValue: {
            type: 'all-of',
            contains: [{
                type: 'BooleanFieldValue',
            }],
            isRequired: true,
        },
        uncheckedValue: {
            type: 'all-of',
            contains: [{
                type: 'BooleanFieldValue',
            }],
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanFieldDataDetails = {
    properties: {
        value: {
            type: 'boolean',
            isRequired: true,
        },
        checkedValue: {
            type: 'all-of',
            contains: [{
                type: 'BooleanFieldValue',
            }],
            isRequired: true,
        },
        uncheckedValue: {
            type: 'all-of',
            contains: [{
                type: 'BooleanFieldValue',
            }],
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.BOOLEAN',
            isRequired: true,
        },
        data: {
            type: 'BooleanFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanFieldValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanFieldValue = {
    type: 'one-of',
    contains: [{
        type: 'BooleanStringValue',
    }, {
        type: 'BooleanNumberValue',
    }, {
        type: 'BooleanBooleanValue',
    }],
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanNumberValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanNumberValue = {
    type: 'number',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$BooleanStringValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $BooleanStringValue = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'ColourFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldConicalGradientColourInterpolationMethod.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldConicalGradientColourInterpolationMethod = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldConicalGradientPolarColourSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldConicalGradientPolarColourSpace = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldConicalGradientPolarHue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldConicalGradientPolarHue = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldConicalGradientRectangularColourSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldConicalGradientRectangularColourSpace = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        mode: {
            type: 'ColourFieldMode',
            isRequired: true,
        },
        allowAdditionalColours: {
            type: 'boolean',
            isRequired: true,
        },
        allowGradientChangesInPost: {
            type: 'boolean',
            isRequired: true,
        },
        allowColourAdjustmentsInPost: {
            type: 'boolean',
        },
        availableColours: {
            type: 'array',
            contains: {
                type: 'ColourFieldType',
            },
            isRequired: true,
        },
        additionalColours: {
            type: 'array',
            contains: {
                type: 'ColourFieldType',
            },
            isRequired: true,
        },
        gradient: {
            type: 'ColourFieldGradient',
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        mode: {
            type: 'ColourFieldMode',
            isRequired: true,
        },
        allowAdditionalColours: {
            type: 'boolean',
            isRequired: true,
        },
        allowGradientChangesInPost: {
            type: 'boolean',
            isRequired: true,
        },
        allowColourAdjustmentsInPost: {
            type: 'boolean',
        },
        availableColours: {
            type: 'array',
            contains: {
                type: 'ColourFieldType',
            },
            isRequired: true,
        },
        additionalColours: {
            type: 'array',
            contains: {
                type: 'ColourFieldType',
            },
            isRequired: true,
        },
        gradient: {
            type: 'ColourFieldGradient',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.COLOUR',
            isRequired: true,
        },
        data: {
            type: 'ColourFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldGradient.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldGradient = {
    properties: {
        gradientMode: {
            type: 'ColourFieldGradientMode',
        },
        linearGradientDirection: {
            type: 'string',
        },
        linearGradientDirectionCustom: {
            type: 'string',
        },
        radialGradientShape: {
            type: 'ColourFieldRadialGradientShape',
        },
        radialGradientSize: {
            type: 'ColourFieldRadialGradientSize',
        },
        radialGradientLength1: {
            type: 'number',
        },
        radialGradientLength2: {
            type: 'number',
        },
        conicalGradientAngle: {
            type: 'number',
        },
        conicalGradientColourInterpolationMethod: {
            type: 'ColourFieldConicalGradientColourInterpolationMethod',
        },
        conicalGradientRectangularColourSpace: {
            type: 'ColourFieldConicalGradientRectangularColourSpace',
        },
        conicalGradientPolarColourSpace: {
            type: 'ColourFieldConicalGradientPolarColourSpace',
        },
        conicalGradientPolarHue: {
            type: 'ColourFieldConicalGradientPolarHue',
        },
        gradientPosition1: {
            type: 'all-of',
            contains: [{
                type: 'ColourFieldGradientPosition',
            }],
        },
        gradientPosition2: {
            type: 'all-of',
            contains: [{
                type: 'ColourFieldGradientPosition',
            }],
        },
        gradientPosition1Length: {
            type: 'number',
        },
        gradientPosition2Length: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldGradientMode.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldGradientMode = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldGradientPosition.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldGradientPosition = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldMode.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldMode = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldRadialGradientShape.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldRadialGradientShape = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldRadialGradientSize.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldRadialGradientSize = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ColourFieldType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ColourFieldType = {
    properties: {
        colour: {
            type: 'string',
            isRequired: true,
        },
        stopPosition1: {
            type: 'number',
        },
        stopPosition2: {
            type: 'number',
        },
        noColour: {
            type: 'boolean',
        },
        noColourValue: {
            type: 'number',
        },
        degrees: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ControlType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ControlType = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateAdminUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateAdminUser = {
    properties: {
        email: {
            type: 'string',
            description: \`Email of the User\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateAsset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateAsset = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the organisation\`,
            isRequired: true,
        },
        contentType: {
            type: 'AssetType',
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        contentSize: {
            type: 'number',
            description: \`Content Type.\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateAssetFromUnsplash.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateAssetFromUnsplash = {
    properties: {
        imageId: {
            type: 'string',
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateFeed = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the feed\`,
            isRequired: true,
        },
        url: {
            type: 'string',
            description: \`The URL of the feed to capture\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateJSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateJSON = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the json\`,
            isRequired: true,
        },
        json: {
            type: 'string',
            description: \`The json object\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateMasterField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateMasterField = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the json\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        field: {
            type: 'FieldType',
            isRequired: true,
        },
        controlType: {
            type: 'ControlType',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateOrganisation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateOrganisation = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the organisation\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateOrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateOrganisationGroup = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the organisation group\`,
            isRequired: true,
        },
        permissions: {
            type: 'OrganisationManagement',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateOrganisationUserRequest.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateOrganisationUserRequest = {
    properties: {
        userEmail: {
            type: 'string',
            description: \`ID of the User\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreatePost.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreatePost = {
    properties: {
        title: {
            type: 'string',
            description: \`Name of the Post\`,
            isRequired: true,
        },
        templateId: {
            type: 'string',
            description: \`Id of the template\`,
        },
        templateVersion: {
            type: 'string',
            description: \`The version of the template\`,
        },
        templateOwner: {
            type: 'string',
            description: \`The owner of the template\`,
        },
        data: {
            type: 'PostDataType',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateSpace = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the Space\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateSpaceGroup = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the team group\`,
            isRequired: true,
        },
        permissions: {
            type: 'SpaceManagement',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateTeam.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateTeam = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the Team\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateTeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateTeamGroup = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the team group\`,
            isRequired: true,
        },
        permissions: {
            type: 'TeamManagement',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateTeamUserRequest.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateTeamUserRequest = {
    properties: {
        userId: {
            type: 'string',
            description: \`ID of the User\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateTemplate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateTemplate = {
    properties: {
        title: {
            type: 'string',
            description: \`Name of the Template\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        postTitle: {
            type: 'string',
            description: \`Name of the Template\`,
        },
        schema: {
            type: 'TemplateSchemaType',
        },
        variations: {
            type: 'dictionary',
            contains: {
                type: 'TemplateVariation',
            },
        },
        definitions: {
            type: 'dictionary',
            contains: {
                type: 'TemplateDefinition',
            },
        },
        variationsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
        definitionsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
        transparentBackground: {
            type: 'boolean',
        },
        scaleFactor: {
            type: 'number',
            description: \`scale Factor of the template\`,
        },
        langSettings: {
            type: 'string',
            description: \`language settings to add to the template.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateTransformationResponseAsset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateTransformationResponseAsset = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the organisation\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        contentType: {
            type: 'AssetType',
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        backgroundRemoved: {
            type: 'boolean',
            description: \`boolean to see if the background has been removed or not.\`,
            isRequired: true,
        },
        upscaled: {
            type: 'boolean',
            description: \`boolean to see if the upscaled.\`,
            isRequired: true,
        },
        processed: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        processedRemoveBackground: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        processedFailed: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        processedRemoveBackgroundFailed: {
            type: 'boolean',
            description: \`boolean to see if the images have been processed or not.\`,
            isRequired: true,
        },
        unsplash: {
            type: 'boolean',
            description: \`boolean to see if the images has come from unsplash or not.\`,
            isRequired: true,
        },
        unsplashId: {
            type: 'string',
            description: \`unsplash Id\`,
        },
        unsplashRawURL: {
            type: 'string',
            description: \`unsplash Raw URL\`,
        },
        unsplashFullURL: {
            type: 'string',
            description: \`unsplash Full Size URL\`,
        },
        unsplashRegularURL: {
            type: 'string',
            description: \`unsplash Regular URL\`,
        },
        unsplashSmallURL: {
            type: 'string',
            description: \`unsplash Small URL\`,
        },
        unsplashThumbURL: {
            type: 'string',
            description: \`unsplash Thumb URL\`,
        },
        unsplashDownloadURL: {
            type: 'string',
            description: \`unsplash Download URL\`,
        },
        unsplashDescription: {
            type: 'string',
            description: \`unsplash description\`,
        },
        width: {
            type: 'number',
            description: \`width of the image\`,
        },
        height: {
            type: 'number',
            description: \`height of the image\`,
        },
        creditUsed: {
            type: 'number',
            description: \`Credit used for the image.\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreateUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreateUser = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the User\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the User\`,
            isRequired: true,
        },
        email: {
            type: 'string',
            description: \`Email of the User\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreditUsages.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreditUsages = {
    properties: {
        removeBackground: {
            type: 'number',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$CreditUsed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CreditUsed = {
    properties: {
        creditUsed: {
            type: 'number',
            description: \`Credit used for the image.\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$EntityMetrics.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EntityMetrics = {
    properties: {
        totalUsers: {
            type: 'number',
            isRequired: true,
        },
        activeUsers: {
            type: 'number',
            isRequired: true,
        },
        engagedUsers: {
            type: 'number',
            isRequired: true,
        },
        creditUsages: {
            type: 'CreditUsages',
            isRequired: true,
        },
        postDownloads: {
            type: 'number',
            isRequired: true,
        },
        postCreations: {
            type: 'number',
            isRequired: true,
        },
        templateCreations: {
            type: 'number',
            isRequired: true,
        },
        templatePublications: {
            type: 'number',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Feed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Feed = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the feed\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the feed\`,
            isRequired: true,
        },
        url: {
            type: 'string',
            description: \`The URL of the feed to capture\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FeedField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FeedField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'FeedFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FeedFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FeedFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        feedValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        feedId: {
            type: 'string',
        },
        feedItemId: {
            type: 'string',
        },
        feedName: {
            type: 'string',
        },
        showValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        defaultValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        order: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FeedFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FeedFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        feedValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        feedId: {
            type: 'string',
        },
        feedItemId: {
            type: 'string',
        },
        feedName: {
            type: 'string',
        },
        showValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        defaultValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        order: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FeedFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FeedFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.FEED',
            isRequired: true,
        },
        data: {
            type: 'FeedFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FieldType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FieldType = {
    type: 'one-of',
    contains: [{
        type: 'TextField',
    }, {
        type: 'JustifiedScalingTextField',
    }, {
        type: 'RichTextField',
    }, {
        type: 'BooleanField',
    }, {
        type: 'NumberField',
    }, {
        type: 'OptionField',
    }, {
        type: 'OptionFromDataField',
    }, {
        type: 'ImageField',
    }, {
        type: 'ImageCollectionField',
    }, {
        type: 'FeedField',
    }, {
        type: 'FontField',
    }, {
        type: 'ColourField',
    }, {
        type: 'JSONField',
    }, {
        type: 'GptField',
    }, {
        type: 'MasterFieldField',
    }],
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Fields.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Fields = {
    type: 'array',
    contains: {
        type: 'FieldType',
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FontField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FontField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'FontFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FontFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FontFieldData = {
    properties: {
        value: {
            type: 'FontFieldValue',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FontFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FontFieldDataDetails = {
    properties: {
        value: {
            type: 'FontFieldValue',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FontFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FontFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.FONT',
            isRequired: true,
        },
        data: {
            type: 'FontFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$FontFieldValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FontFieldValue = {
    properties: {
        assetId: {
            type: 'string',
            isRequired: true,
        },
        fileName: {
            type: 'string',
            isRequired: true,
        },
        fontName: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GetAllPostResponse.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GetAllPostResponse = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the Post\`,
            isRequired: true,
        },
        title: {
            type: 'string',
            description: \`Name of the Post\`,
            isRequired: true,
        },
        spaceId: {
            type: 'string',
            description: \`Id of the space the post is associated with\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Id of the team the post is associated with\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Id of the organisation the post is associated with\`,
            isRequired: true,
        },
        templateId: {
            type: 'string',
            description: \`Id of the template\`,
            isRequired: true,
        },
        templateVersion: {
            type: 'string',
            description: \`The version of the template\`,
            isRequired: true,
        },
        templateOwner: {
            type: 'string',
            description: \`The owner of the template\`,
            isRequired: true,
        },
        published: {
            type: 'boolean',
            description: \`boolean to say if the post is published or not.\`,
            isRequired: true,
        },
        publishedBy: {
            type: 'string',
            description: \`User ID of who published the post\`,
        },
        publishedAt: {
            type: 'string',
            description: \`The iso string the time the post was published\`,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        archive: {
            type: 'boolean',
            description: \`boolean if the post is archived or not\`,
        },
        version: {
            type: 'number',
            description: \`The version of the template\`,
            isRequired: true,
        },
        lastImageTime: {
            type: 'string',
            description: \`last image time in iso format.\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GptFielAdditionalInputs.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GptFielAdditionalInputs = {
    type: 'one-of',
    contains: [{
        type: 'GptFieldAdditionalInputText',
    }, {
        type: 'GptFieldAdditionalInputWebContent',
    }],
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GptField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GptField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'GptFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GptFieldAdditionalInputText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GptFieldAdditionalInputText = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        input: {
            type: 'string',
            isRequired: true,
        },
        showInPost: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GptFieldAdditionalInputWebContent.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GptFieldAdditionalInputWebContent = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        input: {
            type: 'string',
            isRequired: true,
        },
        height: {
            type: 'number',
        },
        showInPost: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GptFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GptFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        input: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        additionalInputs: {
            type: 'array',
            contains: {
                type: 'GptFielAdditionalInputs',
            },
            isRequired: true,
        },
        automatic: {
            type: 'boolean',
            isRequired: true,
        },
        buttonText: {
            type: 'string',
        },
        viewInputField: {
            type: 'boolean',
            isRequired: true,
        },
        viewOutputField: {
            type: 'boolean',
            isRequired: true,
        },
        viewButton: {
            type: 'boolean',
            isRequired: true,
        },
        customizeButtonText: {
            type: 'boolean',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GptFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GptFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        input: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        additionalInputs: {
            type: 'array',
            contains: {
                type: 'GptFielAdditionalInputs',
            },
            isRequired: true,
        },
        automatic: {
            type: 'boolean',
            isRequired: true,
        },
        buttonText: {
            type: 'string',
        },
        viewInputField: {
            type: 'boolean',
            isRequired: true,
        },
        viewOutputField: {
            type: 'boolean',
            isRequired: true,
        },
        viewButton: {
            type: 'boolean',
            isRequired: true,
        },
        customizeButtonText: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GptFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GptFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.GPT',
            isRequired: true,
        },
        data: {
            type: 'GptFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GroupUser = {
    properties: {
        user: {
            type: 'User',
            isRequired: true,
        },
        permission: {
            type: 'GroupUserPermissions',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$GroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $GroupUserPermissions = {
    properties: {
        admin: {
            type: 'boolean',
            description: \`Admin of the organisation\`,
            isRequired: true,
        },
        userManagement: {
            type: 'boolean',
            description: \`Can a user userManagement\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$IfModifiedSinceHeader.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $IfModifiedSinceHeader = {
    type: 'string',
    description: \`Last modified date\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageCollectionField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageCollectionField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'ImageCollectionFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageCollectionFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageCollectionFieldData = {
    properties: {
        imageCollectionOptions: {
            type: 'array',
            contains: {
                type: 'ImageCollectionFieldOptions',
            },
            isRequired: true,
        },
        imageCollectionSettings: {
            type: 'all-of',
            contains: [{
                type: 'ImageFieldSettings',
            }],
            isRequired: true,
        },
        imageCollectionVariations: {
            type: 'dictionary',
            contains: {
                type: 'ImageFieldSettings',
            },
            isRequired: true,
        },
        value: {
            type: 'number',
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        imageSizeType: {
            type: 'ImageFieldSizeType',
            isRequired: true,
        },
        imageFitMode: {
            type: 'ImageFieldFitMode',
            isRequired: true,
        },
        viewThumbnailsInPost: {
            type: 'boolean',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageCollectionFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageCollectionFieldDataDetails = {
    properties: {
        imageCollectionOptions: {
            type: 'array',
            contains: {
                type: 'ImageCollectionFieldOptions',
            },
            isRequired: true,
        },
        imageCollectionSettings: {
            type: 'all-of',
            contains: [{
                type: 'ImageFieldSettings',
            }],
            isRequired: true,
        },
        imageCollectionVariations: {
            type: 'dictionary',
            contains: {
                type: 'ImageFieldSettings',
            },
            isRequired: true,
        },
        value: {
            type: 'number',
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        imageSizeType: {
            type: 'ImageFieldSizeType',
            isRequired: true,
        },
        imageFitMode: {
            type: 'ImageFieldFitMode',
            isRequired: true,
        },
        viewThumbnailsInPost: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageCollectionFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageCollectionFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.IMAGE_COLLECTION',
            isRequired: true,
        },
        data: {
            type: 'ImageCollectionFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageCollectionFieldOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageCollectionFieldOptions = {
    properties: {
        assetId: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
        value: {
            type: 'string',
            isRequired: true,
        },
        imgWidth: {
            type: 'number',
        },
        imgHeight: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'ImageFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        imageValue: {
            type: 'ImageFieldvalue',
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        imageSizeType: {
            type: 'ImageFieldSizeType',
            isRequired: true,
        },
        imageFitMode: {
            type: 'ImageFieldFitMode',
            isRequired: true,
        },
        removeBackgroundOptional: {
            type: 'boolean',
        },
        removeBackgroundAutomatic: {
            type: 'boolean',
        },
        upScalingOptional: {
            type: 'boolean',
        },
        upScalingWhenRequired: {
            type: 'boolean',
        },
        showRemoveBackGroundToggle: {
            type: 'boolean',
        },
        defaultTab: {
            type: 'string',
        },
        unsplashDefaultSearchTerm: {
            type: 'string',
        },
        useUnsplashDefaultSearchTerm: {
            type: 'boolean',
        },
        removeBackgrounInactiveOptions: {
            type: 'ImageFieldRemoveBackgroundInactiveOptions',
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        imageValue: {
            type: 'ImageFieldvalue',
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        imageSizeType: {
            type: 'ImageFieldSizeType',
            isRequired: true,
        },
        imageFitMode: {
            type: 'ImageFieldFitMode',
            isRequired: true,
        },
        removeBackgroundOptional: {
            type: 'boolean',
        },
        removeBackgroundAutomatic: {
            type: 'boolean',
        },
        upScalingOptional: {
            type: 'boolean',
        },
        upScalingWhenRequired: {
            type: 'boolean',
        },
        showRemoveBackGroundToggle: {
            type: 'boolean',
        },
        defaultTab: {
            type: 'string',
        },
        unsplashDefaultSearchTerm: {
            type: 'string',
        },
        useUnsplashDefaultSearchTerm: {
            type: 'boolean',
        },
        removeBackgrounInactiveOptions: {
            type: 'ImageFieldRemoveBackgroundInactiveOptions',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.IMAGE',
            isRequired: true,
        },
        data: {
            type: 'ImageFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldFitMode.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldFitMode = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldPosition.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldPosition = {
    properties: {
        'x': {
            type: 'number',
            isRequired: true,
        },
        'y': {
            type: 'number',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldRemoveBackgroundInactiveOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldRemoveBackgroundInactiveOptions = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldSettings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldSettings = {
    properties: {
        scale: {
            type: 'number',
            isRequired: true,
        },
        width: {
            type: 'number',
        },
        height: {
            type: 'number',
        },
        position: {
            type: 'ImageFieldPosition',
            isRequired: true,
        },
        rotation: {
            type: 'number',
            isRequired: true,
        },
        brightness: {
            type: 'number',
        },
        contrast: {
            type: 'number',
        },
        saturate: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldSizeType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldSizeType = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$ImageFieldvalue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ImageFieldvalue = {
    properties: {
        assetId: {
            type: 'string',
            isRequired: true,
        },
        imageSettings: {
            type: 'ImageFieldSettings',
            isRequired: true,
        },
        variations: {
            type: 'dictionary',
            contains: {
                type: 'ImageFieldSettings',
            },
            isRequired: true,
        },
        imgWidth: {
            type: 'number',
        },
        imgHeight: {
            type: 'number',
        },
        imageFormat: {
            type: 'string',
        },
        removeBackgroundImage: {
            type: 'boolean',
        },
        assetRemoveBackground: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JSON = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the json\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the json\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        json: {
            type: 'string',
            description: \`The json object\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JSONField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JSONField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'JSONFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JSONFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JSONFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        fromShared: {
            type: 'boolean',
            isRequired: true,
        },
        sharedJsonId: {
            type: 'string',
        },
        sharedJsonName: {
            type: 'string',
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JSONFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JSONFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        fromShared: {
            type: 'boolean',
            isRequired: true,
        },
        sharedJsonId: {
            type: 'string',
        },
        sharedJsonName: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JSONFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JSONFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.JSON',
            isRequired: true,
        },
        data: {
            type: 'JSONFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JSONGetAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JSONGetAll = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the json\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the json\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JSONRemaining.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JSONRemaining = {
    properties: {
        json: {
            type: 'string',
            description: \`The json object\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JustifiedScalingClassOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JustifiedScalingClassOptions = {
    properties: {
        label: {
            type: 'string',
            isRequired: true,
        },
        value: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JustifiedScalingTextField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JustifiedScalingTextField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'JustifiedScalingTextFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JustifiedScalingTextFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JustifiedScalingTextFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        justifiedScalingVariations: {
            type: 'dictionary',
            contains: {
                type: 'JustifiedScalingTextSettings',
            },
            isRequired: true,
        },
        justifiedScalingSettings: {
            type: 'all-of',
            contains: [{
                type: 'JustifiedScalingTextSettings',
            }],
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        canUpdateClassNamesInPost: {
            type: 'boolean',
            isRequired: true,
        },
        canAddAndDeleteRowsInPost: {
            type: 'boolean',
            isRequired: true,
        },
        justifiedScalingInputs: {
            type: 'array',
            contains: {
                type: 'JustifiedScalingTextInput',
            },
            isRequired: true,
        },
        classOptions: {
            type: 'array',
            contains: {
                type: 'JustifiedScalingClassOptions',
            },
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JustifiedScalingTextFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JustifiedScalingTextFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        justifiedScalingVariations: {
            type: 'dictionary',
            contains: {
                type: 'JustifiedScalingTextSettings',
            },
            isRequired: true,
        },
        justifiedScalingSettings: {
            type: 'all-of',
            contains: [{
                type: 'JustifiedScalingTextSettings',
            }],
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        canUpdateClassNamesInPost: {
            type: 'boolean',
            isRequired: true,
        },
        canAddAndDeleteRowsInPost: {
            type: 'boolean',
            isRequired: true,
        },
        justifiedScalingInputs: {
            type: 'array',
            contains: {
                type: 'JustifiedScalingTextInput',
            },
            isRequired: true,
        },
        classOptions: {
            type: 'array',
            contains: {
                type: 'JustifiedScalingClassOptions',
            },
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JustifiedScalingTextFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JustifiedScalingTextFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.JUSTIFIED_SCALING_TEXT',
            isRequired: true,
        },
        data: {
            type: 'JustifiedScalingTextFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JustifiedScalingTextInput.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JustifiedScalingTextInput = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        className: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$JustifiedScalingTextSettings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $JustifiedScalingTextSettings = {
    properties: {
        lineHeight: {
            type: 'number',
            isRequired: true,
        },
        maxHeight: {
            type: 'number',
        },
        scaleFromOrigin: {
            type: 'string',
        },
        margin: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterField = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the json\`,
            isRequired: true,
        },
        version: {
            type: 'number',
            description: \`The version of the template\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the json\`,
            isRequired: true,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        field: {
            type: 'FieldType',
            isRequired: true,
        },
        controlType: {
            type: 'ControlType',
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        draftVersion: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldBaseDataObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldBaseDataObject = {
    properties: {
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForBoolean = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.BOOLEAN',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForColour.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForColour = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.COLOUR',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForFeed = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.FEED',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForFont.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForFont = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.FONT',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForGpt.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForGpt = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.GPT',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForImage.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForImage = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.IMAGE',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForImageCollection.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForImageCollection = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.IMAGE_COLLECTION',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForJson.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForJson = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.JSON',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForJustifiedScalingText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForJustifiedScalingText = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.JUSTIFIED_SCALING_TEXT',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForNone.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForNone = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.NONE',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForNumber.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForNumber = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.NUMBER',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForOption.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForOption = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.OPTION',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForOptionFromData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForOptionFromData = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.OPTION_FROM_DATA',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForRichText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForRichText = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.RICH_TEXT',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldControlForText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldControlForText = {
    properties: {
        masterFieldControl: {
            type: 'MasterFieldsControlType.TEXT',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'MasterFieldFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldData = {
    type: 'one-of',
    contains: [{
        type: 'MasterFieldFieldDataText',
    }, {
        type: 'MasterFieldFieldDataJustifiedScalingText',
    }, {
        type: 'MasterFieldFieldDataRichText',
    }, {
        type: 'MasterFieldFieldDataBoolean',
    }, {
        type: 'MasterFieldFieldDataNumber',
    }, {
        type: 'MasterFieldFieldDataOption',
    }, {
        type: 'MasterFieldFieldDataOptionFromData',
    }, {
        type: 'MasterFieldFieldDataImage',
    }, {
        type: 'MasterFieldFieldDataImageCollection',
    }, {
        type: 'MasterFieldFieldDataFeed',
    }, {
        type: 'MasterFieldFieldDataFont',
    }, {
        type: 'MasterFieldFieldDataColour',
    }, {
        type: 'MasterFieldFieldDataJSON',
    }, {
        type: 'MasterFieldFieldDataGpt',
    }, {
        type: 'MasterFieldFieldDataNone',
    }],
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataBoolean = {
    properties: {
        value: {
            type: 'boolean',
            isRequired: true,
        },
        checkedValue: {
            type: 'all-of',
            contains: [{
                type: 'BooleanFieldValue',
            }],
            isRequired: true,
        },
        uncheckedValue: {
            type: 'all-of',
            contains: [{
                type: 'BooleanFieldValue',
            }],
            isRequired: true,
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataColour.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataColour = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        mode: {
            type: 'ColourFieldMode',
            isRequired: true,
        },
        allowAdditionalColours: {
            type: 'boolean',
            isRequired: true,
        },
        allowGradientChangesInPost: {
            type: 'boolean',
            isRequired: true,
        },
        allowColourAdjustmentsInPost: {
            type: 'boolean',
        },
        availableColours: {
            type: 'array',
            contains: {
                type: 'ColourFieldType',
            },
            isRequired: true,
        },
        additionalColours: {
            type: 'array',
            contains: {
                type: 'ColourFieldType',
            },
            isRequired: true,
        },
        gradient: {
            type: 'ColourFieldGradient',
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataFeed = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        feedValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        feedId: {
            type: 'string',
        },
        feedItemId: {
            type: 'string',
        },
        feedName: {
            type: 'string',
        },
        showValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        defaultValues: {
            type: 'dictionary',
            contains: {
                properties: {
                },
            },
            isRequired: true,
        },
        order: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataFont.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataFont = {
    properties: {
        value: {
            type: 'FontFieldValue',
            isRequired: true,
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataGpt.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataGpt = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        input: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        additionalInputs: {
            type: 'array',
            contains: {
                type: 'GptFielAdditionalInputs',
            },
            isRequired: true,
        },
        automatic: {
            type: 'boolean',
            isRequired: true,
        },
        buttonText: {
            type: 'string',
        },
        viewInputField: {
            type: 'boolean',
            isRequired: true,
        },
        viewOutputField: {
            type: 'boolean',
            isRequired: true,
        },
        viewButton: {
            type: 'boolean',
            isRequired: true,
        },
        customizeButtonText: {
            type: 'boolean',
            isRequired: true,
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataImage.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataImage = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        imageValue: {
            type: 'ImageFieldvalue',
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        imageSizeType: {
            type: 'ImageFieldSizeType',
            isRequired: true,
        },
        imageFitMode: {
            type: 'ImageFieldFitMode',
            isRequired: true,
        },
        removeBackgroundOptional: {
            type: 'boolean',
        },
        removeBackgroundAutomatic: {
            type: 'boolean',
        },
        upScalingOptional: {
            type: 'boolean',
        },
        upScalingWhenRequired: {
            type: 'boolean',
        },
        showRemoveBackGroundToggle: {
            type: 'boolean',
        },
        defaultTab: {
            type: 'string',
        },
        unsplashDefaultSearchTerm: {
            type: 'string',
        },
        useUnsplashDefaultSearchTerm: {
            type: 'boolean',
        },
        removeBackgrounInactiveOptions: {
            type: 'ImageFieldRemoveBackgroundInactiveOptions',
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataImageCollection.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataImageCollection = {
    properties: {
        imageCollectionOptions: {
            type: 'array',
            contains: {
                type: 'ImageCollectionFieldOptions',
            },
            isRequired: true,
        },
        imageCollectionSettings: {
            type: 'all-of',
            contains: [{
                type: 'ImageFieldSettings',
            }],
            isRequired: true,
        },
        imageCollectionVariations: {
            type: 'dictionary',
            contains: {
                type: 'ImageFieldSettings',
            },
            isRequired: true,
        },
        value: {
            type: 'number',
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        imageSizeType: {
            type: 'ImageFieldSizeType',
            isRequired: true,
        },
        imageFitMode: {
            type: 'ImageFieldFitMode',
            isRequired: true,
        },
        viewThumbnailsInPost: {
            type: 'boolean',
            isRequired: true,
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataJSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataJSON = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        fromShared: {
            type: 'boolean',
            isRequired: true,
        },
        sharedJsonId: {
            type: 'string',
        },
        sharedJsonName: {
            type: 'string',
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataJustifiedScalingText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataJustifiedScalingText = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        justifiedScalingVariations: {
            type: 'dictionary',
            contains: {
                type: 'JustifiedScalingTextSettings',
            },
            isRequired: true,
        },
        justifiedScalingSettings: {
            type: 'all-of',
            contains: [{
                type: 'JustifiedScalingTextSettings',
            }],
            isRequired: true,
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        canUpdateClassNamesInPost: {
            type: 'boolean',
            isRequired: true,
        },
        canAddAndDeleteRowsInPost: {
            type: 'boolean',
            isRequired: true,
        },
        justifiedScalingInputs: {
            type: 'array',
            contains: {
                type: 'JustifiedScalingTextInput',
            },
            isRequired: true,
        },
        classOptions: {
            type: 'array',
            contains: {
                type: 'JustifiedScalingClassOptions',
            },
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataNone.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataNone = {
    properties: {
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataNumber.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataNumber = {
    properties: {
        value: {
            type: 'number',
        },
        slider: {
            type: 'boolean',
        },
        min: {
            type: 'number',
        },
        max: {
            type: 'number',
        },
        step: {
            type: 'number',
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataOption.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataOption = {
    properties: {
        value: {
            type: 'string',
        },
        options: {
            type: 'OptionFieldOptions',
        },
        fromJson: {
            type: 'boolean',
        },
        jsonSelectArrayIndex: {
            type: 'number',
        },
        jsonFieldIdentifier: {
            type: 'string',
        },
        jsonFieldDropDownLabel: {
            type: 'string',
        },
        fromJsonAsset: {
            type: 'boolean',
        },
        sharedJsonId: {
            type: 'string',
        },
        sharedJsonName: {
            type: 'string',
        },
        sharedJsonValue: {
            type: 'string',
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataOptionFromData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataOptionFromData = {
    properties: {
        value: {
            type: 'string',
        },
        dataFieldSelection: {
            type: 'string',
            isRequired: true,
        },
        optionsLabelFieldName: {
            type: 'string',
        },
        selectedOptionsIndex: {
            type: 'number',
        },
        dataSelectionFilters: {
            type: 'OptionFromDataFieldDataSelectionFilters',
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataRichText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataRichText = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        dynamicResizing: {
            type: 'boolean',
            isRequired: true,
        },
        richTextState: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        richTextVariations: {
            type: 'dictionary',
            contains: {
                type: 'RichTextFieldSettings',
            },
            isRequired: true,
        },
        richTextSettings: {
            type: 'RichTextFieldSettings',
            isRequired: true,
        },
        richTextControls: {
            type: 'RichTextFieldControls',
            isRequired: true,
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDataText.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDataText = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        maxCharacters: {
            type: 'number',
        },
        multiLine: {
            type: 'boolean',
        },
        inputHeight: {
            type: 'number',
        },
        masterFieldName: {
            type: 'string',
        },
        masterFieldId: {
            type: 'string',
        },
        masterFieldControl: {
            type: 'string',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.MASTER_FIELD',
            isRequired: true,
        },
        data: {
            type: 'MasterFieldFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$MasterFieldsControlType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $MasterFieldsControlType = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$NumberField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $NumberField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'NumberFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$NumberFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $NumberFieldData = {
    properties: {
        value: {
            type: 'number',
        },
        slider: {
            type: 'boolean',
        },
        min: {
            type: 'number',
        },
        max: {
            type: 'number',
        },
        step: {
            type: 'number',
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$NumberFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $NumberFieldDataDetails = {
    properties: {
        value: {
            type: 'number',
        },
        slider: {
            type: 'boolean',
        },
        min: {
            type: 'number',
        },
        max: {
            type: 'number',
        },
        step: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$NumberFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $NumberFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.NUMBER',
            isRequired: true,
        },
        data: {
            type: 'NumberFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'OptionFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFieldData = {
    properties: {
        value: {
            type: 'string',
        },
        options: {
            type: 'OptionFieldOptions',
        },
        fromJson: {
            type: 'boolean',
        },
        jsonSelectArrayIndex: {
            type: 'number',
        },
        jsonFieldIdentifier: {
            type: 'string',
        },
        jsonFieldDropDownLabel: {
            type: 'string',
        },
        fromJsonAsset: {
            type: 'boolean',
        },
        sharedJsonId: {
            type: 'string',
        },
        sharedJsonName: {
            type: 'string',
        },
        sharedJsonValue: {
            type: 'string',
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
        },
        options: {
            type: 'OptionFieldOptions',
        },
        fromJson: {
            type: 'boolean',
        },
        jsonSelectArrayIndex: {
            type: 'number',
        },
        jsonFieldIdentifier: {
            type: 'string',
        },
        jsonFieldDropDownLabel: {
            type: 'string',
        },
        fromJsonAsset: {
            type: 'boolean',
        },
        sharedJsonId: {
            type: 'string',
        },
        sharedJsonName: {
            type: 'string',
        },
        sharedJsonValue: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.OPTION',
            isRequired: true,
        },
        data: {
            type: 'OptionFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFieldOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFieldOptions = {
    type: 'array',
    contains: {
        properties: {
            value: {
                type: 'string',
                isRequired: true,
            },
            label: {
                type: 'string',
                isRequired: true,
            },
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFromDataField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFromDataField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'OptionFromDataFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFromDataFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFromDataFieldData = {
    properties: {
        value: {
            type: 'string',
        },
        dataFieldSelection: {
            type: 'string',
            isRequired: true,
        },
        optionsLabelFieldName: {
            type: 'string',
        },
        selectedOptionsIndex: {
            type: 'number',
        },
        dataSelectionFilters: {
            type: 'OptionFromDataFieldDataSelectionFilters',
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFromDataFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFromDataFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
        },
        dataFieldSelection: {
            type: 'string',
            isRequired: true,
        },
        optionsLabelFieldName: {
            type: 'string',
        },
        selectedOptionsIndex: {
            type: 'number',
        },
        dataSelectionFilters: {
            type: 'OptionFromDataFieldDataSelectionFilters',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFromDataFieldDataSelectionFilters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFromDataFieldDataSelectionFilters = {
    type: 'array',
    contains: {
        properties: {
            name: {
                type: 'string',
                isRequired: true,
            },
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OptionFromDataFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OptionFromDataFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.OPTION_FROM_DATA',
            isRequired: true,
        },
        data: {
            type: 'OptionFromDataFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrderByOrderQueryParamSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrderByOrderQueryParamSchema = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrderByQueryParamSchema.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrderByQueryParamSchema = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Organisation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Organisation = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the organisation\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        archive: {
            type: 'boolean',
        },
        organisationAdmin: {
            type: 'OrganisationAdmin',
            isRequired: true,
        },
        avatar: {
            type: 'boolean',
            description: \`if the user had a avatar set or not\`,
            isRequired: true,
        },
        slack: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationAdmin.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationAdmin = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        templateLevels: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        includeTeams: {
            type: 'boolean',
            isRequired: true,
        },
        includeSpaces: {
            type: 'boolean',
            isRequired: true,
        },
        maxNoOfTeams: {
            type: 'number',
            isRequired: true,
        },
        maxNoOfSpaces: {
            type: 'number',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationAuth.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationAuth = {
    properties: {
        organisationManagement: {
            type: 'OrganisationManagement',
            isRequired: true,
        },
        teams: {
            type: 'dictionary',
            contains: {
                type: 'TeamAuth',
            },
            isRequired: true,
        },
        organisationGroups: {
            type: 'dictionary',
            contains: {
                type: 'GroupUserPermissions',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationGroup = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the organisation group\`,
            isRequired: true,
        },
        defaultAdminGroup: {
            type: 'boolean',
            description: \`If the group is the default admin group or not.\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the organisation group\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        permissions: {
            type: 'OrganisationManagement',
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`archived or not\`,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        users: {
            type: 'array',
            contains: {
                type: 'GroupUser',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationGroupAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationGroupAll = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the organisation group\`,
            isRequired: true,
        },
        defaultAdminGroup: {
            type: 'boolean',
            description: \`If the group is the default admin group or not.\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the organisation group\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        permissions: {
            type: 'OrganisationManagement',
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`archived or not\`,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationGroupPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationGroupPermissions = {
    type: 'OrganisationManagement',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationGroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationGroupUserPermissions = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the organisation group\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        permission: {
            type: 'GroupUserPermissions',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationGroupUsers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationGroupUsers = {
    properties: {
        users: {
            type: 'array',
            contains: {
                type: 'GroupUser',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OrganisationManagement.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OrganisationManagement = {
    description: \`permission set of the organisation group\`,
    properties: {
        admin: {
            type: 'boolean',
            description: \`Admin of the organisation\`,
            isRequired: true,
        },
        createTeam: {
            type: 'boolean',
            description: \`Can a user createTeam\`,
            isRequired: true,
        },
        removeTeam: {
            type: 'boolean',
            description: \`Can a user removeTeam\`,
            isRequired: true,
        },
        viewAllTeams: {
            type: 'boolean',
            description: \`Can a user viewAllTeams\`,
            isRequired: true,
        },
        userManagement: {
            type: 'boolean',
            description: \`Can a user userManagement\`,
            isRequired: true,
        },
        viewBilling: {
            type: 'boolean',
            description: \`Can a user viewBilling\`,
            isRequired: true,
        },
        settingsManagement: {
            type: 'boolean',
            description: \`Can a user settingsManagement\`,
            isRequired: true,
        },
        groupManagement: {
            type: 'boolean',
            description: \`Can a user groupManagement\`,
            isRequired: true,
        },
        createTemplates: {
            type: 'boolean',
            description: \`Can a user createTemplates\`,
            isRequired: true,
        },
        deleteTemplates: {
            type: 'boolean',
            description: \`Can a user deleteTemplates\`,
            isRequired: true,
        },
        createFeed: {
            type: 'boolean',
            description: \`Can a user createFeed\`,
            isRequired: true,
        },
        deleteFeed: {
            type: 'boolean',
            description: \`Can a user deleteFeed\`,
            isRequired: true,
        },
        createAsset: {
            type: 'boolean',
            description: \`Can a user createAsset\`,
            isRequired: true,
        },
        deleteAsset: {
            type: 'boolean',
            description: \`Can a user deleteAsset\`,
            isRequired: true,
        },
        createMasterField: {
            type: 'boolean',
            description: \`Can a user createMasterField\`,
            isRequired: true,
        },
        deleteMasterField: {
            type: 'boolean',
            description: \`Can a user deleteMasterField\`,
            isRequired: true,
        },
        createJSON: {
            type: 'boolean',
            description: \`Can a user createJSON\`,
            isRequired: true,
        },
        deleteJSON: {
            type: 'boolean',
            description: \`Can a user deleteJSON\`,
            isRequired: true,
        },
        viewMetrics: {
            type: 'boolean',
            description: \`Can a user deleteAsset\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OwnerType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OwnerType = {
    properties: {
        ownerType: {
            type: 'OwnerTypeType',
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`org ID of the template.\`,
        },
        teamId: {
            type: 'string',
            description: \`teamId ID of the template.\`,
        },
        spaceId: {
            type: 'string',
            description: \`space ID of the template.\`,
        },
        userId: {
            type: 'string',
            description: \`user ID of the template.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$OwnerTypeType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $OwnerTypeType = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Permission.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Permission = {
    type: 'dictionary',
    contains: {
        type: 'OrganisationAuth',
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Post.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Post = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the Post\`,
            isRequired: true,
        },
        title: {
            type: 'string',
            description: \`Name of the Post\`,
            isRequired: true,
        },
        spaceId: {
            type: 'string',
            description: \`Id of the space the post is associated with\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Id of the team the post is associated with\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Id of the organisation the post is associated with\`,
            isRequired: true,
        },
        templateId: {
            type: 'string',
            description: \`Id of the template\`,
            isRequired: true,
        },
        templateVersion: {
            type: 'string',
            description: \`The version of the template\`,
            isRequired: true,
        },
        templateOwner: {
            type: 'string',
            description: \`The owner of the template\`,
            isRequired: true,
        },
        published: {
            type: 'boolean',
            description: \`boolean to say if the post is published or not.\`,
            isRequired: true,
        },
        publishedBy: {
            type: 'string',
            description: \`User ID of who published the post\`,
        },
        publishedAt: {
            type: 'string',
            description: \`The iso string the time the post was published\`,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        archive: {
            type: 'boolean',
            description: \`boolean if the post is archived or not\`,
        },
        version: {
            type: 'number',
            description: \`The version of the template\`,
            isRequired: true,
        },
        lastImageTime: {
            type: 'string',
            description: \`last image time in iso format.\`,
            isRequired: true,
        },
        data: {
            type: 'PostDataType',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$PostDataType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $PostDataType = {
    description: \`schema of the template\`,
    properties: {
        fields: {
            type: 'Fields',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$PostFull.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $PostFull = {
    properties: {
        data: {
            type: 'PostDataType',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$RichTextField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $RichTextField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'RichTextFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$RichTextFieldControls.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $RichTextFieldControls = {
    properties: {
        paragraph: {
            type: 'boolean',
            isRequired: true,
        },
        h1: {
            type: 'boolean',
            isRequired: true,
        },
        h2: {
            type: 'boolean',
            isRequired: true,
        },
        h3: {
            type: 'boolean',
            isRequired: true,
        },
        ul: {
            type: 'boolean',
            isRequired: true,
        },
        ol: {
            type: 'boolean',
            isRequired: true,
        },
        bold: {
            type: 'boolean',
            isRequired: true,
        },
        italic: {
            type: 'boolean',
            isRequired: true,
        },
        underline: {
            type: 'boolean',
            isRequired: true,
        },
        strikethrough: {
            type: 'boolean',
            isRequired: true,
        },
        left: {
            type: 'boolean',
            isRequired: true,
        },
        center: {
            type: 'boolean',
            isRequired: true,
        },
        right: {
            type: 'boolean',
            isRequired: true,
        },
        justify: {
            type: 'boolean',
            isRequired: true,
        },
        undo: {
            type: 'boolean',
            isRequired: true,
        },
        redo: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$RichTextFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $RichTextFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        dynamicResizing: {
            type: 'boolean',
            isRequired: true,
        },
        richTextState: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        richTextVariations: {
            type: 'dictionary',
            contains: {
                type: 'RichTextFieldSettings',
            },
            isRequired: true,
        },
        richTextSettings: {
            type: 'RichTextFieldSettings',
            isRequired: true,
        },
        richTextControls: {
            type: 'RichTextFieldControls',
            isRequired: true,
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$RichTextFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $RichTextFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        dynamicResizing: {
            type: 'boolean',
            isRequired: true,
        },
        richTextState: {
            type: 'string',
            isRequired: true,
        },
        inputHeight: {
            type: 'number',
        },
        sameSettingsForAllVariations: {
            type: 'boolean',
            isRequired: true,
        },
        richTextVariations: {
            type: 'dictionary',
            contains: {
                type: 'RichTextFieldSettings',
            },
            isRequired: true,
        },
        richTextSettings: {
            type: 'RichTextFieldSettings',
            isRequired: true,
        },
        richTextControls: {
            type: 'RichTextFieldControls',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$RichTextFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $RichTextFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.RICH_TEXT',
            isRequired: true,
        },
        data: {
            type: 'RichTextFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$RichTextFieldSettings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $RichTextFieldSettings = {
    properties: {
        maxFontSize: {
            type: 'number',
        },
        maxHeight: {
            type: 'number',
        },
        maxRows: {
            type: 'number',
        },
        minFontSize: {
            type: 'number',
        },
        maxCharacters: {
            type: 'number',
        },
        lineHeight: {
            type: 'number',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Space.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Space = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the Space\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the Space\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Id of the team the space is associated with\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Id of the template\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        archive: {
            type: 'boolean',
            description: \`Archive status of the space\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$SpaceAuth.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SpaceAuth = {
    properties: {
        spaceManagement: {
            type: 'SpaceManagement',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$SpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SpaceGroup = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the team group\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the team group\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Unique id of the team\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`boolean if the post is archived or not\`,
        },
        permissions: {
            type: 'SpaceManagement',
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        users: {
            type: 'array',
            contains: {
                type: 'GroupUser',
            },
            isRequired: true,
        },
        spaces: {
            type: 'array',
            contains: {
                type: 'Space',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$SpaceGroupAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SpaceGroupAll = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the team group\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the team group\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Unique id of the team\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`boolean if the post is archived or not\`,
        },
        permissions: {
            type: 'SpaceManagement',
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$SpaceGroupPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SpaceGroupPermissions = {
    type: 'SpaceManagement',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$SpaceGroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SpaceGroupUserPermissions = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the team group\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Unique id of the team\`,
            isRequired: true,
        },
        permission: {
            type: 'GroupUserPermissions',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$SpaceGroupUsers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SpaceGroupUsers = {
    properties: {
        users: {
            type: 'array',
            contains: {
                type: 'GroupUser',
            },
            isRequired: true,
        },
        spaces: {
            type: 'array',
            contains: {
                type: 'Space',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$SpaceManagement.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SpaceManagement = {
    description: \`permission set of the team group\`,
    properties: {
        createPosts: {
            type: 'boolean',
            description: \`createPosts of the team\`,
            isRequired: true,
        },
        deletePosts: {
            type: 'boolean',
            description: \`deletePosts of the team\`,
            isRequired: true,
        },
        settingsManagement: {
            type: 'boolean',
            description: \`Can a user settingsManagement\`,
            isRequired: true,
        },
        approvePosts: {
            type: 'boolean',
            description: \`Can a user approvePosts\`,
            isRequired: true,
        },
        createTemplates: {
            type: 'boolean',
            description: \`Can a user createTemplates\`,
            isRequired: true,
        },
        deleteTemplates: {
            type: 'boolean',
            description: \`Can a user deleteTemplates\`,
            isRequired: true,
        },
        createFeed: {
            type: 'boolean',
            description: \`Can a user createFeed\`,
            isRequired: true,
        },
        deleteFeed: {
            type: 'boolean',
            description: \`Can a user deleteFeed\`,
            isRequired: true,
        },
        createAsset: {
            type: 'boolean',
            description: \`Can a user createAsset\`,
            isRequired: true,
        },
        deleteAsset: {
            type: 'boolean',
            description: \`Can a user deleteAsset\`,
            isRequired: true,
        },
        createJSON: {
            type: 'boolean',
            description: \`Can a user createJSON\`,
            isRequired: true,
        },
        deleteJSON: {
            type: 'boolean',
            description: \`Can a user deleteJSON\`,
            isRequired: true,
        },
        createMasterField: {
            type: 'boolean',
            description: \`Can a user createMasterField\`,
            isRequired: true,
        },
        deleteMasterField: {
            type: 'boolean',
            description: \`Can a user deleteMasterField\`,
            isRequired: true,
        },
        viewMetrics: {
            type: 'boolean',
            description: \`Can a user deleteAsset\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Team.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Team = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the Team\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the Team\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`organisation ID for the team.\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        archive: {
            type: 'boolean',
            description: \`archive status of the team\`,
        },
        avatar: {
            type: 'boolean',
            description: \`if the user had a avatar set or not\`,
            isRequired: true,
        },
        slack: {
            type: 'boolean',
            description: \`has slack been added\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TeamAuth.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TeamAuth = {
    properties: {
        teamManagement: {
            type: 'TeamManagement',
            isRequired: true,
        },
        spaces: {
            type: 'dictionary',
            contains: {
                type: 'SpaceAuth',
            },
            isRequired: true,
        },
        teamGroups: {
            type: 'dictionary',
            contains: {
                type: 'GroupUserPermissions',
            },
            isRequired: true,
        },
        spaceGroups: {
            type: 'dictionary',
            contains: {
                type: 'GroupUserPermissions',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TeamGroup = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the team group\`,
            isRequired: true,
        },
        defaultAdminGroup: {
            type: 'boolean',
            description: \`If the group is the default admin group or not.\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the team group\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Unique id of the team\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        permissions: {
            type: 'TeamManagement',
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`Archive status of the team group\`,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        users: {
            type: 'array',
            contains: {
                type: 'GroupUser',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TeamGroupAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TeamGroupAll = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the team group\`,
            isRequired: true,
        },
        defaultAdminGroup: {
            type: 'boolean',
            description: \`If the group is the default admin group or not.\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the team group\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Unique id of the team\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        permissions: {
            type: 'TeamManagement',
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`Archive status of the team group\`,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TeamGroupPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TeamGroupPermissions = {
    type: 'TeamManagement',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TeamGroupUserPermissions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TeamGroupUserPermissions = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the team group\`,
            isRequired: true,
        },
        organisationId: {
            type: 'string',
            description: \`Unique id of the organisation\`,
            isRequired: true,
        },
        teamId: {
            type: 'string',
            description: \`Unique id of the team\`,
            isRequired: true,
        },
        permission: {
            type: 'GroupUserPermissions',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TeamGroupUsers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TeamGroupUsers = {
    properties: {
        users: {
            type: 'array',
            contains: {
                type: 'GroupUser',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TeamManagement.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TeamManagement = {
    description: \`permission set of the team group\`,
    properties: {
        admin: {
            type: 'boolean',
            description: \`Admin of the team\`,
            isRequired: true,
        },
        settingsManagement: {
            type: 'boolean',
            description: \`Can a user settingsManagement\`,
            isRequired: true,
        },
        approvePosts: {
            type: 'boolean',
            description: \`Can a user approvePosts\`,
            isRequired: true,
        },
        groupManagement: {
            type: 'boolean',
            description: \`Can a user groupManagement\`,
            isRequired: true,
        },
        createTemplates: {
            type: 'boolean',
            description: \`Can a user createTemplates\`,
            isRequired: true,
        },
        deleteTemplates: {
            type: 'boolean',
            description: \`Can a user deleteTemplates\`,
            isRequired: true,
        },
        spaceManagement: {
            type: 'boolean',
            description: \`Can a user spaceManagement\`,
            isRequired: true,
        },
        userManagement: {
            type: 'boolean',
            isRequired: true,
        },
        createFeed: {
            type: 'boolean',
            description: \`Can a user createFeed\`,
            isRequired: true,
        },
        deleteFeed: {
            type: 'boolean',
            description: \`Can a user deleteFeed\`,
            isRequired: true,
        },
        createPosts: {
            type: 'boolean',
            description: \`createPosts of the team\`,
            isRequired: true,
        },
        deletePosts: {
            type: 'boolean',
            description: \`deletePosts of the team\`,
            isRequired: true,
        },
        createAsset: {
            type: 'boolean',
            description: \`Can a user createAsset\`,
            isRequired: true,
        },
        deleteAsset: {
            type: 'boolean',
            description: \`Can a user deleteAsset\`,
            isRequired: true,
        },
        createMasterField: {
            type: 'boolean',
            description: \`Can a user createMasterField\`,
            isRequired: true,
        },
        deleteMasterField: {
            type: 'boolean',
            description: \`Can a user deleteMasterField\`,
            isRequired: true,
        },
        createJSON: {
            type: 'boolean',
            description: \`Can a user createJSON\`,
            isRequired: true,
        },
        deleteJSON: {
            type: 'boolean',
            description: \`Can a user deleteJSON\`,
            isRequired: true,
        },
        viewMetrics: {
            type: 'boolean',
            description: \`Can a user deleteAsset\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$Template.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Template = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the Template\`,
            isRequired: true,
        },
        version: {
            type: 'number',
            description: \`The version of the template\`,
            isRequired: true,
        },
        title: {
            type: 'string',
            description: \`Name of the Template\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`boolean if the post is archived or not\`,
        },
        draftVersion: {
            type: 'boolean',
            isRequired: true,
        },
        lastImageTime: {
            type: 'string',
            description: \`last image time in iso format.\`,
            isRequired: true,
        },
        postTitle: {
            type: 'string',
            description: \`Name of the Template\`,
            isRequired: true,
        },
        schema: {
            type: 'TemplateSchemaType',
            isRequired: true,
        },
        variations: {
            type: 'dictionary',
            contains: {
                type: 'TemplateVariation',
            },
            isRequired: true,
        },
        definitions: {
            type: 'dictionary',
            contains: {
                type: 'TemplateDefinition',
            },
            isRequired: true,
        },
        variationsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        definitionsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        transparentBackground: {
            type: 'boolean',
            isRequired: true,
        },
        scaleFactor: {
            type: 'number',
            description: \`scale Factor of the template\`,
            isRequired: true,
        },
        langSettings: {
            type: 'string',
            description: \`language settings to add to the template.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TemplateDefinition.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TemplateDefinition = {
    description: \`definition of the template\`,
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the templateVariation\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the template Variation\`,
            isRequired: true,
        },
        markUp: {
            type: 'string',
            description: \`Markup of the template\`,
            isRequired: true,
        },
        css: {
            type: 'string',
            description: \`css of the template\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TemplateGetAll.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TemplateGetAll = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the Template\`,
            isRequired: true,
        },
        version: {
            type: 'number',
            description: \`The version of the template\`,
            isRequired: true,
        },
        title: {
            type: 'string',
            description: \`Name of the Template\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        createdBy: {
            type: 'string',
            description: \`Created by user string.\`,
            isRequired: true,
        },
        updatedBy: {
            type: 'string',
            description: \`last updated by user string.\`,
        },
        ownerType: {
            type: 'OwnerType',
            isRequired: true,
        },
        archive: {
            type: 'boolean',
            description: \`boolean if the post is archived or not\`,
        },
        draftVersion: {
            type: 'boolean',
            isRequired: true,
        },
        lastImageTime: {
            type: 'string',
            description: \`last image time in iso format.\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TemplateRemaining.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TemplateRemaining = {
    properties: {
        postTitle: {
            type: 'string',
            description: \`Name of the Template\`,
            isRequired: true,
        },
        schema: {
            type: 'TemplateSchemaType',
            isRequired: true,
        },
        variations: {
            type: 'dictionary',
            contains: {
                type: 'TemplateVariation',
            },
            isRequired: true,
        },
        definitions: {
            type: 'dictionary',
            contains: {
                type: 'TemplateDefinition',
            },
            isRequired: true,
        },
        variationsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        definitionsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        transparentBackground: {
            type: 'boolean',
            isRequired: true,
        },
        scaleFactor: {
            type: 'number',
            description: \`scale Factor of the template\`,
            isRequired: true,
        },
        langSettings: {
            type: 'string',
            description: \`language settings to add to the template.\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TemplateSchemaType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TemplateSchemaType = {
    description: \`schema of the template\`,
    properties: {
        fields: {
            type: 'Fields',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TemplateVariation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TemplateVariation = {
    description: \`Variations of the template\`,
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the templateVariation\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the template Variation\`,
            isRequired: true,
        },
        height: {
            type: 'number',
            description: \`height of the template\`,
            isRequired: true,
        },
        width: {
            type: 'number',
            description: \`width of the template\`,
            isRequired: true,
        },
        definitionId: {
            type: 'string',
            description: \`definitionId of the template\`,
            isRequired: true,
        },
        default: {
            type: 'boolean',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TextField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TextField = {
    properties: {
        control: {
            type: 'string',
            isRequired: true,
        },
        data: {
            type: 'TextFieldData',
            isRequired: true,
        },
        _id: {
            type: 'string',
            isRequired: true,
        },
        id: {
            type: 'string',
        },
        index: {
            type: 'number',
        },
        collapseField: {
            type: 'boolean',
        },
        status: {
            type: 'BaseSchemaStatus',
        },
        showInPosts: {
            type: 'boolean',
        },
        showInPostsConditionalStatement: {
            type: 'string',
        },
        dependsOn: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        resetOnDependencyChange: {
            type: 'boolean',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TextFieldData.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TextFieldData = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        maxCharacters: {
            type: 'number',
        },
        multiLine: {
            type: 'boolean',
        },
        inputHeight: {
            type: 'number',
        },
        name: {
            type: 'string',
            isRequired: true,
        },
        label: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TextFieldDataDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TextFieldDataDetails = {
    properties: {
        value: {
            type: 'string',
            isRequired: true,
        },
        maxCharacters: {
            type: 'number',
        },
        multiLine: {
            type: 'boolean',
        },
        inputHeight: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$TextFieldDetails.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $TextFieldDetails = {
    properties: {
        control: {
            type: 'ControlType.TEXT',
            isRequired: true,
        },
        data: {
            type: 'TextFieldData',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$URLsType.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $URLsType = {
    properties: {
        thumbnailURL: {
            type: 'string',
            description: \`Presigned URL for the thumbnail.\`,
            isRequired: true,
        },
        fullSizeURL: {
            type: 'string',
            description: \`Presigned URL for the full size image.\`,
            isRequired: true,
        },
        workingSizeURL: {
            type: 'string',
            description: \`Presigned URL for the working size image.\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UnsplashSearchResults.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UnsplashSearchResults = {
    properties: {
        total: {
            type: 'number',
            isRequired: true,
        },
        total_pages: {
            type: 'number',
            isRequired: true,
        },
        results: {
            type: 'array',
            contains: {
                type: 'UnsplashSearchResultsResult',
            },
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UnsplashSearchResultsResult.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UnsplashSearchResultsResult = {
    properties: {
        id: {
            type: 'string',
            isRequired: true,
        },
        width: {
            type: 'number',
            isRequired: true,
        },
        height: {
            type: 'number',
            isRequired: true,
        },
        color: {
            type: 'string',
            isRequired: true,
        },
        description: {
            type: 'string',
            isRequired: true,
        },
        blur_hash: {
            type: 'string',
            isRequired: true,
        },
        urls: {
            type: 'UnsplashSearchResultsResultUrls',
            isRequired: true,
        },
        links: {
            type: 'UnsplashSearchResultsResultLinks',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UnsplashSearchResultsResultLinks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UnsplashSearchResultsResultLinks = {
    properties: {
        self: {
            type: 'string',
            isRequired: true,
        },
        html: {
            type: 'string',
            isRequired: true,
        },
        download: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UnsplashSearchResultsResultUrls.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UnsplashSearchResultsResultUrls = {
    properties: {
        raw: {
            type: 'string',
            isRequired: true,
        },
        full: {
            type: 'string',
            isRequired: true,
        },
        regular: {
            type: 'string',
            isRequired: true,
        },
        small: {
            type: 'string',
            isRequired: true,
        },
        thumb: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateAsset.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateAsset = {
    properties: {
        contentType: {
            type: 'AssetType',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateFeed.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateFeed = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the feed\`,
        },
        url: {
            type: 'string',
            description: \`The URL of the feed to capture\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateJSON.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateJSON = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the json\`,
        },
        json: {
            type: 'string',
            description: \`The json object\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateMasterField.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateMasterField = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the json\`,
        },
        field: {
            type: 'FieldType',
        },
        publishVersion: {
            type: 'boolean',
            description: \`if this is true, a new version will be created\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateOrganisation.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateOrganisation = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the organisation\`,
        },
        avatar: {
            type: 'boolean',
            description: \`if the user had a avatar set or not\`,
        },
        slackAuthToken: {
            type: 'string',
            description: \`auth token for slack\`,
        },
        redirectURL: {
            type: 'string',
            description: \`redirectURL for slack\`,
        },
        revokeSlack: {
            type: 'boolean',
            description: \`revoke slack auth token\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateOrganisationAdmin.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateOrganisationAdmin = {
    properties: {
        templateLevels: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
        includeTeams: {
            type: 'boolean',
        },
        includeSpaces: {
            type: 'boolean',
        },
        maxNoOfTeams: {
            type: 'number',
        },
        maxNoOfSpaces: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateOrganisationGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateOrganisationGroup = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the organisation group\`,
        },
        permissions: {
            type: 'OrganisationManagement',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateOrganisationGroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateOrganisationGroupUser = {
    properties: {
        userPermissions: {
            type: 'GroupUserPermissions',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdatePost.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdatePost = {
    properties: {
        title: {
            type: 'string',
            description: \`Name of the Post\`,
        },
        data: {
            type: 'PostDataType',
        },
        published: {
            type: 'boolean',
            description: \`boolean to say if the post is published or not.\`,
        },
        templateId: {
            type: 'string',
            description: \`Id of the template\`,
        },
        templateVersion: {
            type: 'string',
            description: \`The version of the template\`,
        },
        templateOwner: {
            type: 'string',
            description: \`The owner of the template\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateSpace.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateSpace = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the Space\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateSpaceGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateSpaceGroup = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the team group\`,
        },
        permissions: {
            type: 'SpaceManagement',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateSpaceGroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateSpaceGroupUser = {
    properties: {
        userPermissions: {
            type: 'GroupUserPermissions',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateTeam.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateTeam = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the Team\`,
        },
        avatar: {
            type: 'boolean',
            description: \`if the user had a avatar set or not\`,
        },
        slackAuthToken: {
            type: 'string',
            description: \`auth token for slack\`,
        },
        redirectURL: {
            type: 'string',
            description: \`redirectURL for slack\`,
        },
        revokeSlack: {
            type: 'boolean',
            description: \`revoke slack auth token\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateTeamGroup.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateTeamGroup = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the team group\`,
        },
        permissions: {
            type: 'TeamManagement',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateTeamGroupUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateTeamGroupUser = {
    properties: {
        userPermissions: {
            type: 'GroupUserPermissions',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateTemplate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateTemplate = {
    properties: {
        title: {
            type: 'string',
            description: \`Name of the Template\`,
        },
        postTitle: {
            type: 'string',
            description: \`Name of the Template\`,
        },
        schema: {
            type: 'TemplateSchemaType',
        },
        variations: {
            type: 'dictionary',
            contains: {
                type: 'TemplateVariation',
            },
        },
        definitions: {
            type: 'dictionary',
            contains: {
                type: 'TemplateDefinition',
            },
        },
        variationsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
        definitionsOrder: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
        transparentBackground: {
            type: 'boolean',
        },
        scaleFactor: {
            type: 'number',
            description: \`scale Factor of the template\`,
        },
        langSettings: {
            type: 'string',
            description: \`language settings to add to the template.\`,
        },
        publishVersion: {
            type: 'boolean',
            description: \`if this is true, a new version will be created\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$UpdateUser.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $UpdateUser = {
    properties: {
        name: {
            type: 'string',
            description: \`Name of the User\`,
        },
        avatar: {
            type: 'boolean',
            description: \`if the user had a avatar set or not\`,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$User.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $User = {
    properties: {
        id: {
            type: 'string',
            description: \`Unique id of the User\`,
            isRequired: true,
        },
        name: {
            type: 'string',
            description: \`Name of the User\`,
            isRequired: true,
        },
        email: {
            type: 'string',
            description: \`Email of the User\`,
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            description: \`Created at time in iso format.\`,
        },
        roles: {
            type: 'array',
            contains: {
                type: 'string',
            },
            isRequired: true,
        },
        avatar: {
            type: 'boolean',
            description: \`if the user had a avatar set or not\`,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$archive.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $archive = {
    type: 'boolean',
    description: \`Is the get function getting archive or normal\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$assetFilterQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $assetFilterQuery = {
    type: 'boolean',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$assetFilterQueryValue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $assetFilterQueryValue = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$assetIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $assetIDParameter = {
    type: 'string',
    description: \`ID of asset to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$assetTransformationCheckerQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $assetTransformationCheckerQuery = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$assetTransformationQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $assetTransformationQuery = {
    type: 'AssetTransformationQueryParamSchema',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$assetTypeParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $assetTypeParameter = {
    type: 'string',
    description: \`ID of asset to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$assetTypeQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $assetTypeQuery = {
    type: 'AssetType',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$avatarQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $avatarQuery = {
    type: 'boolean',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$details.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $details = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$downloadPostParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $downloadPostParameter = {
    type: 'boolean',
    description: \`if the post is being updated to then be downloaded\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$endTime.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $endTime = {
    type: 'string',
    description: \`end time of the metrics, in ISO 8601 format\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$feedIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $feedIDParameter = {
    type: 'string',
    description: \`ID of feed to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$forceUpdate.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $forceUpdate = {
    type: 'boolean',
    description: \`Force update of the metrics\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$jsonIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $jsonIDParameter = {
    type: 'string',
    description: \`ID of json to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$latestPublishedVersion.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $latestPublishedVersion = {
    type: 'boolean',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$masterFieldIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $masterFieldIDParameter = {
    type: 'string',
    description: \`ID of master field to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$masterFieldTypeQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $masterFieldTypeQuery = {
    type: 'ControlType',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$orderByOrderQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $orderByOrderQuery = {
    type: 'OrderByOrderQueryParamSchema',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$orderByQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $orderByQuery = {
    type: 'OrderByQueryParamSchema',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$organisationGroupIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $organisationGroupIDParameter = {
    type: 'string',
    description: \`ID of Organisation to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$organisationIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $organisationIDParameter = {
    type: 'string',
    description: \`ID of Organisation to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$organisationQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $organisationQuery = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$originalAssetQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $originalAssetQuery = {
    type: 'boolean',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$pageSize.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $pageSize = {
    type: 'number',
    description: \`ID of version to get\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$paramTypeEnum1.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $paramTypeEnum1 = {
    type: 'Enum',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$postIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $postIDParameter = {
    type: 'string',
    description: \`ID of template to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$postQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $postQuery = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$publishedParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $publishedParameter = {
    type: 'boolean',
    description: \`if the post is published or not\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$responseObj.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $responseObj = {
    properties: {
        property1: {
            type: 'string',
            isRequired: true,
        },
        property2: {
            type: 'string',
            isRequired: true,
        },
        property3: {
            type: 'responseObj3',
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$responseObj3.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $responseObj3 = {
    properties: {
        subProperty1: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$rssNumberParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $rssNumberParameter = {
    type: 'number',
    description: \`The number of records to return, if not set default to 10.\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$searchTermQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $searchTermQuery = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$spaceGroupIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $spaceGroupIDParameter = {
    type: 'string',
    description: \`ID of space group to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$spaceIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $spaceIDParameter = {
    type: 'string',
    description: \`ID of Space to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$spaceQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $spaceQuery = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$startPage.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $startPage = {
    type: 'number',
    description: \`ID of version to get\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$startTime.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $startTime = {
    type: 'string',
    description: \`Start time of the metrics, in ISO 8601 format\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$teamGroupIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $teamGroupIDParameter = {
    type: 'string',
    description: \`ID of Team to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$teamIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $teamIDParameter = {
    type: 'string',
    description: \`ID of Team to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$teamQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $teamQuery = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$templateIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $templateIDParameter = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$templateQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $templateQuery = {
    type: 'string',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$thumbnailQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $thumbnailQuery = {
    type: 'boolean',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$userIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $userIDParameter = {
    type: 'string',
    description: \`ID of User to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$userQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $userQuery = {
    type: 'string',
    description: \`ID of User to fetch\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$userWithPermission.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $userWithPermission = {
    properties: {
        user: {
            type: 'User',
            isRequired: true,
        },
        permissions: {
            type: 'Permission',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$variationIDParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $variationIDParameter = {
    type: 'string',
    description: \`Name of the variation\`,
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/schemas/$versionParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $versionParameter = {
    type: 'number',
} as const;
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/AdminService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreateAdminUser } from '../models/CreateAdminUser';
import type { User } from '../models/User';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class AdminService {
    /**
     * Returns all Admin Users
     * @returns User User response
     * @throws ApiError
     */
    public static getAllAdminUsers(): CancelablePromise<Array<User>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/admin/user',
        });
    }
    /**
     * Creates a new Admin User
     * @param requestBody
     * @returns void
     * @throws ApiError
     */
    public static createAdminUser(requestBody: CreateAdminUser,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/admin/user',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a user Admin
 * @param userId ID of User to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteAdminUser(userId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/admin/user/{userID}',
        path: {
            'userID': userId,
        },
    });
}
/**
 * Returns all accepted emails
 * @returns string User response
 * @throws ApiError
 */
public static getAcceptedEmails(): CancelablePromise<Array<string>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/admin/accepted-emails',
    });
}
/**
 * Update all accepted emails
 * @param requestBody
 * @returns string User response
 * @throws ApiError
 */
public static updateAcceptedEmails(requestBody: Array<string>,
): CancelablePromise<Array<string>> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/admin/accepted-emails',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Gets if a user is a admin or not
 * @returns boolean Users Permissions
 * @throws ApiError
 */
public static isAdminUser(): CancelablePromise<boolean> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/admin',
    });
}
/**
 * Returns all Admin Users
 * @returns User User response
 * @throws ApiError
 */
public static getAllSupportUsers(): CancelablePromise<Array<User>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/admin/support/user',
    });
}
/**
 * Creates a new Admin User
 * @param requestBody
 * @returns void
 * @throws ApiError
 */
public static createSupportUser(requestBody: CreateAdminUser,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/admin/support/user',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a user Admin
 * @param userId ID of User to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteSupportUser(userId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/admin/support/user/{userID}',
        path: {
            'userID': userId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/AssetService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Asset } from '../models/Asset';
import type { AssetTransformationQueryParamSchema } from '../models/AssetTransformationQueryParamSchema';
import type { AssetType } from '../models/AssetType';
import type { CreateAsset } from '../models/CreateAsset';
import type { CreateTransformationResponseAsset } from '../models/CreateTransformationResponseAsset';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { UpdateAsset } from '../models/UpdateAsset';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class AssetService {
    /**
     * Returns all assets
     * queryObj = {
         *     @param assetType
         *     @param organisationId
         *     @param teamId
         *     @param spaceId
         *     @param orderBy
         *     @param orderByOrder
         *     @param assetFilter
         *     @param assetFilterValue
         * }
         * @returns Asset Get All Assets
         * @throws ApiError
         */
        public static getAllAssets(queryObj?:{
            assetType?: AssetType,
            organisationId?: string,
            teamId?: string,
            spaceId?: string,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
            assetFilter?: boolean,
            assetFilterValue?: string,
        },
    ): CancelablePromise<Array<Asset>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/asset',
            query: queryObj? {
                'assetType': queryObj.assetType,
                'organisationId': queryObj.organisationId,
                'teamId': queryObj.teamId,
                'spaceId': queryObj.spaceId,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
                'assetFilter': queryObj.assetFilter,
                'assetFilterValue': queryObj.assetFilterValue,
            }: undefined,
        });
    }
    /**
     * Creates a new asset
     * @param requestBody
     * @returns any asset response
     * @throws ApiError
     */
    public static createAsset(requestBody: CreateAsset,
): CancelablePromise<{
    id: string;
    url: string;
}> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/asset',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns By Id
 * @param assetId ID of asset to fetch
 * @returns Asset asset response
 * @throws ApiError
 */
public static getAssetById(assetId: string,
): CancelablePromise<Asset> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/asset/{assetID}',
        path: {
            'assetID': assetId,
        },
    });
}
/**
 * Deletes a Asset
 * @param assetId ID of asset to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteAsset(assetId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/asset/{assetID}',
        path: {
            'assetID': assetId,
        },
    });
}
/**
 * Updates a new Asset
 * @param assetId ID of asset to fetch
 * @param requestBody
 * @returns void
 * @throws ApiError
 */
public static updateAsset(assetId: string,
requestBody: UpdateAsset,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/asset/{assetID}',
        path: {
            'assetID': assetId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Creates a new asset Transformation
 * @param assetId ID of asset to fetch
 * queryObj = {
     *     @param transformation
     * }
     * @returns CreateTransformationResponseAsset asset response
     * @throws ApiError
     */
    public static createAssetTransformation(assetId: string,
    queryObj?:{
        transformation?: AssetTransformationQueryParamSchema,
    },
): CancelablePromise<CreateTransformationResponseAsset> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/asset/{assetID}/transformation',
        path: {
            'assetID': assetId,
        },
        query: queryObj? {
            'transformation': queryObj.transformation,
        }: undefined,
    });
}
/**
 * Checks to see if an asset or array of assets transformations are complete
 * queryObj = {
     *     @param transformation
     *     @param assetId
     * }
     * @returns boolean asset response
     * @throws ApiError
     */
    public static assetTransformationChecker(queryObj:{
        transformation?: AssetTransformationQueryParamSchema,
        assetId: Array<string>,
    },
): CancelablePromise<Record<string, boolean>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/asset/transformation-checker',
        query: queryObj? {
            'transformation': queryObj.transformation,
            'assetId': queryObj.assetId,
        }: undefined,
    });
}
/**
 * Returns By Id
 * @param assetId ID of asset to fetch
 * queryObj = {
     *     @param transformation
     *     @param thumbnailQuery
     *     @param originalAsset
     * }
     * @returns string Asset response
     * @throws ApiError
     */
    public static getAssetContentById(assetId: string,
    queryObj?:{
        transformation?: AssetTransformationQueryParamSchema,
        thumbnailQuery?: boolean,
        originalAsset?: boolean,
    },
): CancelablePromise<string> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/asset/{assetID}/content',
        path: {
            'assetID': assetId,
        },
        query: queryObj? {
            'transformation': queryObj.transformation,
            'thumbnailQuery': queryObj.thumbnailQuery,
            'originalAsset': queryObj.originalAsset,
        }: undefined,
        errors: {
            302: \`asset response\`,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { paramTypeEnum1 } from '../models/paramTypeEnum1';
import type { responseObj } from '../models/responseObj';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DefaultService {
    /**
     * queryObj = {
         *     @param paramQuery1
         *     @param paramQuery2
         * }
         * @returns responseObj Get All Things
         * @throws ApiError
         */
        public static getAllThings(queryObj?:{
            paramQuery1?: paramTypeEnum1,
            paramQuery2?: string,
        },
    ): CancelablePromise<responseObj> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/thing',
            query: queryObj? {
                'paramQuery1': queryObj.paramQuery1,
                'paramQuery2': queryObj.paramQuery2,
            }: undefined,
        });
    }
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/FeedService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreateFeed } from '../models/CreateFeed';
import type { Feed } from '../models/Feed';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { UpdateFeed } from '../models/UpdateFeed';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class FeedService {
    /**
     * Returns all feeds
     * queryObj = {
         *     @param organisationId
         *     @param teamId
         *     @param spaceId
         *     @param userId ID of User to fetch
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns Feed Feed response
         * @throws ApiError
         */
        public static getAllFeeds(queryObj?:{
            organisationId?: string,
            teamId?: string,
            spaceId?: string,
            userId?: string,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<Feed>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/feed',
            query: queryObj? {
                'organisationId': queryObj.organisationId,
                'teamId': queryObj.teamId,
                'spaceId': queryObj.spaceId,
                'userId': queryObj.userId,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creates a new feed
     * @param requestBody
     * @returns Feed Feed response
     * @throws ApiError
     */
    public static createFeed(requestBody: CreateFeed,
): CancelablePromise<Feed> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/feed',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Gets the latest for RSS feed
 * @param feedId ID of feed to fetch
 * queryObj = {
     *     @param rssNumber The number of records to return, if not set default to 10.
     * }
     * @returns any Feed response
     * @throws ApiError
     */
    public static getFeedLatest(feedId: string,
    queryObj?:{
        rssNumber?: number,
    },
): CancelablePromise<Array<Record<string, any>>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/feed/{feedID}/latest',
        path: {
            'feedID': feedId,
        },
        query: queryObj? {
            'rssNumber': queryObj.rssNumber,
        }: undefined,
    });
}
/**
 * Returns By Id
 * @param feedId ID of feed to fetch
 * @returns Feed Feed response
 * @throws ApiError
 */
public static getFeedById(feedId: string,
): CancelablePromise<Feed> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/feed/{feedID}',
        path: {
            'feedID': feedId,
        },
    });
}
/**
 * Updates a new feed
 * @param feedId ID of feed to fetch
 * @param requestBody
 * @returns Feed Feed response
 * @throws ApiError
 */
public static updateFeed(feedId: string,
requestBody: UpdateFeed,
): CancelablePromise<Feed> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/feed/{feedID}',
        path: {
            'feedID': feedId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a Feed
 * @param feedId ID of feed to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteFeed(feedId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/feed/{feedID}',
        path: {
            'feedID': feedId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/IntegrationsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Asset } from '../models/Asset';
import type { CreateAssetFromUnsplash } from '../models/CreateAssetFromUnsplash';
import type { UnsplashSearchResults } from '../models/UnsplashSearchResults';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class IntegrationsService {
    /**
     * Returns a list of thumbnail urls from unsplash
     * queryObj = {
         *     @param searchTerm
         *     @param startPage ID of version to get
         *     @param pageSize ID of version to get
         * }
         * @returns UnsplashSearchResults Unsplash images thumbnail URLs
         * @throws ApiError
         */
        public static searchUnsplash(queryObj?:{
            searchTerm?: string,
            startPage?: number,
            pageSize?: number,
        },
    ): CancelablePromise<UnsplashSearchResults> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/unsplash',
            query: queryObj? {
                'searchTerm': queryObj.searchTerm,
                'startPage': queryObj.startPage,
                'pageSize': queryObj.pageSize,
            }: undefined,
        });
    }
    /**
     * Creates an asset from an unsplash image
     * @param requestBody
     * @returns Asset asset response
     * @throws ApiError
     */
    public static createAssetFromUnsplash(requestBody: CreateAssetFromUnsplash,
): CancelablePromise<Asset> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/unsplash',
        body: requestBody,
        mediaType: 'application/json',
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/JsonService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreateJSON } from '../models/CreateJSON';
import type { JSON } from '../models/JSON';
import type { JSONGetAll } from '../models/JSONGetAll';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { UpdateJSON } from '../models/UpdateJSON';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class JsonService {
    /**
     * Returns all jsons
     * queryObj = {
         *     @param organisationId
         *     @param teamId
         *     @param spaceId
         *     @param userId ID of User to fetch
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns JSONGetAll JSON response
         * @throws ApiError
         */
        public static getAllJsoNs(queryObj?:{
            organisationId?: string,
            teamId?: string,
            spaceId?: string,
            userId?: string,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<JSONGetAll>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/json',
            query: queryObj? {
                'organisationId': queryObj.organisationId,
                'teamId': queryObj.teamId,
                'spaceId': queryObj.spaceId,
                'userId': queryObj.userId,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creates a new json
     * @param requestBody
     * @returns JSON JSON response
     * @throws ApiError
     */
    public static createJson(requestBody: CreateJSON,
): CancelablePromise<JSON> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/json',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns By Id
 * @param jsonId ID of json to fetch
 * @returns JSON JSON response
 * @throws ApiError
 */
public static getJsonById(jsonId: string,
): CancelablePromise<JSON> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/json/{jsonID}',
        path: {
            'jsonID': jsonId,
        },
    });
}
/**
 * Updates a new json
 * @param jsonId ID of json to fetch
 * @param requestBody
 * @returns JSON JSON response
 * @throws ApiError
 */
public static updateJson(jsonId: string,
requestBody: UpdateJSON,
): CancelablePromise<JSON> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/json/{jsonID}',
        path: {
            'jsonID': jsonId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a JSON
 * @param jsonId ID of json to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteJson(jsonId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/json/{jsonID}',
        path: {
            'jsonID': jsonId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/MasterFieldService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ControlType } from '../models/ControlType';
import type { CreateMasterField } from '../models/CreateMasterField';
import type { MasterField } from '../models/MasterField';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { UpdateMasterField } from '../models/UpdateMasterField';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class MasterFieldService {
    /**
     * Returns all master fields
     * queryObj = {
         *     @param organisationId
         *     @param teamId
         *     @param spaceId
         *     @param userId ID of User to fetch
         *     @param masterFieldType
         *     @param orderBy
         *     @param orderByOrder
         *     @param latestPublishedVersion
         * }
         * @returns MasterField MasterField response
         * @throws ApiError
         */
        public static getAllMasterFields(queryObj?:{
            organisationId?: string,
            teamId?: string,
            spaceId?: string,
            userId?: string,
            masterFieldType?: ControlType,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
            latestPublishedVersion?: boolean,
        },
    ): CancelablePromise<Array<MasterField>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/master-field',
            query: queryObj? {
                'organisationId': queryObj.organisationId,
                'teamId': queryObj.teamId,
                'spaceId': queryObj.spaceId,
                'userId': queryObj.userId,
                'masterFieldType': queryObj.masterFieldType,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
                'latestPublishedVersion': queryObj.latestPublishedVersion,
            }: undefined,
        });
    }
    /**
     * Creates a new master field
     * @param requestBody
     * @returns MasterField MasterField response
     * @throws ApiError
     */
    public static createMasterField(requestBody: CreateMasterField,
): CancelablePromise<MasterField> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/master-field',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns a masterField By Id
 * @param masterFieldId ID of master field to fetch
 * queryObj = {
     *     @param latestPublishedVersion
     * }
     * @returns MasterField MasterField response
     * @throws ApiError
     */
    public static getMasterFieldById(masterFieldId: string,
    queryObj?:{
        latestPublishedVersion?: boolean,
    },
): CancelablePromise<MasterField> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/master-field/{masterFieldID}',
        path: {
            'masterFieldID': masterFieldId,
        },
        query: queryObj? {
            'latestPublishedVersion': queryObj.latestPublishedVersion,
        }: undefined,
    });
}
/**
 * Updates a new json
 * @param masterFieldId ID of master field to fetch
 * @param requestBody
 * @returns MasterField MasterField response
 * @throws ApiError
 */
public static updateMasterField(masterFieldId: string,
requestBody: UpdateMasterField,
): CancelablePromise<MasterField> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/master-field/{masterFieldID}',
        path: {
            'masterFieldID': masterFieldId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a MasterField
 * @param masterFieldId ID of master field to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteMasterField(masterFieldId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/master-field/{masterFieldID}',
        path: {
            'masterFieldID': masterFieldId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/OrganisationAdminService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { Organisation } from '../models/Organisation';
import type { OrganisationAdmin } from '../models/OrganisationAdmin';
import type { UpdateOrganisationAdmin } from '../models/UpdateOrganisationAdmin';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class OrganisationAdminService {
    /**
     * Returns a OrganisationAdmin by ID
     * @param organisationId ID of Organisation to fetch
     * queryObj = {
         *     @param archive Is the get function getting archive or normal
         * }
         * @returns OrganisationAdmin OrganisationAdmin response
         * @throws ApiError
         */
        public static getOrganisationAdminById(organisationId: string,
        queryObj?:{
            archive?: boolean,
        },
    ): CancelablePromise<OrganisationAdmin> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation-admin/{organisationID}',
            path: {
                'organisationID': organisationId,
            },
            query: queryObj? {
                'archive': queryObj.archive,
            }: undefined,
        });
    }
    /**
     * Updates a organisationAdmin details
     * @param organisationId ID of Organisation to fetch
     * @param requestBody
     * @returns OrganisationAdmin updated organisationAdmin
     * @throws ApiError
     */
    public static updateOrganisationAdmin(organisationId: string,
    requestBody: UpdateOrganisationAdmin,
): CancelablePromise<OrganisationAdmin> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation-admin/{organisationID}',
        path: {
            'organisationID': organisationId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns a OrganisationAdmin by ID
 * queryObj = {
     *     @param avatarQuery
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns Organisation OrganisationAdmin response
     * @throws ApiError
     */
    public static getAllOrganisationAdmin(queryObj?:{
        avatarQuery?: boolean,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<Organisation>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation-admin',
        query: queryObj? {
            'avatarQuery': queryObj.avatarQuery,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/OrganisationGroupService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AddUserToOrganisationGroup } from '../models/AddUserToOrganisationGroup';
import type { CreateOrganisationGroup } from '../models/CreateOrganisationGroup';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { OrganisationGroup } from '../models/OrganisationGroup';
import type { OrganisationGroupAll } from '../models/OrganisationGroupAll';
import type { UpdateOrganisationGroup } from '../models/UpdateOrganisationGroup';
import type { UpdateOrganisationGroupUser } from '../models/UpdateOrganisationGroupUser';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class OrganisationGroupService {
    /**
     * Returns all organisations groups for organisation
     * @param organisationId ID of Organisation to fetch
     * queryObj = {
         *     @param archive Is the get function getting archive or normal
         *     @param startPage ID of version to get
         *     @param pageSize ID of version to get
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns OrganisationGroupAll Organisation group response
         * @throws ApiError
         */
        public static getAllOrganisationGroupsInOrganisation(organisationId: string,
        queryObj?:{
            archive?: boolean,
            startPage?: number,
            pageSize?: number,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<OrganisationGroupAll>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation/{organisationID}/organisationgroup',
            path: {
                'organisationID': organisationId,
            },
            query: queryObj? {
                'archive': queryObj.archive,
                'startPage': queryObj.startPage,
                'pageSize': queryObj.pageSize,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creates a new organisation group
     * @param organisationId ID of Organisation to fetch
     * @param requestBody
     * @returns OrganisationGroup organisationgroup response
     * @throws ApiError
     */
    public static createOrganisationGroup(organisationId: string,
    requestBody: CreateOrganisationGroup,
): CancelablePromise<OrganisationGroup> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/organisationgroup',
        path: {
            'organisationID': organisationId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns post by Id
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns OrganisationGroup Post response
     * @throws ApiError
     */
    public static getOrganisationGroupById(organisationId: string,
    organisationGroupId: string,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<OrganisationGroup> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Updates a organisation group
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * @param requestBody
 * @returns OrganisationGroup organisationgroup response
 * @throws ApiError
 */
public static updateOrganisationGroup(organisationId: string,
organisationGroupId: string,
requestBody: UpdateOrganisationGroup,
): CancelablePromise<OrganisationGroup> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a organisation group
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteOrganisationGroup(organisationId: string,
organisationGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
        },
    });
}
/**
 * Add user to a organisation group
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * @param requestBody
 * @returns OrganisationGroup organisationgroup response
 * @throws ApiError
 */
public static addUserToOrganisationGroup(organisationId: string,
organisationGroupId: string,
requestBody: AddUserToOrganisationGroup,
): CancelablePromise<OrganisationGroup> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}/user',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Add user to a organisation group
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * @param userId ID of User to fetch
 * @param requestBody
 * @returns OrganisationGroup organisationgroup response
 * @throws ApiError
 */
public static updateOrganisationGroupUser(organisationId: string,
organisationGroupId: string,
userId: string,
requestBody: UpdateOrganisationGroupUser,
): CancelablePromise<OrganisationGroup> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
            'userID': userId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Add user to a organisation group
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * @param userId ID of User to fetch
 * @returns OrganisationGroup organisationgroup response
 * @throws ApiError
 */
public static deleteOrganisationGroupUser(organisationId: string,
organisationGroupId: string,
userId: string,
): CancelablePromise<OrganisationGroup> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
            'userID': userId,
        },
    });
}
/**
 * Returns all organisations groups for a user
 * @param userId ID of User to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     *     @param startPage ID of version to get
     *     @param pageSize ID of version to get
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns OrganisationGroupAll Organisation group response
     * @throws ApiError
     */
    public static getAllOrganisationGroupsForUser(userId: string,
    queryObj?:{
        archive?: boolean,
        startPage?: number,
        pageSize?: number,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<OrganisationGroupAll>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/user/{userID}/organisationgroup',
        path: {
            'userID': userId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
            'startPage': queryObj.startPage,
            'pageSize': queryObj.pageSize,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
/**
 * Archives a organisation group
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * @returns void
 * @throws ApiError
 */
public static archiveOrganisationGroup(organisationId: string,
organisationGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}/archive',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
        },
    });
}
/**
 * Restores a organisation group
 * @param organisationId ID of Organisation to fetch
 * @param organisationGroupId ID of Organisation to fetch
 * @returns void
 * @throws ApiError
 */
public static restoreOrganisationGroup(organisationId: string,
organisationGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/organisationgroup/{organisationGroupID}/restore',
        path: {
            'organisationID': organisationId,
            'organisationGroupID': organisationGroupId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/OrganisationService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AvatarUrl } from '../models/AvatarUrl';
import type { CreateOrganisation } from '../models/CreateOrganisation';
import type { CreateOrganisationUserRequest } from '../models/CreateOrganisationUserRequest';
import type { EntityMetrics } from '../models/EntityMetrics';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { Organisation } from '../models/Organisation';
import type { UpdateOrganisation } from '../models/UpdateOrganisation';
import type { userWithPermission } from '../models/userWithPermission';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class OrganisationService {
    /**
     * Returns a Organisation by ID
     * queryObj = {
         *     @param avatarQuery
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns Organisation Organisation response
         * @throws ApiError
         */
        public static getAllOrganisations(queryObj?:{
            avatarQuery?: boolean,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<Organisation>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation',
            query: queryObj? {
                'avatarQuery': queryObj.avatarQuery,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creats a new a new organisation
     * @param requestBody
     * @returns Organisation organisation response
     * @throws ApiError
     */
    public static createOrganisation(requestBody: CreateOrganisation,
): CancelablePromise<Organisation> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns a Organisation by ID
 * @param organisationId ID of Organisation to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns Organisation organisation response
     * @throws ApiError
     */
    public static getOrganisationById(organisationId: string,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<Organisation> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}',
        path: {
            'organisationID': organisationId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Updates a organisation details
 * @param organisationId ID of Organisation to fetch
 * @param requestBody
 * @returns AvatarUrl updated organisation
 * @throws ApiError
 */
public static updateOrganisation(organisationId: string,
requestBody: UpdateOrganisation,
): CancelablePromise<AvatarUrl> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}',
        path: {
            'organisationID': organisationId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a organisation
 * @param organisationId ID of Organisation to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteOrganisation(organisationId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}',
        path: {
            'organisationID': organisationId,
        },
    });
}
/**
 * Returns a Organisation by ID
 * @param organisationId ID of Organisation to fetch
 * @returns string Asset response
 * @throws ApiError
 */
public static getOrganisationAvatarById(organisationId: string,
): CancelablePromise<string> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/avatar',
        path: {
            'organisationID': organisationId,
        },
    });
}
/**
 * Returns all users for an organisation
 * @param organisationId ID of Organisation to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     *     @param startPage ID of version to get
     *     @param pageSize ID of version to get
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns userWithPermission User response
     * @throws ApiError
     */
    public static getAllUsersInOrganisation(organisationId: string,
    queryObj?:{
        archive?: boolean,
        startPage?: number,
        pageSize?: number,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<userWithPermission>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/user',
        path: {
            'organisationID': organisationId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
            'startPage': queryObj.startPage,
            'pageSize': queryObj.pageSize,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
/**
 * Adds a user to the organisation
 * @param organisationId ID of Organisation to fetch
 * @param requestBody
 * @returns void
 * @throws ApiError
 */
public static createOrganisationUser(organisationId: string,
requestBody: CreateOrganisationUserRequest,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/user',
        path: {
            'organisationID': organisationId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a user to the organisation
 * @param organisationId ID of Organisation to fetch
 * @param userId ID of User to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteOrganisationUser(organisationId: string,
userId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'userID': userId,
        },
    });
}
/**
 * Archives a organisation
 * @param organisationId ID of Organisation to fetch
 * @returns void
 * @throws ApiError
 */
public static archiveOrganisation(organisationId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/archive',
        path: {
            'organisationID': organisationId,
        },
    });
}
/**
 * Restores a organisation
 * @param organisationId ID of Organisation to fetch
 * @returns void
 * @throws ApiError
 */
public static restoreOrganisation(organisationId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/restore',
        path: {
            'organisationID': organisationId,
        },
    });
}
/**
 * Returns an Organisation's Metrics
 * @param organisationId ID of Organisation to fetch
 * queryObj = {
     *     @param startTime Start time of the metrics, in ISO 8601 format
     *     @param endTime end time of the metrics, in ISO 8601 format
     *     @param forceUpdate Force update of the metrics
     *     @param details Get the details for an entity's metrics
     *     @param teamId
     *     @param spaceId
     *     @param userId ID of User to fetch
     *     @param templateId
     *     @param postId
     * }
     * @returns EntityMetrics organisation metrics response
     * @throws ApiError
     */
    public static getOrganisationMetrics(organisationId: string,
    queryObj?:{
        startTime?: string,
        endTime?: string,
        forceUpdate?: boolean,
        details?: 'postDownloads' | 'postCreations' | 'templateCreations' | 'templatePublications',
        teamId?: string,
        spaceId?: string,
        userId?: string,
        templateId?: string,
        postId?: string,
    },
): CancelablePromise<EntityMetrics> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/metrics',
        path: {
            'organisationID': organisationId,
        },
        query: queryObj? {
            'startTime': queryObj.startTime,
            'endTime': queryObj.endTime,
            'forceUpdate': queryObj.forceUpdate,
            'details': queryObj.details,
            'teamId': queryObj.teamId,
            'spaceId': queryObj.spaceId,
            'userId': queryObj.userId,
            'templateId': queryObj.templateId,
            'postId': queryObj.postId,
        }: undefined,
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/PermissionsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { Permission } from '../models/Permission';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class PermissionsService {
    /**
     * Gets a users permissions
     * queryObj = {
         *     @param userId ID of User to fetch
         * }
         * @returns Permission Users Permissions
         * @throws ApiError
         */
        public static getUsersPermissions(queryObj?:{
            userId?: string,
        },
    ): CancelablePromise<Permission> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/permissions',
            query: queryObj? {
                'userId': queryObj.userId,
            }: undefined,
        });
    }
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/PostService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreatePost } from '../models/CreatePost';
import type { GetAllPostResponse } from '../models/GetAllPostResponse';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { Post } from '../models/Post';
import type { UpdatePost } from '../models/UpdatePost';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class PostService {
    /**
     * Returns post by Id
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * @param spaceId ID of Space to fetch
     * @param postId ID of template to fetch
     * queryObj = {
         *     @param archive Is the get function getting archive or normal
         * }
         * @returns Post Post response
         * @throws ApiError
         */
        public static getPostById(organisationId: string,
        teamId: string,
        spaceId: string,
        postId: string,
        queryObj?:{
            archive?: boolean,
        },
    ): CancelablePromise<Post> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post/{postID}',
            path: {
                'organisationID': organisationId,
                'teamID': teamId,
                'spaceID': spaceId,
                'postID': postId,
            },
            query: queryObj? {
                'archive': queryObj.archive,
            }: undefined,
        });
    }
    /**
     * Updates a new post
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * @param spaceId ID of Space to fetch
     * @param postId ID of template to fetch
     * @param requestBody
     * queryObj = {
         *     @param download if the post is being updated to then be downloaded
         * }
         * @returns Post Post response
         * @throws ApiError
         */
        public static updatePost(organisationId: string,
        teamId: string,
        spaceId: string,
        postId: string,
        requestBody: UpdatePost,
        queryObj?:{
            download?: boolean,
        },
    ): CancelablePromise<Post> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post/{postID}',
            path: {
                'organisationID': organisationId,
                'teamID': teamId,
                'spaceID': spaceId,
                'postID': postId,
            },
            query: queryObj? {
                'download': queryObj.download,
            }: undefined,
            body: requestBody,
            mediaType: 'application/json',
        });
    }
    /**
     * Deletes a Post
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * @param spaceId ID of Space to fetch
     * @param postId ID of template to fetch
     * @returns void
     * @throws ApiError
     */
    public static deletePost(organisationId: string,
    teamId: string,
    spaceId: string,
    postId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post/{postID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
            'postID': postId,
        },
    });
}
/**
 * Returns post by Id
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @param postId ID of template to fetch
 * @returns string Asset response
 * @throws ApiError
 */
public static getPostThumbnailById(organisationId: string,
teamId: string,
spaceId: string,
postId: string,
): CancelablePromise<string> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post/{postID}/thumbnail',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
            'postID': postId,
        },
    });
}
/**
 * Restores a new post
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @param postId ID of template to fetch
 * @returns void
 * @throws ApiError
 */
public static restorePost(organisationId: string,
teamId: string,
spaceId: string,
postId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post/{postID}/restore',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
            'postID': postId,
        },
    });
}
/**
 * Archives a Post
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @param postId ID of template to fetch
 * @returns void
 * @throws ApiError
 */
public static archivePost(organisationId: string,
teamId: string,
spaceId: string,
postId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post/{postID}/archive',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
            'postID': postId,
        },
    });
}
/**
 * Creates a image for a post.
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @param postId ID of template to fetch
 * @param variationId Name of the variation
 * @returns string 302 leading to a redirect to the image
 * @throws ApiError
 */
public static createImageForPostById(organisationId: string,
teamId: string,
spaceId: string,
postId: string,
variationId: string,
): CancelablePromise<string> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post/{postID}/variationId/{variationID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
            'postID': postId,
            'variationID': variationId,
        },
    });
}
/**
 * Creates a new post
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @param requestBody
 * @returns Post Post response
 * @throws ApiError
 */
public static createPost(organisationId: string,
teamId: string,
spaceId: string,
requestBody: CreatePost,
): CancelablePromise<Post> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/post',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns all posts
 * queryObj = {
     *     @param organisationId
     *     @param teamId
     *     @param spaceId
     *     @param templateId
     *     @param published if the post is published or not
     *     @param archive Is the get function getting archive or normal
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns GetAllPostResponse Post response
     * @throws ApiError
     */
    public static getAllPosts(queryObj?:{
        organisationId?: string,
        teamId?: string,
        spaceId?: string,
        templateId?: string,
        published?: boolean,
        archive?: boolean,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<GetAllPostResponse>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/post',
        query: queryObj? {
            'organisationId': queryObj.organisationId,
            'teamId': queryObj.teamId,
            'spaceId': queryObj.spaceId,
            'templateId': queryObj.templateId,
            'published': queryObj.published,
            'archive': queryObj.archive,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/SpaceGroupService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AddSpaceToSpaceGroup } from '../models/AddSpaceToSpaceGroup';
import type { AddUserToSpaceGroup } from '../models/AddUserToSpaceGroup';
import type { CreateSpaceGroup } from '../models/CreateSpaceGroup';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { SpaceGroup } from '../models/SpaceGroup';
import type { SpaceGroupAll } from '../models/SpaceGroupAll';
import type { UpdateSpaceGroup } from '../models/UpdateSpaceGroup';
import type { UpdateSpaceGroupUser } from '../models/UpdateSpaceGroupUser';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class SpaceGroupService {
    /**
     * Returns all teams groups for team
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * queryObj = {
         *     @param archive Is the get function getting archive or normal
         *     @param startPage ID of version to get
         *     @param pageSize ID of version to get
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns SpaceGroupAll Team group response
         * @throws ApiError
         */
        public static getAllSpaceGroupsInTeam(organisationId: string,
        teamId: string,
        queryObj?:{
            archive?: boolean,
            startPage?: number,
            pageSize?: number,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<SpaceGroupAll>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation/{organisationID}/team/{teamID}/spacegroup',
            path: {
                'organisationID': organisationId,
                'teamID': teamId,
            },
            query: queryObj? {
                'archive': queryObj.archive,
                'startPage': queryObj.startPage,
                'pageSize': queryObj.pageSize,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creates a new team group
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * @param requestBody
     * @returns SpaceGroup spacegroup response
     * @throws ApiError
     */
    public static createSpaceGroup(organisationId: string,
    teamId: string,
    requestBody: CreateSpaceGroup,
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns post by Id
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns SpaceGroup Post response
     * @throws ApiError
     */
    public static getSpaceGroupById(organisationId: string,
    teamId: string,
    spaceGroupId: string,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Updates a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @param requestBody
 * @returns SpaceGroup spacegroup response
 * @throws ApiError
 */
public static updateSpaceGroup(organisationId: string,
teamId: string,
spaceGroupId: string,
requestBody: UpdateSpaceGroup,
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteSpaceGroup(organisationId: string,
teamId: string,
spaceGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
        },
    });
}
/**
 * Archives a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @returns void
 * @throws ApiError
 */
public static archiveSpaceGroup(organisationId: string,
teamId: string,
spaceGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}/archive',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
        },
    });
}
/**
 * Restores a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @returns void
 * @throws ApiError
 */
public static restoreSpaceGroup(organisationId: string,
teamId: string,
spaceGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}/restore',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
        },
    });
}
/**
 * Add user to a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @param requestBody
 * @returns SpaceGroup spacegroup response
 * @throws ApiError
 */
public static addUserToSpaceGroup(organisationId: string,
teamId: string,
spaceGroupId: string,
requestBody: AddUserToSpaceGroup,
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}/user',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Add user to a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @param userId ID of User to fetch
 * @param requestBody
 * @returns SpaceGroup spacegroup response
 * @throws ApiError
 */
public static updateSpaceGroupUser(organisationId: string,
teamId: string,
spaceGroupId: string,
userId: string,
requestBody: UpdateSpaceGroupUser,
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
            'userID': userId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * deletes user from team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @param userId ID of User to fetch
 * @returns SpaceGroup spacegroup response
 * @throws ApiError
 */
public static deleteSpaceGroupUser(organisationId: string,
teamId: string,
spaceGroupId: string,
userId: string,
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
            'userID': userId,
        },
    });
}
/**
 * Add space to a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @param requestBody
 * @returns SpaceGroup spacegroup response
 * @throws ApiError
 */
public static addSpaceToSpaceGroup(organisationId: string,
teamId: string,
spaceGroupId: string,
requestBody: AddSpaceToSpaceGroup,
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}/space',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a space from a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceGroupId ID of space group to fetch
 * @param spaceId ID of Space to fetch
 * @returns SpaceGroup spacegroup response
 * @throws ApiError
 */
public static deleteSpaceGroupSpace(organisationId: string,
teamId: string,
spaceGroupId: string,
spaceId: string,
): CancelablePromise<SpaceGroup> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/spacegroup/{spaceGroupID}/space/{spaceID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceGroupID': spaceGroupId,
            'spaceID': spaceId,
        },
    });
}
/**
 * Returns all teams groups for a user
 * @param userId ID of User to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     *     @param startPage ID of version to get
     *     @param pageSize ID of version to get
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns SpaceGroupAll Team group response
     * @throws ApiError
     */
    public static getAllSpaceGroupsForUser(userId: string,
    queryObj?:{
        archive?: boolean,
        startPage?: number,
        pageSize?: number,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<SpaceGroupAll>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/user/{userID}/spacegroup',
        path: {
            'userID': userId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
            'startPage': queryObj.startPage,
            'pageSize': queryObj.pageSize,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/SpaceService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreateSpace } from '../models/CreateSpace';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { Space } from '../models/Space';
import type { UpdateSpace } from '../models/UpdateSpace';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class SpaceService {
    /**
     * Returns all spaces
     *  A Admin user can call getAll without query parameters.  However it will need to be called with the team query param for most people.
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * queryObj = {
         *     @param archive Is the get function getting archive or normal
         *     @param startPage ID of version to get
         *     @param pageSize ID of version to get
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns Space Space response
         * @throws ApiError
         */
        public static getAllSpacesInTeam(organisationId: string,
        teamId: string,
        queryObj?:{
            archive?: boolean,
            startPage?: number,
            pageSize?: number,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<Space>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation/{organisationID}/team/{teamID}/space',
            path: {
                'organisationID': organisationId,
                'teamID': teamId,
            },
            query: queryObj? {
                'archive': queryObj.archive,
                'startPage': queryObj.startPage,
                'pageSize': queryObj.pageSize,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creates a new space
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * @param requestBody
     * @returns Space Space response
     * @throws ApiError
     */
    public static createSpace(organisationId: string,
    teamId: string,
    requestBody: CreateSpace,
): CancelablePromise<Space> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/space',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns space by Id
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns Space Space response
     * @throws ApiError
     */
    public static getSpaceById(organisationId: string,
    teamId: string,
    spaceId: string,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<Space> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Updates a  space
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @param requestBody
 * @returns Space Space response
 * @throws ApiError
 */
public static updateSpace(organisationId: string,
teamId: string,
spaceId: string,
requestBody: UpdateSpace,
): CancelablePromise<Space> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a Space
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteSpace(organisationId: string,
teamId: string,
spaceId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
        },
    });
}
/**
 * Archives a Space
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @returns void
 * @throws ApiError
 */
public static archiveSpace(organisationId: string,
teamId: string,
spaceId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/archive',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
        },
    });
}
/**
 * Restores a Space
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param spaceId ID of Space to fetch
 * @returns void
 * @throws ApiError
 */
public static restoreSpace(organisationId: string,
teamId: string,
spaceId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/space/{spaceID}/restore',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'spaceID': spaceId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/TeamGroupService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AddUserToTeamGroup } from '../models/AddUserToTeamGroup';
import type { CreateTeamGroup } from '../models/CreateTeamGroup';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { TeamGroup } from '../models/TeamGroup';
import type { TeamGroupAll } from '../models/TeamGroupAll';
import type { UpdateTeamGroup } from '../models/UpdateTeamGroup';
import type { UpdateTeamGroupUser } from '../models/UpdateTeamGroupUser';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class TeamGroupService {
    /**
     * Returns all teams groups for team
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * queryObj = {
         *     @param archive Is the get function getting archive or normal
         *     @param startPage ID of version to get
         *     @param pageSize ID of version to get
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns TeamGroupAll Team group response
         * @throws ApiError
         */
        public static getAllTeamGroupsInTeam(organisationId: string,
        teamId: string,
        queryObj?:{
            archive?: boolean,
            startPage?: number,
            pageSize?: number,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<TeamGroupAll>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation/{organisationID}/team/{teamID}/teamgroup',
            path: {
                'organisationID': organisationId,
                'teamID': teamId,
            },
            query: queryObj? {
                'archive': queryObj.archive,
                'startPage': queryObj.startPage,
                'pageSize': queryObj.pageSize,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creates a new team group
     * @param organisationId ID of Organisation to fetch
     * @param teamId ID of Team to fetch
     * @param requestBody
     * @returns TeamGroup teamgroup response
     * @throws ApiError
     */
    public static createTeamGroup(organisationId: string,
    teamId: string,
    requestBody: CreateTeamGroup,
): CancelablePromise<TeamGroup> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns post by Id
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns TeamGroup Post response
     * @throws ApiError
     */
    public static getTeamGroupById(organisationId: string,
    teamId: string,
    teamGroupId: string,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<TeamGroup> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Updates a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * @param requestBody
 * @returns TeamGroup teamgroup response
 * @throws ApiError
 */
public static updateTeamGroup(organisationId: string,
teamId: string,
teamGroupId: string,
requestBody: UpdateTeamGroup,
): CancelablePromise<TeamGroup> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteTeamGroup(organisationId: string,
teamId: string,
teamGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
        },
    });
}
/**
 * Add user to a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * @param requestBody
 * @returns TeamGroup teamgroup response
 * @throws ApiError
 */
public static addUserToTeamGroup(organisationId: string,
teamId: string,
teamGroupId: string,
requestBody: AddUserToTeamGroup,
): CancelablePromise<TeamGroup> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}/user',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Archives a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * @returns void
 * @throws ApiError
 */
public static archiveTeamGroup(organisationId: string,
teamId: string,
teamGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}/archive',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
        },
    });
}
/**
 * Restores a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * @returns void
 * @throws ApiError
 */
public static restoreTeamGroup(organisationId: string,
teamId: string,
teamGroupId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}/restore',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
        },
    });
}
/**
 * Add user to a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * @param userId ID of User to fetch
 * @param requestBody
 * @returns TeamGroup teamgroup response
 * @throws ApiError
 */
public static updateTeamGroupUser(organisationId: string,
teamId: string,
teamGroupId: string,
userId: string,
requestBody: UpdateTeamGroupUser,
): CancelablePromise<TeamGroup> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
            'userID': userId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Add user to a team group
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param teamGroupId ID of Team to fetch
 * @param userId ID of User to fetch
 * @returns TeamGroup teamgroup response
 * @throws ApiError
 */
public static deleteTeamGroupUser(organisationId: string,
teamId: string,
teamGroupId: string,
userId: string,
): CancelablePromise<TeamGroup> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/teamgroup/{teamGroupID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'teamGroupID': teamGroupId,
            'userID': userId,
        },
    });
}
/**
 * Returns all teams groups for a user
 * @param userId ID of User to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     *     @param startPage ID of version to get
     *     @param pageSize ID of version to get
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns TeamGroupAll Team group response
     * @throws ApiError
     */
    public static getAllTeamGroupsForUser(userId: string,
    queryObj?:{
        archive?: boolean,
        startPage?: number,
        pageSize?: number,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<TeamGroupAll>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/user/{userID}/teamgroup',
        path: {
            'userID': userId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
            'startPage': queryObj.startPage,
            'pageSize': queryObj.pageSize,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/TeamService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AvatarUrl } from '../models/AvatarUrl';
import type { CreateTeam } from '../models/CreateTeam';
import type { CreateTeamUserRequest } from '../models/CreateTeamUserRequest';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { Team } from '../models/Team';
import type { UpdateTeam } from '../models/UpdateTeam';
import type { userWithPermission } from '../models/userWithPermission';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class TeamService {
    /**
     * Returns all teams
     * @param organisationId ID of Organisation to fetch
     * queryObj = {
         *     @param archive Is the get function getting archive or normal
         *     @param startPage ID of version to get
         *     @param pageSize ID of version to get
         *     @param avatarQuery
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns Team Team response
         * @throws ApiError
         */
        public static getAllTeamsInOrganisation(organisationId: string,
        queryObj?:{
            archive?: boolean,
            startPage?: number,
            pageSize?: number,
            avatarQuery?: boolean,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<Team>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/organisation/{organisationID}/team',
            path: {
                'organisationID': organisationId,
            },
            query: queryObj? {
                'archive': queryObj.archive,
                'startPage': queryObj.startPage,
                'pageSize': queryObj.pageSize,
                'avatarQuery': queryObj.avatarQuery,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creats a new a new team
     * @param organisationId ID of Organisation to fetch
     * @param requestBody
     * @returns Team team response
     * @throws ApiError
     */
    public static createTeam(organisationId: string,
    requestBody: CreateTeam,
): CancelablePromise<Team> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team',
        path: {
            'organisationID': organisationId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns a Team by ID
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns Team team response
     * @throws ApiError
     */
    public static getTeamById(organisationId: string,
    teamId: string,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<Team> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Updates a team details
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param requestBody
 * @returns AvatarUrl Avatar URL to upload directly to S3
 * @throws ApiError
 */
public static updateTeam(organisationId: string,
teamId: string,
requestBody: UpdateTeam,
): CancelablePromise<AvatarUrl> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a team
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteTeam(organisationId: string,
teamId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
    });
}
/**
 * Returns a Team by ID
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @returns string Asset response
 * @throws ApiError
 */
public static getTeamAvatarById(organisationId: string,
teamId: string,
): CancelablePromise<string> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}/avatar',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
    });
}
/**
 * Returns all users for an organisation
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     *     @param startPage ID of version to get
     *     @param pageSize ID of version to get
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns userWithPermission User response
     * @throws ApiError
     */
    public static getAllUsersInTeam(organisationId: string,
    teamId: string,
    queryObj?:{
        archive?: boolean,
        startPage?: number,
        pageSize?: number,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<userWithPermission>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/organisation/{organisationID}/team/{teamID}/user',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
            'startPage': queryObj.startPage,
            'pageSize': queryObj.pageSize,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
/**
 * Adds a user to the team
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param requestBody
 * @returns void
 * @throws ApiError
 */
public static createTeamUser(organisationId: string,
teamId: string,
requestBody: CreateTeamUserRequest,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/organisation/{organisationID}/team/{teamID}/user',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a user from a team
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @param userId ID of User to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteTeamUser(organisationId: string,
teamId: string,
userId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/organisation/{organisationID}/team/{teamID}/user/{userID}',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
            'userID': userId,
        },
    });
}
/**
 * Archives a team
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @returns void
 * @throws ApiError
 */
public static archiveTeam(organisationId: string,
teamId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/archive',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
    });
}
/**
 * Restores a team
 * @param organisationId ID of Organisation to fetch
 * @param teamId ID of Team to fetch
 * @returns void
 * @throws ApiError
 */
public static restoreTeam(organisationId: string,
teamId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/organisation/{organisationID}/team/{teamID}/restore',
        path: {
            'organisationID': organisationId,
            'teamID': teamId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/TemplateService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CreateTemplate } from '../models/CreateTemplate';
import type { OrderByOrderQueryParamSchema } from '../models/OrderByOrderQueryParamSchema';
import type { OrderByQueryParamSchema } from '../models/OrderByQueryParamSchema';
import type { Template } from '../models/Template';
import type { TemplateGetAll } from '../models/TemplateGetAll';
import type { UpdateTemplate } from '../models/UpdateTemplate';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class TemplateService {
    /**
     * Returns all templates
     * queryObj = {
         *     @param organisationId
         *     @param teamId
         *     @param spaceId
         *     @param userId ID of User to fetch
         *     @param latestPublishedVersion
         *     @param archive Is the get function getting archive or normal
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns TemplateGetAll Template response
         * @throws ApiError
         */
        public static getAllTemplates(queryObj?:{
            organisationId?: string,
            teamId?: string,
            spaceId?: string,
            userId?: string,
            latestPublishedVersion?: boolean,
            archive?: boolean,
            orderBy?: OrderByQueryParamSchema,
            orderByOrder?: OrderByOrderQueryParamSchema,
        },
    ): CancelablePromise<Array<TemplateGetAll>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/template',
            query: queryObj? {
                'organisationId': queryObj.organisationId,
                'teamId': queryObj.teamId,
                'spaceId': queryObj.spaceId,
                'userId': queryObj.userId,
                'latestPublishedVersion': queryObj.latestPublishedVersion,
                'archive': queryObj.archive,
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
    /**
     * Creates a new template
     * @param requestBody
     * @returns Template Template response
     * @throws ApiError
     */
    public static createTemplate(requestBody: CreateTemplate,
): CancelablePromise<Template> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/template',
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Returns template by Id
 * @param templateId
 * @returns string Asset response
 * @throws ApiError
 */
public static getTemplateThumbnailById(templateId: string,
): CancelablePromise<string> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/template/{templateID}/thumbnail',
        path: {
            'templateID': templateId,
        },
    });
}
/**
 * Returns template by Id
 * @param templateId
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns Template Template response
     * @throws ApiError
     */
    public static getTemplateById(templateId: string,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<Template> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/template/{templateID}',
        path: {
            'templateID': templateId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Updates a new template
 * @param templateId
 * @param requestBody
 * @returns Template Template response
 * @throws ApiError
 */
public static updateTemplate(templateId: string,
requestBody: UpdateTemplate,
): CancelablePromise<Template> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/template/{templateID}',
        path: {
            'templateID': templateId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a Template
 * @param templateId
 * @returns void
 * @throws ApiError
 */
public static deleteTemplate(templateId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/template/{templateID}',
        path: {
            'templateID': templateId,
        },
    });
}
/**
 * Restores a new Template
 * @param templateId
 * @returns void
 * @throws ApiError
 */
public static restoreTemplate(templateId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/template/{templateID}/restore',
        path: {
            'templateID': templateId,
        },
    });
}
/**
 * Archive a new Template
 * @param templateId
 * @returns void
 * @throws ApiError
 */
public static archiveTemplate(templateId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/template/{templateID}/archive',
        path: {
            'templateID': templateId,
        },
    });
}
/**
 * Returns all templates
 * @param templateId
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     *     @param orderBy
     *     @param orderByOrder
     * }
     * @returns TemplateGetAll Template response
     * @throws ApiError
     */
    public static getAllTemplateVersions(templateId: string,
    queryObj?:{
        archive?: boolean,
        orderBy?: OrderByQueryParamSchema,
        orderByOrder?: OrderByOrderQueryParamSchema,
    },
): CancelablePromise<Array<TemplateGetAll>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/template/{templateID}/version',
        path: {
            'templateID': templateId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
            'orderBy': queryObj.orderBy,
            'orderByOrder': queryObj.orderByOrder,
        }: undefined,
    });
}
/**
 * Returns template by Id by its version ID
 * @param templateId
 * @param versionId
 * queryObj = {
     *     @param archive Is the get function getting archive or normal
     * }
     * @returns Template Template response
     * @throws ApiError
     */
    public static getTemplateByIdVersion(templateId: string,
    versionId: number,
    queryObj?:{
        archive?: boolean,
    },
): CancelablePromise<Template> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/template/{templateID}/version/{versionID}',
        path: {
            'templateID': templateId,
            'versionID': versionId,
        },
        query: queryObj? {
            'archive': queryObj.archive,
        }: undefined,
    });
}
/**
 * Returns template by Id by its version ID
 * @param templateId
 * @param versionId
 * @returns void
 * @throws ApiError
 */
public static deleteTemplateVersionById(templateId: string,
versionId: number,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/template/{templateID}/version/{versionID}',
        path: {
            'templateID': templateId,
            'versionID': versionId,
        },
    });
}
/**
 * Returns the latest published version of a template
 * @param templateId
 * @returns Template Template response
 * @throws ApiError
 */
public static getLatestVersionByTemplateId(templateId: string,
): CancelablePromise<Template> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/template/{templateID}/version/latest',
        path: {
            'templateID': templateId,
        },
    });
}
}
"
`;

exports[`allOfCombined should generate: test/generated/allOfCombined/services/UserService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { AvatarUrl } from '../models/AvatarUrl';
import type { UpdateUser } from '../models/UpdateUser';
import type { User } from '../models/User';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class UserService {
    /**
     * Returns a User by ID
     * @param userId ID of User to fetch
     * @returns User user response
     * @throws ApiError
     */
    public static getUserById(userId: string,
): CancelablePromise<User> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/user/{userID}',
        path: {
            'userID': userId,
        },
    });
}
/**
 * Updates a user details
 * @param userId ID of User to fetch
 * @param requestBody
 * @returns AvatarUrl Avatar URL to upload directly to S3
 * @throws ApiError
 */
public static updateUser(userId: string,
requestBody: UpdateUser,
): CancelablePromise<AvatarUrl> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/user/{userID}',
        path: {
            'userID': userId,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * Deletes a user
 * @param userId ID of User to fetch
 * @returns void
 * @throws ApiError
 */
public static deleteUser(userId: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'DELETE',
        url: '/user/{userID}',
        path: {
            'userID': userId,
        },
    });
}
/**
 * Returns a User by ID
 * @param userId ID of User to fetch
 * @returns string Asset response
 * @throws ApiError
 */
public static getUserAvatarById(userId: string,
): CancelablePromise<string> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/user/{userID}/avatar',
        path: {
            'userID': userId,
        },
    });
}
}
"
`;

exports[`changeQueryParametersToObj should generate: test/generated/changeQueryParametersToObj/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export { DefaultService } from './services/DefaultService';
"
`;

exports[`changeQueryParametersToObj should generate: test/generated/changeQueryParametersToObj/models/orderByOrderQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum orderByOrderQuery {
    ASC = 'asc',
    DESC = 'desc',
}
"
`;

exports[`changeQueryParametersToObj should generate: test/generated/changeQueryParametersToObj/models/orderByQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum orderByQuery {
    NAME = 'name',
    CREATED_AT = 'createdAt',
    UPDATED_AT = 'updatedAt',
}
"
`;

exports[`changeQueryParametersToObj should generate: test/generated/changeQueryParametersToObj/schemas/$orderByOrderQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $orderByOrderQuery = {
    type: 'Enum',
} as const;
"
`;

exports[`changeQueryParametersToObj should generate: test/generated/changeQueryParametersToObj/schemas/$orderByQuery.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $orderByQuery = {
    type: 'Enum',
} as const;
"
`;

exports[`changeQueryParametersToObj should generate: test/generated/changeQueryParametersToObj/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DefaultService {
    /**
     * queryObj = {
         *     @param orderBy
         *     @param orderByOrder
         * }
         * @returns string Get All Things
         * @throws ApiError
         */
        public static getAllThings(queryObj?:{
            orderBy?: 'name' | 'createdAt' | 'updatedAt',
            orderByOrder?: 'asc' | 'desc',
        },
    ): CancelablePromise<Array<string>> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/thing',
            query: queryObj? {
                'orderBy': queryObj.orderBy,
                'orderByOrder': queryObj.orderByOrder,
            }: undefined,
        });
    }
}
"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type { responseObj as responseObjDto } from './models/responseObj';
export type { thingObj as thingObjDto } from './models/thingObj';
export { thingsEnum as thingsEnumDto } from './models/thingsEnum';

export { $responseObj } from './schemas/$responseObj';
export { $thingObj } from './schemas/$thingObj';
export { $thingsEnum } from './schemas/$thingsEnum';

export { DefaultService } from './services/DefaultService';
"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/models/responseObj.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { thingObj } from './thingObj';
import type { thingsEnum } from './thingsEnum';
export type responseObj = {
    control: thingsEnum.THING1;
    data: thingObj;
};

"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/models/thingObj.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type thingObj = {
    name: string;
    createdAt: string;
    updatedAt: string;
};

"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/models/thingsEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export enum thingsEnum {
    THING1 = 'thing1',
    ALSO_THING2 = 'alsoThing2',
    MEGA_THING3 = 'megaThing3',
}
"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/schemas/$responseObj.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $responseObj = {
    properties: {
        control: {
            type: 'thingsEnum.THING1',
            isRequired: true,
        },
        data: {
            type: 'thingObj',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/schemas/$thingObj.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $thingObj = {
    properties: {
        name: {
            type: 'string',
            isRequired: true,
        },
        createdAt: {
            type: 'string',
            isRequired: true,
        },
        updatedAt: {
            type: 'string',
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/schemas/$thingsEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $thingsEnum = {
    type: 'Enum',
} as const;
"
`;

exports[`constEnumValue should generate: test/generated/constEnumValue/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { responseObj } from '../models/responseObj';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DefaultService {
    /**
     * @returns responseObj Get All Things
     * @throws ApiError
     */
    public static getAllThings(): CancelablePromise<responseObj> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/thing',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/core/ApiError.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

export class ApiError extends Error {
    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;
    public readonly request: ApiRequestOptions;

    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {
        super(message);

        this.name = 'ApiError';
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/core/ApiRequestOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiRequestOptions = {
    readonly method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
    readonly url: string;
    readonly path?: Record<string, any>;
    readonly cookies?: Record<string, any>;
    readonly headers?: Record<string, any>;
    readonly query?: Record<string, any>;
    readonly formData?: Record<string, any>;
    readonly body?: any;
    readonly mediaType?: string;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
};
"
`;

exports[`v2 should generate: test/generated/v2/core/ApiResult.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiResult = {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
};
"
`;

exports[`v2 should generate: test/generated/v2/core/CancelablePromise.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export class CancelError extends Error {

    constructor(message: string) {
        super(message);
        this.name = 'CancelError';
    }

    public get isCancelled(): boolean {
        return true;
    }
}

export interface OnCancel {
    readonly isResolved: boolean;
    readonly isRejected: boolean;
    readonly isCancelled: boolean;

    (cancelHandler: () => void): void;
}

export class CancelablePromise<T> implements Promise<T> {
    #isResolved: boolean;
    #isRejected: boolean;
    #isCancelled: boolean;
    readonly #cancelHandlers: (() => void)[];
    readonly #promise: Promise<T>;
    #resolve?: (value: T | PromiseLike<T>) => void;
    #reject?: (reason?: any) => void;

    constructor(
        executor: (
            resolve: (value: T | PromiseLike<T>) => void,
            reject: (reason?: any) => void,
            onCancel: OnCancel
        ) => void
    ) {
        this.#isResolved = false;
        this.#isRejected = false;
        this.#isCancelled = false;
        this.#cancelHandlers = [];
        this.#promise = new Promise<T>((resolve, reject) => {
            this.#resolve = resolve;
            this.#reject = reject;

            const onResolve = (value: T | PromiseLike<T>): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#isResolved = true;
                if (this.#resolve) this.#resolve(value);
            };

            const onReject = (reason?: any): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#isRejected = true;
                if (this.#reject) this.#reject(reason);
            };

            const onCancel = (cancelHandler: () => void): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#cancelHandlers.push(cancelHandler);
            };

            Object.defineProperty(onCancel, 'isResolved', {
                get: (): boolean => this.#isResolved,
            });

            Object.defineProperty(onCancel, 'isRejected', {
                get: (): boolean => this.#isRejected,
            });

            Object.defineProperty(onCancel, 'isCancelled', {
                get: (): boolean => this.#isCancelled,
            });

            return executor(onResolve, onReject, onCancel as OnCancel);
        });
    }

    get [Symbol.toStringTag]() {
        return "Cancellable Promise";
    }

    public then<TResult1 = T, TResult2 = never>(
        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,
        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null
    ): Promise<TResult1 | TResult2> {
        return this.#promise.then(onFulfilled, onRejected);
    }

    public catch<TResult = never>(
        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null
    ): Promise<T | TResult> {
        return this.#promise.catch(onRejected);
    }

    public finally(onFinally?: (() => void) | null): Promise<T> {
        return this.#promise.finally(onFinally);
    }

    public cancel(): void {
        if (this.#isResolved || this.#isRejected || this.#isCancelled) {
            return;
        }
        this.#isCancelled = true;
        if (this.#cancelHandlers.length) {
            try {
                for (const cancelHandler of this.#cancelHandlers) {
                    cancelHandler();
                }
            } catch (error) {
                console.warn('Cancellation threw an error', error);
                return;
            }
        }
        this.#cancelHandlers.length = 0;
        if (this.#reject) this.#reject(new CancelError('Request aborted'));
    }

    public get isCancelled(): boolean {
        return this.#isCancelled;
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/core/OpenAPI.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export type OpenAPIConfig = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string> | undefined;
    USERNAME?: string | Resolver<string> | undefined;
    PASSWORD?: string | Resolver<string> | undefined;
    HEADERS?: Headers | Resolver<Headers> | undefined;
    ENCODE_PATH?: ((path: string) => string) | undefined;
};

export const OpenAPI: OpenAPIConfig = {
    BASE: 'http://localhost:3000/base',
    VERSION: '1.0',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
};
"
`;

exports[`v2 should generate: test/generated/v2/core/request.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';

export const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

export const isString = (value: any): value is string => {
    return typeof value === 'string';
};

export const isStringWithValue = (value: any): value is string => {
    return isString(value) && value !== '';
};

export const isBlob = (value: any): value is Blob => {
    return (
        typeof value === 'object' &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

export const isFormData = (value: any): value is FormData => {
    return value instanceof FormData;
};

export const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

export const getQueryString = (params: Record<string, any>): string => {
    const qs: string[] = [];

    const append = (key: string, value: any) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: any) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object') {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

const getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {
    const encoder = config.ENCODE_PATH || encodeURI;

    const path = options.url
        .replace('{api-version}', config.VERSION)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.BASE}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

export const getFormData = (options: ApiRequestOptions): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: any) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

export const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T>)(options);
    }
    return resolver;
};

export const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {
    const [token, username, password, additionalHeaders] = await Promise.all([
        resolve(options, config.TOKEN),
        resolve(options, config.USERNAME),
        resolve(options, config.PASSWORD),
        resolve(options, config.HEADERS),
    ]);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce((headers, [key, value]) => ({
            ...headers,
            [key]: String(value),
        }), {} as Record<string, string>);

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body !== undefined) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

export const getRequestBody = (options: ApiRequestOptions): any => {
    if (options.body !== undefined) {
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(options.body)
        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {
            return options.body;
        } else {
            return JSON.stringify(options.body);
        }
    }
    return undefined;
};

export const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers,
    onCancel: OnCancel
): Promise<Response> => {
    const controller = new AbortController();

    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
        signal: controller.signal,
    };

    if (config.WITH_CREDENTIALS) {
        request.credentials = config.CREDENTIALS;
    }

    onCancel(() => controller.abort());

    return await fetch(url, request);
};

export const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

export const getResponseBody = async (response: Response): Promise<any> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const jsonTypes = ['application/json', 'application/problem+json']
                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

export const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {
    const errors: Record<number, string> = {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Internal Server Error',
        502: 'Bad Gateway',
        503: 'Service Unavailable',
        ...options.errors,
    }

    const error = errors[result.status];
    if (error) {
        throw new ApiError(options, result, error);
    }

    if (!result.ok) {
        const errorStatus = result.status ?? 'unknown';
        const errorStatusText = result.statusText ?? 'unknown';
        const errorBody = (() => {
            try {
                return JSON.stringify(result.body, null, 2);
            } catch (e) {
                return undefined;
            }
        })();

        throw new ApiError(options, result,
            \`Generic Error: status: \${errorStatus}; status text: \${errorStatusText}; body: \${errorBody}\`
        );
    }
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {
    return new CancelablePromise(async (resolve, reject, onCancel) => {
        try {
            const url = getUrl(config, options);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = await getHeaders(config, options);

            if (!onCancel.isCancelled) {
                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);
                const responseBody = await getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);

                const result: ApiResult = {
                    url,
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader ?? responseBody,
                };

                catchErrorCodes(options, result);

                resolve(result.body);
            }
        } catch (error) {
            reject(error);
        }
    });
};
"
`;

exports[`v2 should generate: test/generated/v2/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { ApiError } from './core/ApiError';
export { CancelablePromise, CancelError } from './core/CancelablePromise';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { _default } from './models/_default';
export type { ArrayWithArray } from './models/ArrayWithArray';
export type { ArrayWithBooleans } from './models/ArrayWithBooleans';
export type { ArrayWithNumbers } from './models/ArrayWithNumbers';
export type { ArrayWithProperties } from './models/ArrayWithProperties';
export type { ArrayWithReferences } from './models/ArrayWithReferences';
export type { ArrayWithStrings } from './models/ArrayWithStrings';
export type { CommentWithBackticks } from './models/CommentWithBackticks';
export type { CommentWithBreaks } from './models/CommentWithBreaks';
export type { CommentWithExpressionPlaceholders } from './models/CommentWithExpressionPlaceholders';
export type { CommentWithQuotes } from './models/CommentWithQuotes';
export type { CommentWithReservedCharacters } from './models/CommentWithReservedCharacters';
export type { CommentWithSlashes } from './models/CommentWithSlashes';
export type { Date } from './models/Date';
export type { DictionaryWithArray } from './models/DictionaryWithArray';
export type { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
export type { DictionaryWithProperties } from './models/DictionaryWithProperties';
export type { DictionaryWithReference } from './models/DictionaryWithReference';
export type { DictionaryWithString } from './models/DictionaryWithString';
export type { EnumFromDescription } from './models/EnumFromDescription';
export { EnumWithExtensions } from './models/EnumWithExtensions';
export { EnumWithNumbers } from './models/EnumWithNumbers';
export { EnumWithStrings } from './models/EnumWithStrings';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithBoolean } from './models/ModelWithBoolean';
export type { ModelWithCircularReference } from './models/ModelWithCircularReference';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export type { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
export type { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
export { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
export type { ModelWithInteger } from './models/ModelWithInteger';
export type { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
export type { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
export type { ModelWithNullableString } from './models/ModelWithNullableString';
export type { ModelWithOrderedProperties } from './models/ModelWithOrderedProperties';
export type { ModelWithPattern } from './models/ModelWithPattern';
export type { ModelWithProperties } from './models/ModelWithProperties';
export type { ModelWithReference } from './models/ModelWithReference';
export type { ModelWithString } from './models/ModelWithString';
export type { SimpleBoolean } from './models/SimpleBoolean';
export type { SimpleFile } from './models/SimpleFile';
export type { SimpleInteger } from './models/SimpleInteger';
export type { SimpleReference } from './models/SimpleReference';
export type { SimpleString } from './models/SimpleString';
export type { SimpleStringWithPattern } from './models/SimpleStringWithPattern';

export { $_default } from './schemas/$_default';
export { $ArrayWithArray } from './schemas/$ArrayWithArray';
export { $ArrayWithBooleans } from './schemas/$ArrayWithBooleans';
export { $ArrayWithNumbers } from './schemas/$ArrayWithNumbers';
export { $ArrayWithProperties } from './schemas/$ArrayWithProperties';
export { $ArrayWithReferences } from './schemas/$ArrayWithReferences';
export { $ArrayWithStrings } from './schemas/$ArrayWithStrings';
export { $CommentWithBackticks } from './schemas/$CommentWithBackticks';
export { $CommentWithBreaks } from './schemas/$CommentWithBreaks';
export { $CommentWithExpressionPlaceholders } from './schemas/$CommentWithExpressionPlaceholders';
export { $CommentWithQuotes } from './schemas/$CommentWithQuotes';
export { $CommentWithReservedCharacters } from './schemas/$CommentWithReservedCharacters';
export { $CommentWithSlashes } from './schemas/$CommentWithSlashes';
export { $Date } from './schemas/$Date';
export { $DictionaryWithArray } from './schemas/$DictionaryWithArray';
export { $DictionaryWithDictionary } from './schemas/$DictionaryWithDictionary';
export { $DictionaryWithProperties } from './schemas/$DictionaryWithProperties';
export { $DictionaryWithReference } from './schemas/$DictionaryWithReference';
export { $DictionaryWithString } from './schemas/$DictionaryWithString';
export { $EnumFromDescription } from './schemas/$EnumFromDescription';
export { $EnumWithExtensions } from './schemas/$EnumWithExtensions';
export { $EnumWithNumbers } from './schemas/$EnumWithNumbers';
export { $EnumWithStrings } from './schemas/$EnumWithStrings';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithBoolean } from './schemas/$ModelWithBoolean';
export { $ModelWithCircularReference } from './schemas/$ModelWithCircularReference';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithDuplicateImports } from './schemas/$ModelWithDuplicateImports';
export { $ModelWithDuplicateProperties } from './schemas/$ModelWithDuplicateProperties';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithEnumFromDescription } from './schemas/$ModelWithEnumFromDescription';
export { $ModelWithInteger } from './schemas/$ModelWithInteger';
export { $ModelWithNestedEnums } from './schemas/$ModelWithNestedEnums';
export { $ModelWithNestedProperties } from './schemas/$ModelWithNestedProperties';
export { $ModelWithNullableString } from './schemas/$ModelWithNullableString';
export { $ModelWithOrderedProperties } from './schemas/$ModelWithOrderedProperties';
export { $ModelWithPattern } from './schemas/$ModelWithPattern';
export { $ModelWithProperties } from './schemas/$ModelWithProperties';
export { $ModelWithReference } from './schemas/$ModelWithReference';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $SimpleBoolean } from './schemas/$SimpleBoolean';
export { $SimpleFile } from './schemas/$SimpleFile';
export { $SimpleInteger } from './schemas/$SimpleInteger';
export { $SimpleReference } from './schemas/$SimpleReference';
export { $SimpleString } from './schemas/$SimpleString';
export { $SimpleStringWithPattern } from './schemas/$SimpleStringWithPattern';

export { CollectionFormatService } from './services/CollectionFormatService';
export { ComplexService } from './services/ComplexService';
export { DefaultService } from './services/DefaultService';
export { DefaultsService } from './services/DefaultsService';
export { DescriptionsService } from './services/DescriptionsService';
export { DuplicateService } from './services/DuplicateService';
export { ErrorService } from './services/ErrorService';
export { HeaderService } from './services/HeaderService';
export { MultipleTags1Service } from './services/MultipleTags1Service';
export { MultipleTags2Service } from './services/MultipleTags2Service';
export { MultipleTags3Service } from './services/MultipleTags3Service';
export { NoContentService } from './services/NoContentService';
export { ParametersService } from './services/ParametersService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';
"
`;

exports[`v2 should generate: test/generated/v2/models/_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type _default = {
    name?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a type-only model that defines Date as a string
 */
export type Date = string;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v2 should generate: test/generated/v2/models/DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}
"
`;

exports[`v2 should generate: test/generated/v2/models/EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\'Single Quote\\'',
    _DOUBLE_QUOTES_ = '"Double Quotes"',
}
"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtends = (ModelWithString & {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
});

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from './ModelThatExtends';
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = (ModelWithString & ModelThatExtends & {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
});

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};
export namespace ModelWithEnum {
    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }
    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }
}

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string;
        };
    };
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp: string | null;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithProperties } from './ModelWithProperties';
/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v2 should generate: test/generated/v2/models/SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\`backticks\\\` and \\\`\\\`\\\`multiple backticks\\\`\\\`\\\` should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line
    Fourth line\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\${expression} should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and "double quotes""" should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$Date.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Date = {
    type: 'string',
    description: \`This is a type-only model that defines Date as a string\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        properties: {
            propExtendsA: {
                type: 'string',
            },
            propExtendsB: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    type: 'all-of',
    description: \`This is a model that extends another model\`,
    contains: [{
        type: 'ModelWithString',
    }, {
        type: 'ModelThatExtends',
    }, {
        properties: {
            propExtendsC: {
                type: 'string',
            },
            propExtendsD: {
                type: 'ModelWithString',
            },
        },
    }],
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\d{2}-\\\\d{3}-\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: '^[a-zA-Z0-9\\']*$',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v2 should generate: test/generated/v2/services/CollectionFormatService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class CollectionFormatService {
    /**
     * @param parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @throws ApiError
     */
    public static collectionFormat(parameterArrayCsv: Array<string>,
    parameterArraySsv: Array<string>,
    parameterArrayTsv: Array<string>,
    parameterArrayPipes: Array<string>,
    parameterArrayMulti: Array<string>,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/collectionFormat',
        query: {
            'parameterArrayCSV': parameterArrayCsv,
            'parameterArraySSV': parameterArraySsv,
            'parameterArrayTSV': parameterArrayTsv,
            'parameterArrayPipes': parameterArrayPipes,
            'parameterArrayMulti': parameterArrayMulti,
        },
    });
}
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ComplexService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ComplexService {
    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(parameterObject: {
        first?: {
            second?: {
                third?: string;
            };
        };
    },
    parameterReference: ModelWithString,
): CancelablePromise<Array<ModelWithString>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/complex',
        query: {
            'parameterObject': parameterObject,
            'parameterReference': parameterReference,
        },
        errors: {
            400: \`400 server error\`,
            500: \`500 server error\`,
        },
    });
}
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultService {
    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DefaultsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultsService {
    /**
     * @param parameterString This is a simple string with default value
     * @param parameterNumber This is a simple number with default value
     * @param parameterBoolean This is a simple boolean with default value
     * @param parameterEnum This is a simple enum with default value
     * @param parameterModel This is a simple model with default value
     * @throws ApiError
     */
    public static callWithDefaultParameters(parameterString: string = 'Hello World!',
    parameterNumber: number = 123,
    parameterBoolean: boolean = true,
    parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
    parameterModel: ModelWithString = {
        "prop": "Hello World!"
    },
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterString': parameterString,
            'parameterNumber': parameterNumber,
            'parameterBoolean': parameterBoolean,
            'parameterEnum': parameterEnum,
            'parameterModel': parameterModel,
        },
    });
}
/**
 * @param parameterString This is a simple string that is optional with default value
 * @param parameterNumber This is a simple number that is optional with default value
 * @param parameterBoolean This is a simple boolean that is optional with default value
 * @param parameterEnum This is a simple enum that is optional with default value
 * @param parameterModel This is a simple model that is optional with default value
 * @throws ApiError
 */
public static callWithDefaultOptionalParameters(parameterString: string = 'Hello World!',
parameterNumber: number = 123,
parameterBoolean: boolean = true,
parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
parameterModel: ModelWithString = {
    "prop": "Hello World!"
},
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterString': parameterString,
            'parameterNumber': parameterNumber,
            'parameterBoolean': parameterBoolean,
            'parameterEnum': parameterEnum,
            'parameterModel': parameterModel,
        },
    });
}
/**
 * @param parameterStringWithNoDefault This is a string with no default
 * @param parameterOptionalStringWithDefault This is a optional string with default
 * @param parameterOptionalStringWithEmptyDefault This is a optional string with empty default
 * @param parameterOptionalStringWithNoDefault This is a optional string with no default
 * @param parameterStringWithDefault This is a string with default
 * @param parameterStringWithEmptyDefault This is a string with empty default
 * @param parameterStringNullableWithNoDefault This is a string that can be null with no default
 * @param parameterStringNullableWithDefault This is a string that can be null with default
 * @throws ApiError
 */
public static callToTestOrderOfParams(parameterStringWithNoDefault: string,
parameterOptionalStringWithDefault: string = 'Hello World!',
parameterOptionalStringWithEmptyDefault: string = '',
parameterOptionalStringWithNoDefault?: string,
parameterStringWithDefault: string = 'Hello World!',
parameterStringWithEmptyDefault: string = '',
parameterStringNullableWithNoDefault?: string | null,
parameterStringNullableWithDefault: string | null = null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
            'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
            'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
            'parameterStringWithDefault': parameterStringWithDefault,
            'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
            'parameterStringWithNoDefault': parameterStringWithNoDefault,
            'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
            'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
        },
    });
}
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DescriptionsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DescriptionsService {
    /**
     * @param parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param parameterWithBackticks Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     * @param parameterWithSlashes Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
     * @param parameterWithExpressionPlaceholders Testing expression placeholders in string: \${expression} should work
     * @param parameterWithQuotes Testing quotes in string: 'single quote''' and "double quotes""" should work
     * @param parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @throws ApiError
     */
    public static callWithDescriptions(parameterWithBreaks?: string,
    parameterWithBackticks?: string,
    parameterWithSlashes?: string,
    parameterWithExpressionPlaceholders?: string,
    parameterWithQuotes?: string,
    parameterWithReservedCharacters?: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/descriptions/',
        query: {
            'parameterWithBreaks': parameterWithBreaks,
            'parameterWithBackticks': parameterWithBackticks,
            'parameterWithSlashes': parameterWithSlashes,
            'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
            'parameterWithQuotes': parameterWithQuotes,
            'parameterWithReservedCharacters': parameterWithReservedCharacters,
        },
    });
}
}
"
`;

exports[`v2 should generate: test/generated/v2/services/DuplicateService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DuplicateService {
    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ErrorService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ErrorService {
    /**
     * @param status Status code to return
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(status: string,
): CancelablePromise<any> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/error',
        query: {
            'status': status,
        },
        errors: {
            500: \`Custom message: Internal Server Error\`,
            501: \`Custom message: Not Implemented\`,
            502: \`Custom message: Bad Gateway\`,
            503: \`Custom message: Service Unavailable\`,
        },
    });
}
}
"
`;

exports[`v2 should generate: test/generated/v2/services/HeaderService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class HeaderService {
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<string> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/MultipleTags1Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags1Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/MultipleTags2Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags2Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/MultipleTags3Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags3Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/NoContentService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class NoContentService {
    /**
     * @returns void
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ParametersService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ParametersService {
    /**
     * @param parameterHeader This is the parameter that goes into the header
     * @param parameterQuery This is the parameter that goes into the query params
     * @param parameterForm This is the parameter that goes into the form data
     * @param parameterBody This is the parameter that is sent as request body
     * @param parameterPath This is the parameter that goes into the path
     * @throws ApiError
     */
    public static callWithParameters(parameterHeader: string,
    parameterQuery: string,
    parameterForm: string,
    parameterBody: string,
    parameterPath: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameterPath}',
        path: {
            'parameterPath': parameterPath,
        },
        headers: {
            'parameterHeader': parameterHeader,
        },
        query: {
            'parameterQuery': parameterQuery,
        },
        formData: {
            'parameterForm': parameterForm,
        },
        body: parameterBody,
    });
}
/**
 * @param parameterHeader This is the parameter that goes into the request header
 * @param parameterQuery This is the parameter that goes into the request query params
 * @param parameterForm This is the parameter that goes into the request form data
 * @param parameterBody This is the parameter that is sent as request body
 * @param parameterPath1 This is the parameter that goes into the path
 * @param parameterPath2 This is the parameter that goes into the path
 * @param parameterPath3 This is the parameter that goes into the path
 * @param _default This is the parameter with a reserved keyword
 * @throws ApiError
 */
public static callWithWeirdParameterNames(parameterHeader: string,
parameterQuery: string,
parameterForm: string,
parameterBody: string,
parameterPath1?: string,
parameterPath2?: string,
parameterPath3?: string,
_default?: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        path: {
            'parameter.path.1': parameterPath1,
            'parameter-path-2': parameterPath2,
            'PARAMETER-PATH-3': parameterPath3,
        },
        headers: {
            'parameter.header': parameterHeader,
        },
        query: {
            'default': _default,
            'parameter-query': parameterQuery,
        },
        formData: {
            'parameter_form': parameterForm,
        },
        body: parameterBody,
    });
}
}
"
`;

exports[`v2 should generate: test/generated/v2/services/ResponseService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ResponseService {
    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }
    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }
    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<{
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    } | ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/SimpleService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class SimpleService {
    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}
"
`;

exports[`v2 should generate: test/generated/v2/services/TypesService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class TypesService {
    /**
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param id This is a number parameter
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public static types(parameterArray: Array<string>,
    parameterDictionary: Record<string, string>,
    parameterEnum: 'Success' | 'Warning' | 'Error',
    parameterNumber: number = 123,
    parameterString: string = 'default',
    parameterBoolean: boolean = true,
    parameterObject: any = null,
    id?: number,
): CancelablePromise<number | string | boolean | any> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/types',
        path: {
            'id': id,
        },
        query: {
            'parameterNumber': parameterNumber,
            'parameterString': parameterString,
            'parameterBoolean': parameterBoolean,
            'parameterObject': parameterObject,
            'parameterArray': parameterArray,
            'parameterDictionary': parameterDictionary,
            'parameterEnum': parameterEnum,
        },
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/core/ApiError.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';

export class ApiError extends Error {
    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;
    public readonly request: ApiRequestOptions;

    constructor(request: ApiRequestOptions, response: ApiResult, message: string) {
        super(message);

        this.name = 'ApiError';
        this.url = response.url;
        this.status = response.status;
        this.statusText = response.statusText;
        this.body = response.body;
        this.request = request;
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/core/ApiRequestOptions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiRequestOptions = {
    readonly method: 'GET' | 'PUT' | 'POST' | 'DELETE' | 'OPTIONS' | 'HEAD' | 'PATCH';
    readonly url: string;
    readonly path?: Record<string, any>;
    readonly cookies?: Record<string, any>;
    readonly headers?: Record<string, any>;
    readonly query?: Record<string, any>;
    readonly formData?: Record<string, any>;
    readonly body?: any;
    readonly mediaType?: string;
    readonly responseHeader?: string;
    readonly errors?: Record<number, string>;
};
"
`;

exports[`v3 should generate: test/generated/v3/core/ApiResult.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type ApiResult = {
    readonly url: string;
    readonly ok: boolean;
    readonly status: number;
    readonly statusText: string;
    readonly body: any;
};
"
`;

exports[`v3 should generate: test/generated/v3/core/CancelablePromise.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export class CancelError extends Error {

    constructor(message: string) {
        super(message);
        this.name = 'CancelError';
    }

    public get isCancelled(): boolean {
        return true;
    }
}

export interface OnCancel {
    readonly isResolved: boolean;
    readonly isRejected: boolean;
    readonly isCancelled: boolean;

    (cancelHandler: () => void): void;
}

export class CancelablePromise<T> implements Promise<T> {
    #isResolved: boolean;
    #isRejected: boolean;
    #isCancelled: boolean;
    readonly #cancelHandlers: (() => void)[];
    readonly #promise: Promise<T>;
    #resolve?: (value: T | PromiseLike<T>) => void;
    #reject?: (reason?: any) => void;

    constructor(
        executor: (
            resolve: (value: T | PromiseLike<T>) => void,
            reject: (reason?: any) => void,
            onCancel: OnCancel
        ) => void
    ) {
        this.#isResolved = false;
        this.#isRejected = false;
        this.#isCancelled = false;
        this.#cancelHandlers = [];
        this.#promise = new Promise<T>((resolve, reject) => {
            this.#resolve = resolve;
            this.#reject = reject;

            const onResolve = (value: T | PromiseLike<T>): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#isResolved = true;
                if (this.#resolve) this.#resolve(value);
            };

            const onReject = (reason?: any): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#isRejected = true;
                if (this.#reject) this.#reject(reason);
            };

            const onCancel = (cancelHandler: () => void): void => {
                if (this.#isResolved || this.#isRejected || this.#isCancelled) {
                    return;
                }
                this.#cancelHandlers.push(cancelHandler);
            };

            Object.defineProperty(onCancel, 'isResolved', {
                get: (): boolean => this.#isResolved,
            });

            Object.defineProperty(onCancel, 'isRejected', {
                get: (): boolean => this.#isRejected,
            });

            Object.defineProperty(onCancel, 'isCancelled', {
                get: (): boolean => this.#isCancelled,
            });

            return executor(onResolve, onReject, onCancel as OnCancel);
        });
    }

    get [Symbol.toStringTag]() {
        return "Cancellable Promise";
    }

    public then<TResult1 = T, TResult2 = never>(
        onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,
        onRejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null
    ): Promise<TResult1 | TResult2> {
        return this.#promise.then(onFulfilled, onRejected);
    }

    public catch<TResult = never>(
        onRejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null
    ): Promise<T | TResult> {
        return this.#promise.catch(onRejected);
    }

    public finally(onFinally?: (() => void) | null): Promise<T> {
        return this.#promise.finally(onFinally);
    }

    public cancel(): void {
        if (this.#isResolved || this.#isRejected || this.#isCancelled) {
            return;
        }
        this.#isCancelled = true;
        if (this.#cancelHandlers.length) {
            try {
                for (const cancelHandler of this.#cancelHandlers) {
                    cancelHandler();
                }
            } catch (error) {
                console.warn('Cancellation threw an error', error);
                return;
            }
        }
        this.#cancelHandlers.length = 0;
        if (this.#reject) this.#reject(new CancelError('Request aborted'));
    }

    public get isCancelled(): boolean {
        return this.#isCancelled;
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/core/OpenAPI.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ApiRequestOptions } from './ApiRequestOptions';

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;
type Headers = Record<string, string>;

export type OpenAPIConfig = {
    BASE: string;
    VERSION: string;
    WITH_CREDENTIALS: boolean;
    CREDENTIALS: 'include' | 'omit' | 'same-origin';
    TOKEN?: string | Resolver<string> | undefined;
    USERNAME?: string | Resolver<string> | undefined;
    PASSWORD?: string | Resolver<string> | undefined;
    HEADERS?: Headers | Resolver<Headers> | undefined;
    ENCODE_PATH?: ((path: string) => string) | undefined;
};

export const OpenAPI: OpenAPIConfig = {
    BASE: 'http://localhost:3000/base',
    VERSION: '1.0',
    WITH_CREDENTIALS: false,
    CREDENTIALS: 'include',
    TOKEN: undefined,
    USERNAME: undefined,
    PASSWORD: undefined,
    HEADERS: undefined,
    ENCODE_PATH: undefined,
};
"
`;

exports[`v3 should generate: test/generated/v3/core/request.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';

export const isDefined = <T>(value: T | null | undefined): value is Exclude<T, null | undefined> => {
    return value !== undefined && value !== null;
};

export const isString = (value: any): value is string => {
    return typeof value === 'string';
};

export const isStringWithValue = (value: any): value is string => {
    return isString(value) && value !== '';
};

export const isBlob = (value: any): value is Blob => {
    return (
        typeof value === 'object' &&
        typeof value.type === 'string' &&
        typeof value.stream === 'function' &&
        typeof value.arrayBuffer === 'function' &&
        typeof value.constructor === 'function' &&
        typeof value.constructor.name === 'string' &&
        /^(Blob|File)$/.test(value.constructor.name) &&
        /^(Blob|File)$/.test(value[Symbol.toStringTag])
    );
};

export const isFormData = (value: any): value is FormData => {
    return value instanceof FormData;
};

export const base64 = (str: string): string => {
    try {
        return btoa(str);
    } catch (err) {
        // @ts-ignore
        return Buffer.from(str).toString('base64');
    }
};

export const getQueryString = (params: Record<string, any>): string => {
    const qs: string[] = [];

    const append = (key: string, value: any) => {
        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
    };

    const process = (key: string, value: any) => {
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(v => {
                    process(key, v);
                });
            } else if (typeof value === 'object') {
                Object.entries(value).forEach(([k, v]) => {
                    process(\`\${key}[\${k}]\`, v);
                });
            } else {
                append(key, value);
            }
        }
    };

    Object.entries(params).forEach(([key, value]) => {
        process(key, value);
    });

    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }

    return '';
};

const getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {
    const encoder = config.ENCODE_PATH || encodeURI;

    const path = options.url
        .replace('{api-version}', config.VERSION)
        .replace(/{(.*?)}/g, (substring: string, group: string) => {
            if (options.path?.hasOwnProperty(group)) {
                return encoder(String(options.path[group]));
            }
            return substring;
        });

    const url = \`\${config.BASE}\${path}\`;
    if (options.query) {
        return \`\${url}\${getQueryString(options.query)}\`;
    }
    return url;
};

export const getFormData = (options: ApiRequestOptions): FormData | undefined => {
    if (options.formData) {
        const formData = new FormData();

        const process = (key: string, value: any) => {
            if (isString(value) || isBlob(value)) {
                formData.append(key, value);
            } else {
                formData.append(key, JSON.stringify(value));
            }
        };

        Object.entries(options.formData)
            .filter(([_, value]) => isDefined(value))
            .forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach(v => process(key, v));
                } else {
                    process(key, value);
                }
            });

        return formData;
    }
    return undefined;
};

type Resolver<T> = (options: ApiRequestOptions) => Promise<T>;

export const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {
    if (typeof resolver === 'function') {
        return (resolver as Resolver<T>)(options);
    }
    return resolver;
};

export const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {
    const [token, username, password, additionalHeaders] = await Promise.all([
        resolve(options, config.TOKEN),
        resolve(options, config.USERNAME),
        resolve(options, config.PASSWORD),
        resolve(options, config.HEADERS),
    ]);

    const headers = Object.entries({
        Accept: 'application/json',
        ...additionalHeaders,
        ...options.headers,
    })
        .filter(([_, value]) => isDefined(value))
        .reduce((headers, [key, value]) => ({
            ...headers,
            [key]: String(value),
        }), {} as Record<string, string>);

    if (isStringWithValue(token)) {
        headers['Authorization'] = \`Bearer \${token}\`;
    }

    if (isStringWithValue(username) && isStringWithValue(password)) {
        const credentials = base64(\`\${username}:\${password}\`);
        headers['Authorization'] = \`Basic \${credentials}\`;
    }

    if (options.body !== undefined) {
        if (options.mediaType) {
            headers['Content-Type'] = options.mediaType;
        } else if (isBlob(options.body)) {
            headers['Content-Type'] = options.body.type || 'application/octet-stream';
        } else if (isString(options.body)) {
            headers['Content-Type'] = 'text/plain';
        } else if (!isFormData(options.body)) {
            headers['Content-Type'] = 'application/json';
        }
    }

    return new Headers(headers);
};

export const getRequestBody = (options: ApiRequestOptions): any => {
    if (options.body !== undefined) {
        if (options.mediaType?.includes('/json')) {
            return JSON.stringify(options.body)
        } else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {
            return options.body;
        } else {
            return JSON.stringify(options.body);
        }
    }
    return undefined;
};

export const sendRequest = async (
    config: OpenAPIConfig,
    options: ApiRequestOptions,
    url: string,
    body: any,
    formData: FormData | undefined,
    headers: Headers,
    onCancel: OnCancel
): Promise<Response> => {
    const controller = new AbortController();

    const request: RequestInit = {
        headers,
        body: body ?? formData,
        method: options.method,
        signal: controller.signal,
    };

    if (config.WITH_CREDENTIALS) {
        request.credentials = config.CREDENTIALS;
    }

    onCancel(() => controller.abort());

    return await fetch(url, request);
};

export const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {
    if (responseHeader) {
        const content = response.headers.get(responseHeader);
        if (isString(content)) {
            return content;
        }
    }
    return undefined;
};

export const getResponseBody = async (response: Response): Promise<any> => {
    if (response.status !== 204) {
        try {
            const contentType = response.headers.get('Content-Type');
            if (contentType) {
                const jsonTypes = ['application/json', 'application/problem+json']
                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));
                if (isJSON) {
                    return await response.json();
                } else {
                    return await response.text();
                }
            }
        } catch (error) {
            console.error(error);
        }
    }
    return undefined;
};

export const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {
    const errors: Record<number, string> = {
        400: 'Bad Request',
        401: 'Unauthorized',
        403: 'Forbidden',
        404: 'Not Found',
        500: 'Internal Server Error',
        502: 'Bad Gateway',
        503: 'Service Unavailable',
        ...options.errors,
    }

    const error = errors[result.status];
    if (error) {
        throw new ApiError(options, result, error);
    }

    if (!result.ok) {
        const errorStatus = result.status ?? 'unknown';
        const errorStatusText = result.statusText ?? 'unknown';
        const errorBody = (() => {
            try {
                return JSON.stringify(result.body, null, 2);
            } catch (e) {
                return undefined;
            }
        })();

        throw new ApiError(options, result,
            \`Generic Error: status: \${errorStatus}; status text: \${errorStatusText}; body: \${errorBody}\`
        );
    }
};

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {
    return new CancelablePromise(async (resolve, reject, onCancel) => {
        try {
            const url = getUrl(config, options);
            const formData = getFormData(options);
            const body = getRequestBody(options);
            const headers = await getHeaders(config, options);

            if (!onCancel.isCancelled) {
                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);
                const responseBody = await getResponseBody(response);
                const responseHeader = getResponseHeader(response, options.responseHeader);

                const result: ApiResult = {
                    url,
                    ok: response.ok,
                    status: response.status,
                    statusText: response.statusText,
                    body: responseHeader ?? responseBody,
                };

                catchErrorCodes(options, result);

                resolve(result.body);
            }
        } catch (error) {
            reject(error);
        }
    });
};
"
`;

exports[`v3 should generate: test/generated/v3/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export { ApiError } from './core/ApiError';
export { CancelablePromise, CancelError } from './core/CancelablePromise';
export { OpenAPI } from './core/OpenAPI';
export type { OpenAPIConfig } from './core/OpenAPI';

export type { DeprecatedModel } from './models/DeprecatedModel';
export type { ModelThatExtends } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
export type { ModelWithArray } from './models/ModelWithArray';
export type { ModelWithDictionary } from './models/ModelWithDictionary';
export { ModelWithEnum } from './models/ModelWithEnum';
export type { ModelWithString } from './models/ModelWithString';
export type { Pageable } from './models/Pageable';

export { $DeprecatedModel } from './schemas/$DeprecatedModel';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $Pageable } from './schemas/$Pageable';

export { CollectionFormatService } from './services/CollectionFormatService';
export { ComplexService } from './services/ComplexService';
export { DefaultService } from './services/DefaultService';
export { DefaultsService } from './services/DefaultsService';
export { DeprecatedService } from './services/DeprecatedService';
export { DescriptionsService } from './services/DescriptionsService';
export { DuplicateService } from './services/DuplicateService';
export { ErrorService } from './services/ErrorService';
export { FormDataService } from './services/FormDataService';
export { HeaderService } from './services/HeaderService';
export { MultipartService } from './services/MultipartService';
export { MultipleTags1Service } from './services/MultipleTags1Service';
export { MultipleTags2Service } from './services/MultipleTags2Service';
export { MultipleTags3Service } from './services/MultipleTags3Service';
export { NoContentService } from './services/NoContentService';
export { ParametersService } from './services/ParametersService';
export { RequestBodyService } from './services/RequestBodyService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';
export { UploadService } from './services/UploadService';
"
`;

exports[`v3 should generate: test/generated/v3/models/_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type _default = {
    name?: string;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionBaseModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionExtendedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CompositionBaseModel } from './CompositionBaseModel';
/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = (CompositionBaseModel & {
    firstName: string;
    lastname: string;
    age: number;
});

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAllOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: {
        boolean?: boolean;
        /**
         * This is a simple enum with strings
         */
        test?: CompositionWithAllOfAndNullable.test;
        /**
         * These are the HTTP error code enums
         */
        statusCode?: CompositionWithAllOfAndNullable.statusCode;
        /**
         * Simple boolean enum
         */
        bool?: boolean;
        prop?: Array<ModelWithString>;
        propWithFile?: Array<Blob>;
        propWithNumber?: Array<number>;
        prop?: Record<string, string>;
    } | null;
};
export namespace CompositionWithAllOfAndNullable {
    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }
    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }
}

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAnyOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAnyOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithAnyOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionary = {
    propA?: (boolean | Record<string, Array<(number | string)>>);
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionary = {
    propA?: (boolean | Record<string, Array<boolean>>);
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionary = {
    propA?: (boolean | Record<string, number>);
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3 should generate: test/generated/v3/models/CompositionWithOneOfDiscriminator.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelCircle } from './ModelCircle';
import type { ModelSquare } from './ModelSquare';
/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminator = (ModelCircle | ModelSquare);

"
`;

exports[`v3 should generate: test/generated/v3/models/DeprecatedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModel = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v3 should generate: test/generated/v3/models/DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}
"
`;

exports[`v3 should generate: test/generated/v3/models/EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\'Single Quote\\'',
    _DOUBLE_QUOTES_ = '"Double Quotes"',
}
"
`;

exports[`v3 should generate: test/generated/v3/models/File.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type File = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/FreeFormObjectWithAdditionalPropertiesEqEmptyObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a free-form object with additionalProperties: {}.
 */
export type FreeFormObjectWithAdditionalPropertiesEqEmptyObject = Record<string, any>;
"
`;

exports[`v3 should generate: test/generated/v3/models/FreeFormObjectWithAdditionalPropertiesEqTrue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a free-form object with additionalProperties: true.
 */
export type FreeFormObjectWithAdditionalPropertiesEqTrue = Record<string, any>;
"
`;

exports[`v3 should generate: test/generated/v3/models/FreeFormObjectWithoutAdditionalProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a free-form object without additionalProperties.
 */
export type FreeFormObjectWithoutAdditionalProperties = Record<string, any>;
"
`;

exports[`v3 should generate: test/generated/v3/models/ModelCircle.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Circle
 */
export type ModelCircle = {
    kind: 'circle';
    radius?: number;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelSquare.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Square
 */
export type ModelSquare = {
    kind: 'square';
    sideLength?: number;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtends = {
    /**
     * This is a simple string property
     */
    prop?: string;
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = {
    /**
     * This is a simple string property
     */
    prop?: string;
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};
export namespace ModelWithEnum {
    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }
    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }
}

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string | null;
        } | null;
    } | null;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithProperties } from './ModelWithProperties';
/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/Pageable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<string>;
};

"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a reusable parameter
 */
export type SimpleParameter = string;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v3 should generate: test/generated/v3/models/SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string | null;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\`backticks\\\` and \\\`\\\`\\\`multiple backticks\\\`\\\`\\\` should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line
    Fourth line\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\${expression} should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and "double quotes""" should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionBaseModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionBaseModel = {
    description: \`This is a base model with two simple optional properties\`,
    properties: {
        firstName: {
            type: 'string',
        },
        lastname: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionExtendedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionExtendedModel = {
    type: 'all-of',
    description: \`This is a model that extends the base model\`,
    contains: [{
        type: 'CompositionBaseModel',
    }, {
        properties: {
            firstName: {
                type: 'string',
                isRequired: true,
            },
            lastname: {
                type: 'string',
                isRequired: true,
            },
            age: {
                type: 'number',
                isRequired: true,
            },
        },
    }],
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAllOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAllOfAndNullable = {
    description: \`This is a model with one property with a 'all of' relationship\`,
    properties: {
        propA: {
            properties: {
                boolean: {
                    type: 'boolean',
                },
                test: {
                    type: 'Enum',
                },
                statusCode: {
                    type: 'Enum',
                },
                bool: {
                    type: 'boolean',
                    description: \`Simple boolean enum\`,
                },
                prop: {
                    type: 'array',
                    contains: {
                        type: 'ModelWithString',
                    },
                },
                propWithFile: {
                    type: 'array',
                    contains: {
                        type: 'binary',
                    },
                },
                propWithNumber: {
                    type: 'array',
                    contains: {
                        type: 'number',
                    },
                },
                prop: {
                    type: 'dictionary',
                    contains: {
                        type: 'string',
                    },
                },
            },
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAnyOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOf = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAnyOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAndNullable = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithAnyOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAnonymous = {
    description: \`This is a model with one property with a 'any of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOf = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndComplexArrayDictionary = {
    description: \`This is a model that contains a dictionary of complex arrays (composited) within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'one-of',
                        contains: [{
                            type: 'number',
                        }, {
                            type: 'string',
                        }],
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndNullable = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleArrayDictionary = {
    description: \`This is a model that contains a dictionary of simple arrays within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'boolean',
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleDictionary = {
    description: \`This is a model that contains a simple dictionary within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'number',
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAnonymous = {
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$CompositionWithOneOfDiscriminator.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfDiscriminator = {
    type: 'one-of',
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    contains: [{
        type: 'ModelCircle',
    }, {
        type: 'ModelSquare',
    }],
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DeprecatedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DeprecatedModel = {
    description: \`This is a deprecated model with a deprecated property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a deprecated property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$File.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $File = {
    properties: {
        id: {
            type: 'string',
            isReadOnly: true,
            minLength: 1,
        },
        updated_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        created_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        mime: {
            type: 'string',
            isRequired: true,
            maxLength: 24,
            minLength: 1,
        },
        file: {
            type: 'string',
            isReadOnly: true,
            format: 'uri',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$FreeFormObjectWithAdditionalPropertiesEqEmptyObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithAdditionalPropertiesEqEmptyObject = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$FreeFormObjectWithAdditionalPropertiesEqTrue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithAdditionalPropertiesEqTrue = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$FreeFormObjectWithoutAdditionalProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithoutAdditionalProperties = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelCircle.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelCircle = {
    description: \`Circle\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        radius: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelSquare.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelSquare = {
    description: \`Square\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        sideLength: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    description: \`This is a model that extends another model\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
        propExtendsA: {
            type: 'string',
        },
        propExtendsB: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    description: \`This is a model that extends another model\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
        propExtendsC: {
            type: 'string',
        },
        propExtendsD: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                            isNullable: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                    isNullable: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
        nullableProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\d{2}-\\\\d{3}-\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: '^[a-zA-Z0-9\\']*$',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        requiredAndNullable: {
            type: 'string',
            isRequired: true,
            isNullable: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$Pageable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Pageable = {
    properties: {
        page: {
            type: 'number',
            format: 'int32',
        },
        size: {
            type: 'number',
            format: 'int32',
            minimum: 1,
        },
        sort: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleParameter = {
    type: 'string',
    description: \`This is a reusable parameter\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    isNullable: true,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v3 should generate: test/generated/v3/services/CollectionFormatService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class CollectionFormatService {
    /**
     * @param parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @throws ApiError
     */
    public static collectionFormat(parameterArrayCsv: Array<string> | null,
    parameterArraySsv: Array<string> | null,
    parameterArrayTsv: Array<string> | null,
    parameterArrayPipes: Array<string> | null,
    parameterArrayMulti: Array<string> | null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/collectionFormat',
        query: {
            'parameterArrayCSV': parameterArrayCsv,
            'parameterArraySSV': parameterArraySsv,
            'parameterArrayTSV': parameterArrayTsv,
            'parameterArrayPipes': parameterArrayPipes,
            'parameterArrayMulti': parameterArrayMulti,
        },
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ComplexService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from '../models/ModelWithArray';
import type { ModelWithDictionary } from '../models/ModelWithDictionary';
import type { ModelWithEnum } from '../models/ModelWithEnum';
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ComplexService {
    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(parameterObject: {
        first?: {
            second?: {
                third?: string;
            };
        };
    },
    parameterReference: ModelWithString,
): CancelablePromise<Array<ModelWithString>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/complex',
        query: {
            'parameterObject': parameterObject,
            'parameterReference': parameterReference,
        },
        errors: {
            400: \`400 server error\`,
            500: \`500 server error\`,
        },
    });
}
/**
 * @param id
 * @param requestBody
 * @returns ModelWithString Success
 * @throws ApiError
 */
public static complexParams(id: number,
requestBody?: {
    readonly key: string | null;
    name: string | null;
    enabled?: boolean;
    readonly type: 'Monkey' | 'Horse' | 'Bird';
    listOfModels?: Array<ModelWithString> | null;
    listOfStrings?: Array<string> | null;
    parameters: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
    readonly user?: {
        readonly id?: number;
        readonly name?: string | null;
    };
},
): CancelablePromise<ModelWithString> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/complex/{id}',
        path: {
            'id': id,
        },
        body: requestBody,
        mediaType: 'application/json-patch+json',
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultService {
    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DefaultsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultsService {
    /**
     * @param parameterString This is a simple string with default value
     * @param parameterNumber This is a simple number with default value
     * @param parameterBoolean This is a simple boolean with default value
     * @param parameterEnum This is a simple enum with default value
     * @param parameterModel This is a simple model with default value
     * @throws ApiError
     */
    public static callWithDefaultParameters(parameterString: string | null = 'Hello World!',
    parameterNumber: number | null = 123,
    parameterBoolean: boolean | null = true,
    parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
    parameterModel: ModelWithString | null = {
        "prop": "Hello World!"
    },
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterString': parameterString,
            'parameterNumber': parameterNumber,
            'parameterBoolean': parameterBoolean,
            'parameterEnum': parameterEnum,
            'parameterModel': parameterModel,
        },
    });
}
/**
 * @param parameterString This is a simple string that is optional with default value
 * @param parameterNumber This is a simple number that is optional with default value
 * @param parameterBoolean This is a simple boolean that is optional with default value
 * @param parameterEnum This is a simple enum that is optional with default value
 * @param parameterModel This is a simple model that is optional with default value
 * @throws ApiError
 */
public static callWithDefaultOptionalParameters(parameterString: string = 'Hello World!',
parameterNumber: number = 123,
parameterBoolean: boolean = true,
parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
parameterModel: ModelWithString = {
    "prop": "Hello World!"
},
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterString': parameterString,
            'parameterNumber': parameterNumber,
            'parameterBoolean': parameterBoolean,
            'parameterEnum': parameterEnum,
            'parameterModel': parameterModel,
        },
    });
}
/**
 * @param parameterStringWithNoDefault This is a string with no default
 * @param parameterOptionalStringWithDefault This is a optional string with default
 * @param parameterOptionalStringWithEmptyDefault This is a optional string with empty default
 * @param parameterOptionalStringWithNoDefault This is a optional string with no default
 * @param parameterStringWithDefault This is a string with default
 * @param parameterStringWithEmptyDefault This is a string with empty default
 * @param parameterStringNullableWithNoDefault This is a string that can be null with no default
 * @param parameterStringNullableWithDefault This is a string that can be null with default
 * @throws ApiError
 */
public static callToTestOrderOfParams(parameterStringWithNoDefault: string,
parameterOptionalStringWithDefault: string = 'Hello World!',
parameterOptionalStringWithEmptyDefault: string = '',
parameterOptionalStringWithNoDefault?: string,
parameterStringWithDefault: string = 'Hello World!',
parameterStringWithEmptyDefault: string = '',
parameterStringNullableWithNoDefault?: string | null,
parameterStringNullableWithDefault: string | null = null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
            'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
            'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
            'parameterStringWithDefault': parameterStringWithDefault,
            'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
            'parameterStringWithNoDefault': parameterStringWithNoDefault,
            'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
            'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
        },
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DeprecatedService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { DeprecatedModel } from '../models/DeprecatedModel';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DeprecatedService {
    /**
     * @deprecated
     * @param parameter This parameter is deprecated
     * @throws ApiError
     */
    public static deprecatedCall(parameter: DeprecatedModel | null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/deprecated',
        headers: {
            'parameter': parameter,
        },
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DescriptionsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DescriptionsService {
    /**
     * @param parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param parameterWithBackticks Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     * @param parameterWithSlashes Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
     * @param parameterWithExpressionPlaceholders Testing expression placeholders in string: \${expression} should work
     * @param parameterWithQuotes Testing quotes in string: 'single quote''' and "double quotes""" should work
     * @param parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @throws ApiError
     */
    public static callWithDescriptions(parameterWithBreaks?: any,
    parameterWithBackticks?: any,
    parameterWithSlashes?: any,
    parameterWithExpressionPlaceholders?: any,
    parameterWithQuotes?: any,
    parameterWithReservedCharacters?: any,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/descriptions/',
        query: {
            'parameterWithBreaks': parameterWithBreaks,
            'parameterWithBackticks': parameterWithBackticks,
            'parameterWithSlashes': parameterWithSlashes,
            'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
            'parameterWithQuotes': parameterWithQuotes,
            'parameterWithReservedCharacters': parameterWithReservedCharacters,
        },
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/DuplicateService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DuplicateService {
    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ErrorService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ErrorService {
    /**
     * @param status Status code to return
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(status: number,
): CancelablePromise<any> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/error',
        query: {
            'status': status,
        },
        errors: {
            500: \`Custom message: Internal Server Error\`,
            501: \`Custom message: Not Implemented\`,
            502: \`Custom message: Bad Gateway\`,
            503: \`Custom message: Service Unavailable\`,
        },
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/FormDataService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class FormDataService {
    /**
     * @param parameter This is a reusable parameter
     * @param formData A reusable request body
     * @throws ApiError
     */
    public static postApiFormData(parameter?: string,
    formData?: ModelWithString,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/formData/',
        query: {
            'parameter': parameter,
        },
        formData: formData,
        mediaType: 'multipart/form-data',
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/HeaderService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class HeaderService {
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<string> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipartService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipartService {
    /**
     * @param formData
     * @throws ApiError
     */
    public static multipartRequest(formData?: {
        content?: Blob;
        data?: ModelWithString | null;
    },
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/multipart',
        formData: formData,
        mediaType: 'multipart/form-data',
    });
}
/**
 * @returns any OK
 * @throws ApiError
 */
public static multipartResponse(): CancelablePromise<{
    file?: Blob;
    metadata?: {
        foo?: string;
        bar?: string;
    };
}> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/multipart',
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipleTags1Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags1Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipleTags2Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags2Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/MultipleTags3Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class MultipleTags3Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/NoContentService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class NoContentService {
    /**
     * @returns void
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ParametersService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { Pageable } from '../models/Pageable';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ParametersService {
    /**
     * @param parameterHeader This is the parameter that goes into the header
     * @param parameterQuery This is the parameter that goes into the query params
     * @param parameterForm This is the parameter that goes into the form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param parameterPath This is the parameter that goes into the path
     * @param requestBody This is the parameter that goes into the body
     * @throws ApiError
     */
    public static callWithParameters(parameterHeader: string | null,
    parameterQuery: string | null,
    parameterForm: string | null,
    parameterCookie: string | null,
    parameterPath: string | null,
    requestBody: ModelWithString | null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameterPath}',
        path: {
            'parameterPath': parameterPath,
        },
        cookies: {
            'parameterCookie': parameterCookie,
        },
        headers: {
            'parameterHeader': parameterHeader,
        },
        query: {
            'parameterQuery': parameterQuery,
        },
        formData: {
            'parameterForm': parameterForm,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * @param parameterHeader This is the parameter that goes into the request header
 * @param parameterQuery This is the parameter that goes into the request query params
 * @param parameterForm This is the parameter that goes into the request form data
 * @param parameterCookie This is the parameter that goes into the cookie
 * @param requestBody This is the parameter that goes into the body
 * @param parameterPath1 This is the parameter that goes into the path
 * @param parameterPath2 This is the parameter that goes into the path
 * @param parameterPath3 This is the parameter that goes into the path
 * @param _default This is the parameter with a reserved keyword
 * @throws ApiError
 */
public static callWithWeirdParameterNames(parameterHeader: string | null,
parameterQuery: string | null,
parameterForm: string | null,
parameterCookie: string | null,
requestBody: ModelWithString | null,
parameterPath1?: string,
parameterPath2?: string,
parameterPath3?: string,
_default?: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        path: {
            'parameter.path.1': parameterPath1,
            'parameter-path-2': parameterPath2,
            'PARAMETER-PATH-3': parameterPath3,
        },
        cookies: {
            'PARAMETER-COOKIE': parameterCookie,
        },
        headers: {
            'parameter.header': parameterHeader,
        },
        query: {
            'default': _default,
            'parameter-query': parameterQuery,
        },
        formData: {
            'parameter_form': parameterForm,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * @param requestBody This is a required parameter
 * @param parameter This is an optional parameter
 * @throws ApiError
 */
public static getCallWithOptionalParam(requestBody: ModelWithString,
parameter?: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/parameters/',
        query: {
            'parameter': parameter,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * @param parameter This is a required parameter
 * @param requestBody This is an optional parameter
 * @throws ApiError
 */
public static postCallWithOptionalParam(parameter: Pageable,
requestBody?: ModelWithString,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/',
        query: {
            'parameter': parameter,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/RequestBodyService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class RequestBodyService {
    /**
     * @param parameter This is a reusable parameter
     * @param requestBody A reusable request body
     * @throws ApiError
     */
    public static postApiRequestBody(parameter?: string,
    requestBody?: ModelWithString,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/requestBody/',
        query: {
            'parameter': parameter,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/ResponseService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class ResponseService {
    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }
    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }
    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<{
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    } | ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/SimpleService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class SimpleService {
    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}
"
`;

exports[`v3 should generate: test/generated/v3/services/TypesService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class TypesService {
    /**
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param id This is a number parameter
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public static types(parameterArray: Array<string> | null,
    parameterDictionary: Record<string, any> | null,
    parameterEnum: 'Success' | 'Warning' | 'Error' | null,
    parameterNumber: number = 123,
    parameterString: string | null = 'default',
    parameterBoolean: boolean | null = true,
    parameterObject: Record<string, any> | null = null,
    id?: number,
): CancelablePromise<number | string | boolean | Record<string, any>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/types',
        path: {
            'id': id,
        },
        query: {
            'parameterNumber': parameterNumber,
            'parameterString': parameterString,
            'parameterBoolean': parameterBoolean,
            'parameterObject': parameterObject,
            'parameterArray': parameterArray,
            'parameterDictionary': parameterDictionary,
            'parameterEnum': parameterEnum,
        },
    });
}
}
"
`;

exports[`v3 should generate: test/generated/v3/services/UploadService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../core/CancelablePromise';
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class UploadService {
    /**
     * @param file Supply a file reference for upload
     * @returns boolean
     * @throws ApiError
     */
    public static uploadFile(file: Blob,
): CancelablePromise<boolean> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/upload',
        formData: {
            'file': file,
        },
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/index.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */

export type { DeprecatedModel as DeprecatedModelDto } from './models/DeprecatedModel';
export type { ModelThatExtends as ModelThatExtendsDto } from './models/ModelThatExtends';
export type { ModelThatExtendsExtends as ModelThatExtendsExtendsDto } from './models/ModelThatExtendsExtends';
export type { ModelWithArray as ModelWithArrayDto } from './models/ModelWithArray';
export type { ModelWithDictionary as ModelWithDictionaryDto } from './models/ModelWithDictionary';
export { ModelWithEnum as ModelWithEnumDto } from './models/ModelWithEnum';
export type { ModelWithString as ModelWithStringDto } from './models/ModelWithString';
export type { Pageable as PageableDto } from './models/Pageable';

export { $DeprecatedModel } from './schemas/$DeprecatedModel';
export { $ModelThatExtends } from './schemas/$ModelThatExtends';
export { $ModelThatExtendsExtends } from './schemas/$ModelThatExtendsExtends';
export { $ModelWithArray } from './schemas/$ModelWithArray';
export { $ModelWithDictionary } from './schemas/$ModelWithDictionary';
export { $ModelWithEnum } from './schemas/$ModelWithEnum';
export { $ModelWithString } from './schemas/$ModelWithString';
export { $Pageable } from './schemas/$Pageable';

export { CollectionFormatService } from './services/CollectionFormatService';
export { ComplexService } from './services/ComplexService';
export { DefaultService } from './services/DefaultService';
export { DefaultsService } from './services/DefaultsService';
export { DeprecatedService } from './services/DeprecatedService';
export { DescriptionsService } from './services/DescriptionsService';
export { DuplicateService } from './services/DuplicateService';
export { ErrorService } from './services/ErrorService';
export { FormDataService } from './services/FormDataService';
export { HeaderService } from './services/HeaderService';
export { MultipartService } from './services/MultipartService';
export { MultipleTags1Service } from './services/MultipleTags1Service';
export { MultipleTags2Service } from './services/MultipleTags2Service';
export { MultipleTags3Service } from './services/MultipleTags3Service';
export { NoContentService } from './services/NoContentService';
export { ParametersService } from './services/ParametersService';
export { RequestBodyService } from './services/RequestBodyService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';
export { UploadService } from './services/UploadService';
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type _default = {
    name?: string;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
 */
export type CommentWithBackticks = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing multiline comments in string: First line
 * Second line
 *
 * Fourth line
 */
export type CommentWithBreaks = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing expression placeholders in string: \${expression} should work
 */
export type CommentWithExpressionPlaceholders = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing quotes in string: 'single quote''' and "double quotes""" should work
 */
export type CommentWithQuotes = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing reserved characters in string: * inline * and ** inline ** should work
 */
export type CommentWithReservedCharacters = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
 */
export type CommentWithSlashes = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionBaseModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a base model with two simple optional properties
 */
export type CompositionBaseModel = {
    firstName?: string;
    lastname?: string;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionExtendedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CompositionBaseModel } from './CompositionBaseModel';
/**
 * This is a model that extends the base model
 */
export type CompositionExtendedModel = (CompositionBaseModel & {
    firstName: string;
    lastname: string;
    age: number;
});

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithAllOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property with a 'all of' relationship
 */
export type CompositionWithAllOfAndNullable = {
    propA?: {
        boolean?: boolean;
        /**
         * This is a simple enum with strings
         */
        test?: CompositionWithAllOfAndNullable.test;
        /**
         * These are the HTTP error code enums
         */
        statusCode?: CompositionWithAllOfAndNullable.statusCode;
        /**
         * Simple boolean enum
         */
        bool?: boolean;
        prop?: Array<ModelWithString>;
        propWithFile?: Array<Blob>;
        propWithNumber?: Array<number>;
        prop?: Record<string, string>;
    } | null;
};
export namespace CompositionWithAllOfAndNullable {
    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }
    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }
}

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithAnyOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithAnyOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
/**
 * This is a model with one property with a 'any of' relationship
 */
export type CompositionWithAnyOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithAnyOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property with a 'any of' relationship where the options are not $ref
 */
export type CompositionWithAnyOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithOneOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOf = {
    propA?: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a dictionary of complex arrays (composited) within composition
 */
export type CompositionWithOneOfAndComplexArrayDictionary = {
    propA?: (boolean | Record<string, Array<(number | string)>>);
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithOneOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from './ModelWithArray';
import type { ModelWithDictionary } from './ModelWithDictionary';
import type { ModelWithEnum } from './ModelWithEnum';
/**
 * This is a model with one property with a 'one of' relationship
 */
export type CompositionWithOneOfAndNullable = {
    propA?: ({
        boolean?: boolean;
    } | ModelWithEnum | ModelWithArray | ModelWithDictionary) | null;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a dictionary of simple arrays within composition
 */
export type CompositionWithOneOfAndSimpleArrayDictionary = {
    propA?: (boolean | Record<string, Array<boolean>>);
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a simple dictionary within composition
 */
export type CompositionWithOneOfAndSimpleDictionary = {
    propA?: (boolean | Record<string, number>);
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithOneOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfAnonymous = {
    propA?: ({
        propA?: string;
    } | string | number);
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/CompositionWithOneOfDiscriminator.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelCircle } from './ModelCircle';
import type { ModelSquare } from './ModelSquare';
/**
 * This is a model with one property with a 'one of' relationship where the options are not $ref
 */
export type CompositionWithOneOfDiscriminator = (ModelCircle | ModelSquare);

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/DeprecatedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a deprecated model with a deprecated property
 * @deprecated
 */
export type DeprecatedModel = {
    /**
     * This is a deprecated property
     * @deprecated
     */
    prop?: string;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Record<string, Array<ModelWithString>>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Record<string, Record<string, string>>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Record<string, {
    foo?: string;
    bar?: string;
}>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a string reference
 */
export type DictionaryWithReference = Record<string, ModelWithString>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a string dictionary
 */
export type DictionaryWithString = Record<string, string>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Success=1,Warning=2,Error=3
 */
export type EnumFromDescription = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with numbers
 */
export enum EnumWithExtensions {
    /**
     * Used when the status of something is successful
     */
    CUSTOM_SUCCESS = 200,
    /**
     * Used when the status of something has a warning
     */
    CUSTOM_WARNING = 400,
    /**
     * Used when the status of something has an error
     */
    CUSTOM_ERROR = 500,
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    '_1' = 1,
    '_2' = 2,
    '_3' = 3,
    '_1.1' = 1.1,
    '_1.2' = 1.2,
    '_1.3' = 1.3,
    '_100' = 100,
    '_200' = 200,
    '_300' = 300,
    '_-100' = -100,
    '_-200' = -200,
    '_-300' = -300,
    '_-1.1' = -1.1,
    '_-1.2' = -1.2,
    '_-1.3' = -1.3,
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    SUCCESS = 'Success',
    WARNING = 'Warning',
    ERROR = 'Error',
    _SINGLE_QUOTE_ = '\\'Single Quote\\'',
    _DOUBLE_QUOTES_ = '"Double Quotes"',
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/File.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type File = {
    readonly id?: string;
    readonly updated_at?: string;
    readonly created_at?: string;
    mime: string;
    readonly file?: string;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/FreeFormObjectWithAdditionalPropertiesEqEmptyObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a free-form object with additionalProperties: {}.
 */
export type FreeFormObjectWithAdditionalPropertiesEqEmptyObject = Record<string, any>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/FreeFormObjectWithAdditionalPropertiesEqTrue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a free-form object with additionalProperties: true.
 */
export type FreeFormObjectWithAdditionalPropertiesEqTrue = Record<string, any>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/FreeFormObjectWithoutAdditionalProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a free-form object without additionalProperties.
 */
export type FreeFormObjectWithoutAdditionalProperties = Record<string, any>;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelCircle.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Circle
 */
export type ModelCircle = {
    kind: 'circle';
    radius?: number;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelSquare.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * Square
 */
export type ModelSquare = {
    kind: 'square';
    sideLength?: number;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtends = {
    /**
     * This is a simple string property
     */
    prop?: string;
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model that extends another model
 */
export type ModelThatExtendsExtends = {
    /**
     * This is a simple string property
     */
    prop?: string;
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one property containing an array
 */
export type ModelWithArray = {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<Blob>;
    propWithNumber?: Array<number>;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one boolean property
 */
export type ModelWithBoolean = {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property containing a circular reference
 */
export type ModelWithCircularReference = {
    prop?: ModelWithCircularReference;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one property containing a dictionary
 */
export type ModelWithDictionary = {
    prop?: Record<string, string>;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated imports
 */
export type ModelWithDuplicateImports = {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with duplicated properties
 */
export type ModelWithDuplicateProperties = {
    prop?: ModelWithString;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one enum
 */
export type ModelWithEnum = {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
    /**
     * These are the HTTP error code enums
     */
    statusCode?: ModelWithEnum.statusCode;
    /**
     * Simple boolean enum
     */
    bool?: boolean;
};
export namespace ModelWithEnum {
    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }
    /**
     * These are the HTTP error code enums
     */
    export enum statusCode {
        _100 = '100',
        _200_FOO = '200 FOO',
        _300_FOO_BAR = '300 FOO_BAR',
        _400_FOO_BAR = '400 foo-bar',
        _500_FOO_BAR = '500 foo.bar',
        _600_FOO_BAR = '600 foo&bar',
    }
}

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one enum
 */
export type ModelWithEnumFromDescription = {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: number;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one number property
 */
export type ModelWithInteger = {
    /**
     * This is a simple number property
     */
    prop?: number;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with nested enums
 */
export type ModelWithNestedEnums = {
    dictionaryWithEnum?: Record<string, 'Success' | 'Warning' | 'Error'>;
    dictionaryWithEnumFromDescription?: Record<string, number>;
    arrayWithEnum?: Array<'Success' | 'Warning' | 'Error'>;
    arrayWithDescription?: Array<number>;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one nested property
 */
export type ModelWithNestedProperties = {
    readonly first: {
        readonly second: {
            readonly third: string | null;
        } | null;
    } | null;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one string property
 */
export type ModelWithNullableString = {
    /**
     * This is a simple string property
     */
    nullableProp1?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp1: string | null;
    /**
     * This is a simple string property
     */
    nullableProp2?: string | null;
    /**
     * This is a simple string property
     */
    nullableRequiredProp2: string | null;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with ordered properties
 */
export type ModelWithOrderedProperties = {
    zebra?: string;
    apple?: string;
    hawaii?: string;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model that contains a some patterns
 */
export type ModelWithPattern = {
    key: string;
    name: string;
    readonly enabled?: boolean;
    readonly modified?: string;
    id?: string;
    text?: string;
    patternWithSingleQuotes?: string;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a model with one nested property
 */
export type ModelWithProperties = {
    required: string;
    readonly requiredAndReadOnly: string;
    requiredAndNullable: string | null;
    string?: string;
    number?: number;
    boolean?: boolean;
    reference?: ModelWithString;
    'property with space'?: string;
    default?: string;
    try?: string;
    readonly '@namespace.string'?: string;
    readonly '@namespace.integer'?: number;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithProperties } from './ModelWithProperties';
/**
 * This is a model with one property containing a reference
 */
export type ModelWithReference = {
    prop?: ModelWithProperties;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a model with one string property
 */
export type ModelWithString = {
    /**
     * This is a simple string property
     */
    prop?: string;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/Pageable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export type Pageable = {
    page?: number;
    size?: number;
    sort?: Array<string>;
};

"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple file
 */
export type SimpleFile = Blob;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple number
 */
export type SimpleInteger = number;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/SimpleParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a reusable parameter
 */
export type SimpleParameter = string;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from './ModelWithString';
/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple string
 */
export type SimpleString = string;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/models/SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/**
 * This is a simple string
 */
export type SimpleStringWithPattern = string | null;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$_default.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $_default = {
    properties: {
        name: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ArrayWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithArray = {
    type: 'array',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ArrayWithBooleans.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithBooleans = {
    type: 'array',
    contains: {
        type: 'boolean',
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ArrayWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithNumbers = {
    type: 'array',
    contains: {
        type: 'number',
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ArrayWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithProperties = {
    type: 'array',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ArrayWithReferences.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithReferences = {
    type: 'array',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ArrayWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ArrayWithStrings = {
    type: 'array',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CommentWithBackticks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBackticks = {
    type: 'number',
    description: \`Testing backticks in string: \\\`backticks\\\` and \\\`\\\`\\\`multiple backticks\\\`\\\`\\\` should work\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CommentWithBreaks.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithBreaks = {
    type: 'number',
    description: \`Testing multiline comments in string: First line
    Second line
    Fourth line\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CommentWithExpressionPlaceholders.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithExpressionPlaceholders = {
    type: 'number',
    description: \`Testing expression placeholders in string: \\\${expression} should work\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CommentWithQuotes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithQuotes = {
    type: 'number',
    description: \`Testing quotes in string: 'single quote''' and "double quotes""" should work\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CommentWithReservedCharacters.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithReservedCharacters = {
    type: 'number',
    description: \`Testing reserved characters in string: /* inline */ and /** inline **/ should work\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CommentWithSlashes.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CommentWithSlashes = {
    type: 'number',
    description: \`Testing slashes in string: \\\\backwards\\\\\\\\\\\\ and /forwards/// should work\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionBaseModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionBaseModel = {
    description: \`This is a base model with two simple optional properties\`,
    properties: {
        firstName: {
            type: 'string',
        },
        lastname: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionExtendedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionExtendedModel = {
    type: 'all-of',
    description: \`This is a model that extends the base model\`,
    contains: [{
        type: 'CompositionBaseModel',
    }, {
        properties: {
            firstName: {
                type: 'string',
                isRequired: true,
            },
            lastname: {
                type: 'string',
                isRequired: true,
            },
            age: {
                type: 'number',
                isRequired: true,
            },
        },
    }],
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithAllOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAllOfAndNullable = {
    description: \`This is a model with one property with a 'all of' relationship\`,
    properties: {
        propA: {
            properties: {
                boolean: {
                    type: 'boolean',
                },
                test: {
                    type: 'Enum',
                },
                statusCode: {
                    type: 'Enum',
                },
                bool: {
                    type: 'boolean',
                    description: \`Simple boolean enum\`,
                },
                prop: {
                    type: 'array',
                    contains: {
                        type: 'ModelWithString',
                    },
                },
                propWithFile: {
                    type: 'array',
                    contains: {
                        type: 'binary',
                    },
                },
                propWithNumber: {
                    type: 'array',
                    contains: {
                        type: 'number',
                    },
                },
                prop: {
                    type: 'dictionary',
                    contains: {
                        type: 'string',
                    },
                },
            },
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithAnyOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOf = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithAnyOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAndNullable = {
    description: \`This is a model with one property with a 'any of' relationship\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithAnyOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithAnyOfAnonymous = {
    description: \`This is a model with one property with a 'any of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'any-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithOneOf.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOf = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'ModelWithString',
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithOneOfAndComplexArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndComplexArrayDictionary = {
    description: \`This is a model that contains a dictionary of complex arrays (composited) within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'one-of',
                        contains: [{
                            type: 'number',
                        }, {
                            type: 'string',
                        }],
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithOneOfAndNullable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndNullable = {
    description: \`This is a model with one property with a 'one of' relationship\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                properties: {
                    boolean: {
                        type: 'boolean',
                    },
                },
            }, {
                type: 'ModelWithEnum',
            }, {
                type: 'ModelWithArray',
            }, {
                type: 'ModelWithDictionary',
            }],
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithOneOfAndSimpleArrayDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleArrayDictionary = {
    description: \`This is a model that contains a dictionary of simple arrays within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'array',
                    contains: {
                        type: 'boolean',
                    },
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithOneOfAndSimpleDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAndSimpleDictionary = {
    description: \`This is a model that contains a simple dictionary within composition\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                type: 'boolean',
            }, {
                type: 'dictionary',
                contains: {
                    type: 'number',
                },
            }],
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithOneOfAnonymous.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfAnonymous = {
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    properties: {
        propA: {
            type: 'one-of',
            contains: [{
                description: \`Anonymous object type\`,
                properties: {
                    propA: {
                        type: 'string',
                    },
                },
            }, {
                type: 'string',
                description: \`Anonymous string type\`,
            }, {
                type: 'number',
                description: \`Anonymous integer type\`,
            }],
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$CompositionWithOneOfDiscriminator.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $CompositionWithOneOfDiscriminator = {
    type: 'one-of',
    description: \`This is a model with one property with a 'one of' relationship where the options are not $ref\`,
    contains: [{
        type: 'ModelCircle',
    }, {
        type: 'ModelSquare',
    }],
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$DeprecatedModel.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DeprecatedModel = {
    description: \`This is a deprecated model with a deprecated property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a deprecated property\`,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$DictionaryWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithArray = {
    type: 'dictionary',
    contains: {
        type: 'array',
        contains: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$DictionaryWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithDictionary = {
    type: 'dictionary',
    contains: {
        type: 'dictionary',
        contains: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$DictionaryWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithProperties = {
    type: 'dictionary',
    contains: {
        properties: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$DictionaryWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithReference = {
    type: 'dictionary',
    contains: {
        type: 'ModelWithString',
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$DictionaryWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $DictionaryWithString = {
    type: 'dictionary',
    contains: {
        type: 'string',
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$EnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumFromDescription = {
    type: 'number',
    description: \`Success=1,Warning=2,Error=3\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$EnumWithExtensions.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithExtensions = {
    type: 'Enum',
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$EnumWithNumbers.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithNumbers = {
    type: 'Enum',
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$EnumWithStrings.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $EnumWithStrings = {
    type: 'Enum',
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$File.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $File = {
    properties: {
        id: {
            type: 'string',
            isReadOnly: true,
            minLength: 1,
        },
        updated_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        created_at: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        mime: {
            type: 'string',
            isRequired: true,
            maxLength: 24,
            minLength: 1,
        },
        file: {
            type: 'string',
            isReadOnly: true,
            format: 'uri',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$FreeFormObjectWithAdditionalPropertiesEqEmptyObject.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithAdditionalPropertiesEqEmptyObject = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$FreeFormObjectWithAdditionalPropertiesEqTrue.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithAdditionalPropertiesEqTrue = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$FreeFormObjectWithoutAdditionalProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $FreeFormObjectWithoutAdditionalProperties = {
    type: 'dictionary',
    contains: {
        properties: {
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelCircle.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelCircle = {
    description: \`Circle\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        radius: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelSquare.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelSquare = {
    description: \`Square\`,
    properties: {
        kind: {
            type: 'string',
            isRequired: true,
        },
        sideLength: {
            type: 'number',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelThatExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtends = {
    description: \`This is a model that extends another model\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
        propExtendsA: {
            type: 'string',
        },
        propExtendsB: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelThatExtendsExtends.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelThatExtendsExtends = {
    description: \`This is a model that extends another model\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
        propExtendsC: {
            type: 'string',
        },
        propExtendsD: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithArray.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithArray = {
    description: \`This is a model with one property containing an array\`,
    properties: {
        prop: {
            type: 'array',
            contains: {
                type: 'ModelWithString',
            },
        },
        propWithFile: {
            type: 'array',
            contains: {
                type: 'binary',
            },
        },
        propWithNumber: {
            type: 'array',
            contains: {
                type: 'number',
            },
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithBoolean = {
    description: \`This is a model with one boolean property\`,
    properties: {
        prop: {
            type: 'boolean',
            description: \`This is a simple boolean property\`,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithCircularReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithCircularReference = {
    description: \`This is a model with one property containing a circular reference\`,
    properties: {
        prop: {
            type: 'ModelWithCircularReference',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithDictionary.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDictionary = {
    description: \`This is a model with one property containing a dictionary\`,
    properties: {
        prop: {
            type: 'dictionary',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithDuplicateImports.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateImports = {
    description: \`This is a model with duplicated imports\`,
    properties: {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithDuplicateProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithDuplicateProperties = {
    description: \`This is a model with duplicated properties\`,
    properties: {
        prop: {
            type: 'ModelWithString',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithEnum.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnum = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'Enum',
        },
        statusCode: {
            type: 'Enum',
        },
        bool: {
            type: 'boolean',
            description: \`Simple boolean enum\`,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithEnumFromDescription.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithEnumFromDescription = {
    description: \`This is a model with one enum\`,
    properties: {
        test: {
            type: 'number',
            description: \`Success=1,Warning=2,Error=3\`,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithInteger = {
    description: \`This is a model with one number property\`,
    properties: {
        prop: {
            type: 'number',
            description: \`This is a simple number property\`,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithNestedEnums.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedEnums = {
    description: \`This is a model with nested enums\`,
    properties: {
        dictionaryWithEnum: {
            type: 'dictionary',
            contains: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'dictionary',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
        arrayWithEnum: {
            type: 'array',
            contains: {
                type: 'Enum',
            },
        },
        arrayWithDescription: {
            type: 'array',
            contains: {
                type: 'number',
                description: \`Success=1,Warning=2,Error=3\`,
            },
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithNestedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNestedProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        first: {
            properties: {
                second: {
                    properties: {
                        third: {
                            type: 'string',
                            isReadOnly: true,
                            isRequired: true,
                            isNullable: true,
                        },
                    },
                    isReadOnly: true,
                    isRequired: true,
                    isNullable: true,
                },
            },
            isReadOnly: true,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithNullableString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithNullableString = {
    description: \`This is a model with one string property\`,
    properties: {
        nullableProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp1: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
        nullableProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isNullable: true,
        },
        nullableRequiredProp2: {
            type: 'string',
            description: \`This is a simple string property\`,
            isRequired: true,
            isNullable: true,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithOrderedProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithOrderedProperties = {
    description: \`This is a model with ordered properties\`,
    properties: {
        zebra: {
            type: 'string',
        },
        apple: {
            type: 'string',
        },
        hawaii: {
            type: 'string',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithPattern = {
    description: \`This is a model that contains a some patterns\`,
    properties: {
        key: {
            type: 'string',
            isRequired: true,
            maxLength: 64,
            pattern: '^[a-zA-Z0-9_]*$',
        },
        name: {
            type: 'string',
            isRequired: true,
            maxLength: 255,
        },
        enabled: {
            type: 'boolean',
            isReadOnly: true,
        },
        modified: {
            type: 'string',
            isReadOnly: true,
            format: 'date-time',
        },
        id: {
            type: 'string',
            pattern: '^\\\\d{2}-\\\\d{3}-\\\\d{4}$',
        },
        text: {
            type: 'string',
            pattern: '^\\\\w+$',
        },
        patternWithSingleQuotes: {
            type: 'string',
            pattern: '^[a-zA-Z0-9\\']*$',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithProperties.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithProperties = {
    description: \`This is a model with one nested property\`,
    properties: {
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        requiredAndNullable: {
            type: 'string',
            isRequired: true,
            isNullable: true,
        },
        string: {
            type: 'string',
        },
        number: {
            type: 'number',
        },
        boolean: {
            type: 'boolean',
        },
        reference: {
            type: 'ModelWithString',
        },
        'property with space': {
            type: 'string',
        },
        default: {
            type: 'string',
        },
        try: {
            type: 'string',
        },
        '@namespace.string': {
            type: 'string',
            isReadOnly: true,
        },
        '@namespace.integer': {
            type: 'number',
            isReadOnly: true,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithReference = {
    description: \`This is a model with one property containing a reference\`,
    properties: {
        prop: {
            type: 'ModelWithProperties',
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$ModelWithString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $ModelWithString = {
    description: \`This is a model with one string property\`,
    properties: {
        prop: {
            type: 'string',
            description: \`This is a simple string property\`,
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$Pageable.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $Pageable = {
    properties: {
        page: {
            type: 'number',
            format: 'int32',
        },
        size: {
            type: 'number',
            format: 'int32',
            minimum: 1,
        },
        sort: {
            type: 'array',
            contains: {
                type: 'string',
            },
        },
    },
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$SimpleBoolean.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleBoolean = {
    type: 'boolean',
    description: \`This is a simple boolean\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$SimpleFile.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleFile = {
    type: 'binary',
    description: \`This is a simple file\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$SimpleInteger.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleInteger = {
    type: 'number',
    description: \`This is a simple number\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$SimpleParameter.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleParameter = {
    type: 'string',
    description: \`This is a reusable parameter\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$SimpleReference.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleReference = {
    type: 'ModelWithString',
    description: \`This is a simple reference\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$SimpleString.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleString = {
    type: 'string',
    description: \`This is a simple string\`,
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/schemas/$SimpleStringWithPattern.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
export const $SimpleStringWithPattern = {
    type: 'string',
    description: \`This is a simple string\`,
    isNullable: true,
    maxLength: 64,
    pattern: '^[a-zA-Z0-9_]*$',
} as const;
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/CollectionFormatService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class CollectionFormatService {
    /**
     * @param parameterArrayCsv This is an array parameter that is sent as csv format (comma-separated values)
     * @param parameterArraySsv This is an array parameter that is sent as ssv format (space-separated values)
     * @param parameterArrayTsv This is an array parameter that is sent as tsv format (tab-separated values)
     * @param parameterArrayPipes This is an array parameter that is sent as pipes format (pipe-separated values)
     * @param parameterArrayMulti This is an array parameter that is sent as multi format (multiple parameter instances)
     * @throws ApiError
     */
    public static collectionFormat(parameterArrayCsv: Array<string> | null,
    parameterArraySsv: Array<string> | null,
    parameterArrayTsv: Array<string> | null,
    parameterArrayPipes: Array<string> | null,
    parameterArrayMulti: Array<string> | null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/collectionFormat',
        query: {
            'parameterArrayCSV': parameterArrayCsv,
            'parameterArraySSV': parameterArraySsv,
            'parameterArrayTSV': parameterArrayTsv,
            'parameterArrayPipes': parameterArrayPipes,
            'parameterArrayMulti': parameterArrayMulti,
        },
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/ComplexService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithArray } from '../models/ModelWithArray';
import type { ModelWithDictionary } from '../models/ModelWithDictionary';
import type { ModelWithEnum } from '../models/ModelWithEnum';
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class ComplexService {
    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @returns ModelWithString Successful response
     * @throws ApiError
     */
    public static complexTypes(parameterObject: {
        first?: {
            second?: {
                third?: string;
            };
        };
    },
    parameterReference: ModelWithString,
): CancelablePromise<Array<ModelWithString>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/complex',
        query: {
            'parameterObject': parameterObject,
            'parameterReference': parameterReference,
        },
        errors: {
            400: \`400 server error\`,
            500: \`500 server error\`,
        },
    });
}
/**
 * @param id
 * @param requestBody
 * @returns ModelWithString Success
 * @throws ApiError
 */
public static complexParams(id: number,
requestBody?: {
    readonly key: string | null;
    name: string | null;
    enabled?: boolean;
    readonly type: 'Monkey' | 'Horse' | 'Bird';
    listOfModels?: Array<ModelWithString> | null;
    listOfStrings?: Array<string> | null;
    parameters: (ModelWithString | ModelWithEnum | ModelWithArray | ModelWithDictionary);
    readonly user?: {
        readonly id?: number;
        readonly name?: string | null;
    };
},
): CancelablePromise<ModelWithString> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/complex/{id}',
        path: {
            'id': id,
        },
        body: requestBody,
        mediaType: 'application/json-patch+json',
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/DefaultService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DefaultService {
    /**
     * @throws ApiError
     */
    public static serviceWithEmptyTag(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-tag',
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/DefaultsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DefaultsService {
    /**
     * @param parameterString This is a simple string with default value
     * @param parameterNumber This is a simple number with default value
     * @param parameterBoolean This is a simple boolean with default value
     * @param parameterEnum This is a simple enum with default value
     * @param parameterModel This is a simple model with default value
     * @throws ApiError
     */
    public static callWithDefaultParameters(parameterString: string | null = 'Hello World!',
    parameterNumber: number | null = 123,
    parameterBoolean: boolean | null = true,
    parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
    parameterModel: ModelWithString | null = {
        "prop": "Hello World!"
    },
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterString': parameterString,
            'parameterNumber': parameterNumber,
            'parameterBoolean': parameterBoolean,
            'parameterEnum': parameterEnum,
            'parameterModel': parameterModel,
        },
    });
}
/**
 * @param parameterString This is a simple string that is optional with default value
 * @param parameterNumber This is a simple number that is optional with default value
 * @param parameterBoolean This is a simple boolean that is optional with default value
 * @param parameterEnum This is a simple enum that is optional with default value
 * @param parameterModel This is a simple model that is optional with default value
 * @throws ApiError
 */
public static callWithDefaultOptionalParameters(parameterString: string = 'Hello World!',
parameterNumber: number = 123,
parameterBoolean: boolean = true,
parameterEnum: 'Success' | 'Warning' | 'Error' = 'Success',
parameterModel: ModelWithString = {
    "prop": "Hello World!"
},
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterString': parameterString,
            'parameterNumber': parameterNumber,
            'parameterBoolean': parameterBoolean,
            'parameterEnum': parameterEnum,
            'parameterModel': parameterModel,
        },
    });
}
/**
 * @param parameterStringWithNoDefault This is a string with no default
 * @param parameterOptionalStringWithDefault This is a optional string with default
 * @param parameterOptionalStringWithEmptyDefault This is a optional string with empty default
 * @param parameterOptionalStringWithNoDefault This is a optional string with no default
 * @param parameterStringWithDefault This is a string with default
 * @param parameterStringWithEmptyDefault This is a string with empty default
 * @param parameterStringNullableWithNoDefault This is a string that can be null with no default
 * @param parameterStringNullableWithDefault This is a string that can be null with default
 * @throws ApiError
 */
public static callToTestOrderOfParams(parameterStringWithNoDefault: string,
parameterOptionalStringWithDefault: string = 'Hello World!',
parameterOptionalStringWithEmptyDefault: string = '',
parameterOptionalStringWithNoDefault?: string,
parameterStringWithDefault: string = 'Hello World!',
parameterStringWithEmptyDefault: string = '',
parameterStringNullableWithNoDefault?: string | null,
parameterStringNullableWithDefault: string | null = null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'PUT',
        url: '/api/v{api-version}/defaults',
        query: {
            'parameterOptionalStringWithDefault': parameterOptionalStringWithDefault,
            'parameterOptionalStringWithEmptyDefault': parameterOptionalStringWithEmptyDefault,
            'parameterOptionalStringWithNoDefault': parameterOptionalStringWithNoDefault,
            'parameterStringWithDefault': parameterStringWithDefault,
            'parameterStringWithEmptyDefault': parameterStringWithEmptyDefault,
            'parameterStringWithNoDefault': parameterStringWithNoDefault,
            'parameterStringNullableWithNoDefault': parameterStringNullableWithNoDefault,
            'parameterStringNullableWithDefault': parameterStringNullableWithDefault,
        },
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/DeprecatedService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { DeprecatedModel } from '../models/DeprecatedModel';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DeprecatedService {
    /**
     * @deprecated
     * @param parameter This parameter is deprecated
     * @throws ApiError
     */
    public static deprecatedCall(parameter: DeprecatedModel | null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/deprecated',
        headers: {
            'parameter': parameter,
        },
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/DescriptionsService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DescriptionsService {
    /**
     * @param parameterWithBreaks Testing multiline comments in string: First line
     * Second line
     *
     * Fourth line
     * @param parameterWithBackticks Testing backticks in string: \`backticks\` and \`\`\`multiple backticks\`\`\` should work
     * @param parameterWithSlashes Testing slashes in string: \\backwards\\\\\\ and /forwards/// should work
     * @param parameterWithExpressionPlaceholders Testing expression placeholders in string: \${expression} should work
     * @param parameterWithQuotes Testing quotes in string: 'single quote''' and "double quotes""" should work
     * @param parameterWithReservedCharacters Testing reserved characters in string: * inline * and ** inline ** should work
     * @throws ApiError
     */
    public static callWithDescriptions(parameterWithBreaks?: any,
    parameterWithBackticks?: any,
    parameterWithSlashes?: any,
    parameterWithExpressionPlaceholders?: any,
    parameterWithQuotes?: any,
    parameterWithReservedCharacters?: any,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/descriptions/',
        query: {
            'parameterWithBreaks': parameterWithBreaks,
            'parameterWithBackticks': parameterWithBackticks,
            'parameterWithSlashes': parameterWithSlashes,
            'parameterWithExpressionPlaceholders': parameterWithExpressionPlaceholders,
            'parameterWithQuotes': parameterWithQuotes,
            'parameterWithReservedCharacters': parameterWithReservedCharacters,
        },
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/DuplicateService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class DuplicateService {
    /**
     * @throws ApiError
     */
    public static duplicateName(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName1(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName2(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/duplicate',
        });
    }
    /**
     * @throws ApiError
     */
    public static duplicateName3(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/duplicate',
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/ErrorService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class ErrorService {
    /**
     * @param status Status code to return
     * @returns any Custom message: Successful response
     * @throws ApiError
     */
    public static testErrorCode(status: number,
): CancelablePromise<any> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/error',
        query: {
            'status': status,
        },
        errors: {
            500: \`Custom message: Internal Server Error\`,
            501: \`Custom message: Not Implemented\`,
            502: \`Custom message: Bad Gateway\`,
            503: \`Custom message: Service Unavailable\`,
        },
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/FormDataService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class FormDataService {
    /**
     * @param parameter This is a reusable parameter
     * @param formData A reusable request body
     * @throws ApiError
     */
    public static postApiFormData(parameter?: string,
    formData?: ModelWithString,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/formData/',
        query: {
            'parameter': parameter,
        },
        formData: formData,
        mediaType: 'multipart/form-data',
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/HeaderService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class HeaderService {
    /**
     * @returns string Successful response
     * @throws ApiError
     */
    public static callWithResultFromHeader(): CancelablePromise<string> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/header',
            responseHeader: 'operation-location',
            errors: {
                400: \`400 server error\`,
                500: \`500 server error\`,
            },
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/MultipartService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class MultipartService {
    /**
     * @param formData
     * @throws ApiError
     */
    public static multipartRequest(formData?: {
        content?: Blob;
        data?: ModelWithString | null;
    },
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/multipart',
        formData: formData,
        mediaType: 'multipart/form-data',
    });
}
/**
 * @returns any OK
 * @throws ApiError
 */
public static multipartResponse(): CancelablePromise<{
    file?: Blob;
    metadata?: {
        foo?: string;
        bar?: string;
    };
}> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/multipart',
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/MultipleTags1Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class MultipleTags1Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/MultipleTags2Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class MultipleTags2Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyA(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/a',
        });
    }
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/MultipleTags3Service.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class MultipleTags3Service {
    /**
     * @returns void
     * @throws ApiError
     */
    public static dummyB(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/multiple-tags/b',
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/NoContentService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class NoContentService {
    /**
     * @returns void
     * @throws ApiError
     */
    public static callWithNoContentResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/no-content',
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/ParametersService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { Pageable } from '../models/Pageable';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class ParametersService {
    /**
     * @param parameterHeader This is the parameter that goes into the header
     * @param parameterQuery This is the parameter that goes into the query params
     * @param parameterForm This is the parameter that goes into the form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param parameterPath This is the parameter that goes into the path
     * @param requestBody This is the parameter that goes into the body
     * @throws ApiError
     */
    public static callWithParameters(parameterHeader: string | null,
    parameterQuery: string | null,
    parameterForm: string | null,
    parameterCookie: string | null,
    parameterPath: string | null,
    requestBody: ModelWithString | null,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameterPath}',
        path: {
            'parameterPath': parameterPath,
        },
        cookies: {
            'parameterCookie': parameterCookie,
        },
        headers: {
            'parameterHeader': parameterHeader,
        },
        query: {
            'parameterQuery': parameterQuery,
        },
        formData: {
            'parameterForm': parameterForm,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * @param parameterHeader This is the parameter that goes into the request header
 * @param parameterQuery This is the parameter that goes into the request query params
 * @param parameterForm This is the parameter that goes into the request form data
 * @param parameterCookie This is the parameter that goes into the cookie
 * @param requestBody This is the parameter that goes into the body
 * @param parameterPath1 This is the parameter that goes into the path
 * @param parameterPath2 This is the parameter that goes into the path
 * @param parameterPath3 This is the parameter that goes into the path
 * @param _default This is the parameter with a reserved keyword
 * @throws ApiError
 */
public static callWithWeirdParameterNames(parameterHeader: string | null,
parameterQuery: string | null,
parameterForm: string | null,
parameterCookie: string | null,
requestBody: ModelWithString | null,
parameterPath1?: string,
parameterPath2?: string,
parameterPath3?: string,
_default?: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/{parameter.path.1}/{parameter-path-2}/{PARAMETER-PATH-3}',
        path: {
            'parameter.path.1': parameterPath1,
            'parameter-path-2': parameterPath2,
            'PARAMETER-PATH-3': parameterPath3,
        },
        cookies: {
            'PARAMETER-COOKIE': parameterCookie,
        },
        headers: {
            'parameter.header': parameterHeader,
        },
        query: {
            'default': _default,
            'parameter-query': parameterQuery,
        },
        formData: {
            'parameter_form': parameterForm,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * @param requestBody This is a required parameter
 * @param parameter This is an optional parameter
 * @throws ApiError
 */
public static getCallWithOptionalParam(requestBody: ModelWithString,
parameter?: string,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/parameters/',
        query: {
            'parameter': parameter,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
/**
 * @param parameter This is a required parameter
 * @param requestBody This is an optional parameter
 * @throws ApiError
 */
public static postCallWithOptionalParam(parameter: Pageable,
requestBody?: ModelWithString,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/parameters/',
        query: {
            'parameter': parameter,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/RequestBodyService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class RequestBodyService {
    /**
     * @param parameter This is a reusable parameter
     * @param requestBody A reusable request body
     * @throws ApiError
     */
    public static postApiRequestBody(parameter?: string,
    requestBody?: ModelWithString,
): CancelablePromise<void> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/requestBody/',
        query: {
            'parameter': parameter,
        },
        body: requestBody,
        mediaType: 'application/json',
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/ResponseService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { ModelThatExtends } from '../models/ModelThatExtends';
import type { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import type { ModelWithString } from '../models/ModelWithString';
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class ResponseService {
    /**
     * @returns ModelWithString
     * @throws ApiError
     */
    public static callWithResponse(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/response',
        });
    }
    /**
     * @returns ModelWithString Message for default response
     * @throws ApiError
     */
    public static callWithDuplicateResponses(): CancelablePromise<ModelWithString> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }
    /**
     * @returns any Message for 200 response
     * @returns ModelWithString Message for default response
     * @returns ModelThatExtends Message for 201 response
     * @returns ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static callWithResponses(): CancelablePromise<{
        readonly '@namespace.string'?: string;
        readonly '@namespace.integer'?: number;
        readonly value?: Array<ModelWithString>;
    } | ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/response',
            errors: {
                500: \`Message for 500 error\`,
                501: \`Message for 501 error\`,
                502: \`Message for 502 error\`,
            },
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/SimpleService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class SimpleService {
    /**
     * @throws ApiError
     */
    public static getCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static putCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static postCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static deleteCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static optionsCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'OPTIONS',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static headCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'HEAD',
            url: '/api/v{api-version}/simple',
        });
    }
    /**
     * @throws ApiError
     */
    public static patchCallWithoutParametersAndResponse(): CancelablePromise<void> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v{api-version}/simple',
        });
    }
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/TypesService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class TypesService {
    /**
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param id This is a number parameter
     * @returns number Response is a simple number
     * @returns string Response is a simple string
     * @returns boolean Response is a simple boolean
     * @returns any Response is a simple object
     * @throws ApiError
     */
    public static types(parameterArray: Array<string> | null,
    parameterDictionary: Record<string, any> | null,
    parameterEnum: 'Success' | 'Warning' | 'Error' | null,
    parameterNumber: number = 123,
    parameterString: string | null = 'default',
    parameterBoolean: boolean | null = true,
    parameterObject: Record<string, any> | null = null,
    id?: number,
): CancelablePromise<number | string | boolean | Record<string, any>> {
    return __request(OpenAPI, {
        method: 'GET',
        url: '/api/v{api-version}/types',
        path: {
            'id': id,
        },
        query: {
            'parameterNumber': parameterNumber,
            'parameterString': parameterString,
            'parameterBoolean': parameterBoolean,
            'parameterObject': parameterObject,
            'parameterArray': parameterArray,
            'parameterDictionary': parameterDictionary,
            'parameterEnum': parameterEnum,
        },
    });
}
}
"
`;

exports[`v3WithCustomCoreLocation should generate: test/generated/v3WithCustomCoreLocation/services/UploadService.ts 1`] = `
"/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { CancelablePromise } from '../../v3/core/CancelablePromise';
import { OpenAPI } from '../../v3/core/OpenAPI';
import { request as __request } from '../../v3/core/request';
export class UploadService {
    /**
     * @param file Supply a file reference for upload
     * @returns boolean
     * @throws ApiError
     */
    public static uploadFile(file: Blob,
): CancelablePromise<boolean> {
    return __request(OpenAPI, {
        method: 'POST',
        url: '/api/v{api-version}/upload',
        formData: {
            'file': file,
        },
    });
}
}
"
`;
